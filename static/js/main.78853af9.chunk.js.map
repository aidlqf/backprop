{"version":3,"sources":["components/implementations/svg/Legend.js","components/implementations/svg/Arrow.js","components/implementations/graphs/NeuralNetworkComponent.js","components/implementations/graphs/ScatterPlot.js","components/implementations/graphs/Loss.js","components/implementations/article/LinearFunction.js","components/implementations/article/NestedFunction.js","components/implementations/app/Bar.js","nnMiniLibrary/implementations/Neuron.js","nnMiniLibrary/implementations/Loss.js","nnMiniLibrary/implementations/NeuralNetwork.js","nnMiniLibrary/implementations/Tools.js","Utils/implementations/Draw.js","components/implementations/app/MainTool.js","App.js","reportWebVitals.js","index.js"],"names":["Legend","width","height","class","overflow","fill","fontFamily","fontSize","x","y","source","target","color","id","orient","markerWidth","markerHeight","refX","refY","d","markerEnd","strokeWidth","stroke","NeuralNetworkComponent","props","state","array","flattendArray","i","length","e","push","val","array3d","j","k","this","isUndefined","playing","mode","shapedLinks","shapedWeights","shapedRects","miniNN","link","d3","graphConnectionColor","squareWidth","VerticalArrow","xStart","yStart","dirIsUp","vector","Arrow","nn","className","map","layer","neuron","isUndefined3d","currentWeight","sw","Math","abs","s","curr","model","dActStep","Component","ScatterPlot","node","formattedPoints","selectAll","data","enter","append","attr","style","a","padding","start","stop","container","svg","xScale","domain","range","yScale","xAxis","scale","yAxis","call","X","yhat","select","dataSet","remove","plotPoints","Loss","ticks","lossArray","loss","lossMin","lossMax","Bar","title","AppBar","position","variant","background","Toolbar","Typography","Neuron","weights","bias","array1","array2","item","dvalues","oppositeParameter","mult","reduce","b","dvalue","numInputs","dSumArray","input","inputs","activation","sum","multStep","sumStep","actStep","output","dSum","dSumStep","dBias","dWeights","dInputs","dInputsSum","MeanSquaredErrorLoss","subStep","squareStep","pow","NeuralNetwork","shape","biases","dense","array1Length","array2Length","console","error","result","Array","max","label","lastLayer","outputs","forward","ReLU","linear","add","zeros","backward","dValues","dLinear","dReLU","lr","gd","weight","dweight","newWeights","newBias","change","calcChange","n","l","formatWeightArray","uweights","increment","weightSet","t","w","toFunc2DArray","arr","fixed","toFixed","flatten","getRandomInt","floor","random","tensorToArray","tensor","from","dataSync","generateLinearScale","generateLink","adjustment","generateNeuronPlacement","layerProportion","startNeuron","stopNeuron","shapedNeurons","flattenedNeurons","coordinate","generateLinksPlacement","linksGenerator","perLink","layerLinks","neuronLinks","nextNeuron","MainTool","tensorFlowNN","epoch","biasesData","weightsData","rects","direction","curve","controls","speed","sliderVal","stopRender","initNeuralNetwork","bind","run","genTensorData","mutate","train","printParameters","reset","resetParameters","asyncPause","changeModelLr","anim","flattenedWeights","tools","setState","draw","splice","lrChange","tf","key","subkey","value","inputShape","units","useBias","addModel","compile","optimizer","sgd","XTensor","yTensor","timer","ms","Promise","res","setTimeout","play","fit","epochs","yhatTensor","predict","meanSquaredError","eqn","scaled","volume","getWeights","modelCompile","dataSets","PlayButtonClick","Fab","disableTouchRipple","onClick","Stop","PlayArrow","controlsReg","CardActions","Tooltip","arrow","IconButton","disabled","Replay","SlowMotionVideo","controlsBackProp","Button","controlCenter","Box","Card","CardContent","on","placement","open","formattedWeights","nshow","toPrecision","marginTop","num","Chip","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","onChange","min","scatter","marginLeft","neuralNetwork","show","outlineColor","paddingBottom","display","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78853af9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../d3.css\";\n\nfunction Legend() {\n\tconst height = 10;\n\tconst width = 100;\n\treturn (\n\t\t<div>\n\t\t\t<svg width={width} height={height} class=\"grad\" overflow=\"visible\">\n\t\t\t\t<text\n\t\t\t\t\tfill=\"grey\"\n\t\t\t\t\tfontFamily=\"sans-serif\"\n\t\t\t\t\tfontSize=\"10px\"\n\t\t\t\t\tx={0}\n\t\t\t\t\ty={-13}\n\t\t\t\t>\n\t\t\t\t\tColor and stroke\n\t\t\t\t</text>\n\n\t\t\t\t<text\n\t\t\t\t\tfill=\"grey\"\n\t\t\t\t\tfontFamily=\"sans-serif\"\n\t\t\t\t\tfontSize=\"10px\"\n\t\t\t\t\tx={0}\n\t\t\t\t\ty={-4}\n\t\t\t\t>\n\t\t\t\t\tindicate weight\n\t\t\t\t</text>\n\n\t\t\t\t<text fontSize=\"12px\" fill=\"grey\" x={-0.5} y={18}>\n\t\t\t\t\t|\n\t\t\t\t</text>\n\t\t\t\t<text fontSize=\"13px\" fill=\"grey\" x={-2.5} y={28}>\n\t\t\t\t\t–\n\t\t\t\t</text>\n\n\t\t\t\t<text fontSize=\"12px\" fill=\"grey\" x={width / 2 - 2} y={18}>\n\t\t\t\t\t|\n\t\t\t\t</text>\n\t\t\t\t<text fontSize=\"13px\" fill=\"grey\" x={width / 2 - 4.5} y={30}>\n\t\t\t\t\t0\n\t\t\t\t</text>\n\n\t\t\t\t<text fontSize=\"12px\" fill=\"grey\" x={width - 2} y={18}>\n\t\t\t\t\t|\n\t\t\t\t</text>\n\t\t\t\t<text fontSize=\"13px\" fill=\"grey\" x={width - 3 - 1.5} y={28}>\n\t\t\t\t\t+\n\t\t\t\t</text>\n\t\t\t</svg>\n\t\t</div>\n\t);\n}\n\nexport default Legend;\n","import React from \"react\";\nconst Legend = ({ source, target, color }) => (\n\t<g>\n\t\t<defs>\n\t\t\t<marker\n\t\t\t\tid=\"head\"\n\t\t\t\torient=\"auto\"\n\t\t\t\tmarkerWidth=\"3\"\n\t\t\t\tmarkerHeight=\"4\"\n\t\t\t\trefX=\"0.1\"\n\t\t\t\trefY=\"2\"\n\t\t\t>\n\t\t\t\t<path d=\"M0,0 V4 L2,2 Z\" fill={color} />\n\t\t\t</marker>\n\t\t</defs>\n\t\t<path\n\t\t\tid=\"arrow-line\"\n\t\t\tmarkerEnd=\"url(#head)\"\n\t\t\tstrokeWidth=\"3\"\n\t\t\tfill=\"none\"\n\t\t\tstroke={color}\n\t\t\td={`M${source.x},${source.y}, ${target.x}, ${target.y}`}\n\t\t/>\n\t</g>\n);\nexport default Legend;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport Legend from \"../svg/Legend\";\nimport Arrow from \"../svg/Arrow\";\nimport \"../d3.css\";\n\nclass NeuralNetworkComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\tflatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\tisEmpty(array) {\n\t\treturn array.length === 0;\n\t}\n\tisUndefined(val) {\n\t\treturn typeof val === \"undefined\";\n\t}\n\tisUndefined3d(array3d, i, j, k) {\n\t\treturn (\n\t\t\tthis.isUndefined(array3d[i]) ||\n\t\t\tthis.isUndefined(array3d[i][j]) ||\n\t\t\tthis.isUndefined(array3d[i][j][k])\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tplaying,\n\t\t\tmode,\n\t\t\tshapedLinks,\n\t\t\tshapedWeights,\n\t\t\tshapedRects,\n\t\t\tminiNN,\n\t\t} = this.props;\n\t\tconst link = d3\n\t\t\t.linkHorizontal()\n\t\t\t.x((d) => d.x)\n\t\t\t.y((d) => d.y);\n\t\tconst negWeight = \"#D62839\";\n\t\tconst posWeight = \"#4BA3C3\";\n\t\tconst graphConnectionColor = \"black\";\n\t\tconst squareWidth = 32;\n\n\t\tconst VerticalArrow = (xStart, yStart, length, dirIsUp, color) => {\n\t\t\tconst vector = dirIsUp ? -length : length;\n\t\t\treturn (\n\t\t\t\t<Arrow\n\t\t\t\t\tsource={{ x: xStart, y: yStart }}\n\t\t\t\t\ttarget={{ x: xStart, y: yStart + vector }}\n\t\t\t\t\tcolor={color}\n\t\t\t\t/>\n\t\t\t);\n\t\t};\n\n\t\tconst nn = (\n\t\t\t<svg id=\"p\" width=\"810\" height=\"500\" overflow=\"visible\">\n\t\t\t\t<g>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M 750, 234 L 750, 300\"\n\t\t\t\t\t\tstroke={graphConnectionColor}\n\t\t\t\t\t\tclassName={playing}\n\t\t\t\t\t></path>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={link({\n\t\t\t\t\t\t\tsource: { x: 766, y: 315 },\n\t\t\t\t\t\t\ttarget: { x: 890, y: 430 },\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tstroke={graphConnectionColor}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tclassName={playing}\n\t\t\t\t\t></path>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={link({\n\t\t\t\t\t\t\tsource: { x: 766, y: 250 },\n\t\t\t\t\t\t\ttarget: { x: 890, y: 150 },\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tstroke={graphConnectionColor}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tclassName={playing}\n\t\t\t\t\t></path>\n\t\t\t\t\t{shapedLinks.map((layer, i) =>\n\t\t\t\t\t\tlayer.map((neuron, j) =>\n\t\t\t\t\t\t\tneuron.map((d, k) => {\n\t\t\t\t\t\t\t\tconst isUndefined = this.isUndefined3d(\n\t\t\t\t\t\t\t\t\tshapedWeights,\n\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\t\tk\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst currentWeight = isUndefined\n\t\t\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t\t\t: shapedWeights[i][j][k];\n\t\t\t\t\t\t\t\tconst sw = isUndefined\n\t\t\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t\t\t: 2 * Math.abs(currentWeight) + 0.1;\n\t\t\t\t\t\t\t\tconst s = isUndefined\n\t\t\t\t\t\t\t\t\t? \"lightgrey\"\n\t\t\t\t\t\t\t\t\t: currentWeight > 0\n\t\t\t\t\t\t\t\t\t? posWeight\n\t\t\t\t\t\t\t\t\t: negWeight;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={k}\n\t\t\t\t\t\t\t\t\t\td={d}\n\t\t\t\t\t\t\t\t\t\tclassName={playing}\n\t\t\t\t\t\t\t\t\t\tstrokeWidth={sw}\n\t\t\t\t\t\t\t\t\t\tstroke={s}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t></path>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={34}\n\t\t\t\t\t\ty={234}\n\t\t\t\t\t\twidth={squareWidth}\n\t\t\t\t\t\theight={squareWidth}\n\t\t\t\t\t\tfill=\"darkgrey\"\n\t\t\t\t\t></rect>\n\n\t\t\t\t\t{shapedRects.map((neuron, i) =>\n\t\t\t\t\t\tneuron.map((d, j) => {\n\t\t\t\t\t\t\tconst curr =\n\t\t\t\t\t\t\t\tminiNN !== null ? miniNN.model[i][j] : null;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<g>\n\t\t\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\t\t\t\t\twidth={squareWidth}\n\t\t\t\t\t\t\t\t\t\theight={squareWidth}\n\t\t\t\t\t\t\t\t\t\tfill=\"darkgrey\"\n\t\t\t\t\t\t\t\t\t></rect>\n\n\t\t\t\t\t\t\t\t\t{miniNN !== null && mode\n\t\t\t\t\t\t\t\t\t\t? VerticalArrow(\n\t\t\t\t\t\t\t\t\t\t\t\td.x + 16,\n\t\t\t\t\t\t\t\t\t\t\t\td.y + 16,\n\t\t\t\t\t\t\t\t\t\t\t\tMath.abs(curr.dActStep),\n\t\t\t\t\t\t\t\t\t\t\t\tcurr.dActStep < 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\"grey\"\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t)}\n\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={734}\n\t\t\t\t\t\ty={300}\n\t\t\t\t\t\twidth={squareWidth}\n\t\t\t\t\t\theight={squareWidth}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"black\"\n\t\t\t\t\t></rect>\n\t\t\t\t\t<text\n\t\t\t\t\t\tfontFamily=\"sans-serif\"\n\t\t\t\t\t\tfontSize=\"12px\"\n\t\t\t\t\t\tx={739}\n\t\t\t\t\t\ty={318}\n\t\t\t\t\t>\n\t\t\t\t\t\tloss\n\t\t\t\t\t</text>\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t);\n\t\treturn (\n\t\t\t<div id=\"nn\">\n\t\t\t\t{nn}\n\t\t\t\t<Legend />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NeuralNetworkComponent;\n","import React, { Component } from \"react\";\nimport \"../d3.css\";\nimport * as d3 from \"d3\";\n\nclass ScatterPlot extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tplotPoints(node, formattedPoints) {\n\t\t/* Now need to plot said data */\n\t\tnode.selectAll(\"circle\")\n\t\t\t.data(formattedPoints)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", (d) => d.x)\n\t\t\t.attr(\"cy\", (d) => d.y)\n\t\t\t.attr(\"r\", 2)\n\t\t\t.style(\"fill\", \"grey\");\n\t}\n\t/* This is where we initialize the Scatter Plot */\n\tasync componentDidMount() {\n\t\tconst { width, height, padding, start, stop } = this.props;\n\t\tconst container = d3.select(\"#nice\");\n\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis);\n\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", (height + 1) / 2)\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", (height + 1) / 2)\n\t\t\t.attr(\"class\", \"split\");\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", (width + 1) / 2)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", (width + 1) / 2)\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"class\", \"split\");\n\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"epic\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { width, height, padding, start, stop, X, y, yhat } = this.props;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#nice\").select(\"svg\");\n\t\tlet dataSet = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\tdataSet.push({\n\t\t\t\tx: xScale(X[i]),\n\t\t\t\ty: yScale(y[i]),\n\t\t\t});\n\t\t}\n\t\tlet a = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\ta.push([xScale(X[i]), yScale(yhat[i])]);\n\t\t}\n\t\tsvg.selectAll(\"circle\").remove();\n\t\tthis.plotPoints(svg, dataSet);\n\n\t\tsvg.select(\"#epic\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\t//componentDidUpdate() {\n\t//const { width, height, padding, start, stop, X, y } = this.props;\n\t//console.log(X);\n\t//console.log(y);\n\t//let xScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([0, width - 2 * padding]);\n\n\t//let yScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([height - 2 * padding, 0]);\n\t//const svg = d3.select(\"#nice\").select(\"svg\");\n\t//let dataSet = [];\n\t//for (let i = 0; i < X.length; i++) {\n\t//dataSet.push({\n\t//x: xScale(X[i]),\n\t//y: yScale(y[i]),\n\t//});\n\t//}\n\t///* Now need to plot said data */\n\t//svg.selectAll(\"circle\")\n\t//.data(dataSet)\n\t//.enter()\n\t//.append(\"circle\")\n\t//.attr(\"cx\", (d) => d.x)\n\t//.attr(\"cy\", (d) => d.y)\n\t//.attr(\"r\", 2)\n\t//.style(\"fill\", \"#F50257\");\n\t//}\n\trender() {\n\t\treturn <div id=\"nice\"></div>;\n\t}\n}\n\nexport default ScatterPlot;\n","import React, { Component } from \"react\";\nimport \"../d3.css\";\nimport * as d3 from \"d3\";\n\nclass Loss extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\tcomponentDidMount() {\n\t\tconst container = d3.select(\"#sweet\");\n\t\tconst height = 100;\n\t\tconst width = 300;\n\t\tconst padding = 0;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([0, -1])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([1, 1])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"id\", \"x\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"id\", \"y\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis.ticks(0));\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"line\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t\t//svg.append(\"text\").attr(\"x\", 1).attr(\"y\", -5).text(\"loss:\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { lossArray, loss } = this.props;\n\t\tconst height = 100;\n\t\tconst width = 300;\n\t\tconst start = 0;\n\t\tconst stop = lossArray.length - 1;\n\t\tconst padding = 0;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([1, width - 2 * padding]);\n\n\t\tlet lossMin = d3.min(lossArray);\n\t\tlet lossMax = d3.max(lossArray);\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([lossMin, lossMax])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#sweet\").select(\"svg\");\n\t\tlet a = [];\n\t\tfor (let i = 0; i < lossArray.length; i++) {\n\t\t\ta.push([xScale(i), yScale(lossArray[i])]);\n\t\t}\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.select(\"#x\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis.ticks(5));\n\n\t\tsvg.select(\"#y\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis.ticks(5));\n\t\tsvg.select(\"#line\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\trender() {\n\t\treturn <div id=\"sweet\"></div>;\n\t}\n}\n\nexport default Loss;\n","import React, { Component } from \"react\";\nimport { Typography, Slider, Box, Card, CardContent } from \"@material-ui/core\";\n\nclass LinearFunction extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinput: 0,\n\t\t\toutput: 0,\n\t\t};\n\t\tthis.compute = this.compute.bind(this);\n\t}\n\tcompute(input) {\n\t\tconst linfunc = (x) => 2 * x + 1;\n\t\tconst output = linfunc(input);\n\t\tthis.setState({ input, output });\n\t}\n\tcomponentDidMount() {\n\t\tthis.compute(34);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Box display=\"flex\">\n\t\t\t\t<Box minWidth={300}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tvalue={this.state.input}\n\t\t\t\t\t\t\t\tonChange={(e, n) => {\n\t\t\t\t\t\t\t\t\tthis.compute(n);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t></Slider>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tf(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\">\n\t\t\t\t\t\t\t\t\t{this.state.input}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = 2(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\">\n\t\t\t\t\t\t\t\t\t{this.state.input}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + 1 ={\" \"}\n\t\t\t\t\t\t\t\t<Typography style={{ color: \"#8db600\" }}>\n\t\t\t\t\t\t\t\t\t{this.state.output}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nexport default LinearFunction;\n","import React, { Component } from \"react\";\nimport {\n\tTypography,\n\tSlider,\n\tBox,\n\tCard,\n\tCardContent,\n\tCardActions,\n\tButton,\n} from \"@material-ui/core\";\n\nclass NestedFunction extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinput: 0,\n\t\t\toutput1: 0,\n\t\t\toutput2: 0,\n\t\t\toutput3: 0,\n\t\t\tweights: [],\n\t\t\tbiases: [],\n\t\t};\n\t\tthis.compute = this.compute.bind(this);\n\t\tthis.initParams = this.initParams.bind(this);\n\t}\n\tcompute(input) {\n\t\tconst { weights, biases } = this.state;\n\t\tconst linfunc = (x, w, b) => w * x + b;\n\t\tconst relu = (x) => Math.max(0, x);\n\n\t\tconst output1 = linfunc(input, weights[0], biases[0]).toFixed(3);\n\t\tconst output2 = linfunc(output1, weights[1], biases[1]).toFixed(3);\n\t\tconst output3 = linfunc(output2, weights[2], biases[2]).toFixed(3);\n\t\tthis.setState({ input, output1, output2, output3 });\n\t}\n\tgenRandomArray(length) {\n\t\tlet arr = new Array(length);\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tarr[i] = +Math.random().toFixed(2);\n\t\t}\n\t\treturn arr;\n\t}\n\tasync initParams() {\n\t\tconst weights = this.genRandomArray(3);\n\t\tconst biases = this.genRandomArray(3);\n\t\tthis.setState({ weights, biases });\n\t}\n\tasync componentDidMount() {\n\t\tawait this.initParams();\n\t\tthis.compute(34);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tinput,\n\t\t\toutput1,\n\t\t\toutput2,\n\t\t\toutput3,\n\t\t\tweights,\n\t\t\tbiases,\n\t\t} = this.state;\n\t\tconst fixedInput = input.toFixed(3);\n\t\tconst outputArr = [\n\t\t\t{ output: output1, color: \"#8db600\" },\n\t\t\t{ output: output2, color: \"#FF8F00\" },\n\t\t\t{ output: output3, color: \"blue\" },\n\t\t];\n\t\treturn (\n\t\t\t<Box display=\"flex\">\n\t\t\t\t<Box width={580}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tvalue={this.state.input}\n\t\t\t\t\t\t\t\tonChange={(e, n) => {\n\t\t\t\t\t\t\t\t\tthis.compute(n);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t></Slider>\n\n\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t<Box justifyContent=\"center\">\n\t\t\t\t\t\t\t\t\t<svg width={500} height={64}>\n\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\td={`M${36} 16, ${100} 16`}\n\t\t\t\t\t\t\t\t\t\t\tstroke={\"#f50557\"}\n\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"25, 4\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={3 * weights[0] + 0.2}\n\t\t\t\t\t\t\t\t\t\t></path>\n\t\t\t\t\t\t\t\t\t\t<text x={40} y={40} fill={\"#f50557\"}>\n\t\t\t\t\t\t\t\t\t\t\t{fixedInput}\n\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t{outputArr.map((d, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<g>\n\t\t\t\t\t\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\t\t\t\t\t\tx={100 + 100 * i}\n\t\t\t\t\t\t\t\t\t\t\t\t\ty={0}\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth={32}\n\t\t\t\t\t\t\t\t\t\t\t\t\theight={32}\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"lightgrey\"\n\t\t\t\t\t\t\t\t\t\t\t\t></rect>\n\t\t\t\t\t\t\t\t\t\t\t\t<text x={111 + 100 * i} y={22}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{i + 1}\n\t\t\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\t\t\td={`M${132 + 100 * i} 16, ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t200 + 100 * i\n\t\t\t\t\t\t\t\t\t\t\t\t\t} 16`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstroke={d.color}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"25, 4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ti < 2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? 3 *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweights[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti + 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  0.2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t></path>\n\t\t\t\t\t\t\t\t\t\t\t\t<text\n\t\t\t\t\t\t\t\t\t\t\t\t\tx={140 + 100 * i}\n\t\t\t\t\t\t\t\t\t\t\t\t\ty={40}\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill={d.color}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{d.output}\n\t\t\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tneuron1(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\" variant=\"inline\">\n\t\t\t\t\t\t\t\t\t{fixedInput}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = {weights[0]}(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\" variant=\"inline\">\n\t\t\t\t\t\t\t\t\t{fixedInput}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + {biases[0]} ={\" \"}\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#8db600\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output1}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tneuron2(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#8db600\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output1}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = {weights[1]}(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#8db600\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output1}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + {biases[1]} ={\" \"}\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#FF8F00\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output2}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tneuron3(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#FF8F00\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output2}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = {weights[2]}(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#FF8F00\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output2}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + {biases[2]}={\" \"}\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"blue\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output3}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tawait this.initParams();\n\t\t\t\t\t\t\t\t\t//this.compute(this.state.input);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tnew Weights and biases\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nexport default NestedFunction;\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nconst Bar = ({ title }) => (\n\t<AppBar\n\t\tposition=\"fixed\"\n\t\tvariant=\"outlined\"\n\t\tstyle={{\n\t\t\tbackground: \"#175676\",\n\t\t\tcolor: \"white\",\n\t\t}}\n\t>\n\t\t<Toolbar>\n\t\t\t<Typography variant=\"h6\">{title}</Typography>\n\t\t</Toolbar>\n\t</AppBar>\n);\n\nexport default Bar;\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tThis is the class definiton and implmentation of Neuron for Nerual Network\n*/\nexport class Neuron {\n\tconstructor(weights, bias) {\n\t\tthis.weights = weights;\n\t\tthis.bias = bias;\n\t}\n\t/* Next functions are just helper functions for the operations */\n\tmult(array1, array2) {\n\t\treturn array1.map((item, i) => {\n\t\t\treturn item * array2[i];\n\t\t});\n\t}\n\tdMult(dvalues, oppositeParameter) {\n\t\treturn this.mult(dvalues, oppositeParameter);\n\t}\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tdSum(dvalue, numInputs) {\n\t\tlet dSumArray = [];\n\t\tfor (let i = 0; i < numInputs; i++) {\n\t\t\tdSumArray.push(dvalue);\n\t\t}\n\t\treturn dSumArray;\n\t}\n\tlinear(input) {\n\t\treturn input;\n\t}\n\n\t/* \n\t\tPurpose: feed forward of single neuron\n\t\t@param: inputs, activation\n\t\t@store inputs, multStep, sumStep, actStep, output\n\t*/\n\tforward(inputs, activation) {\n\t\t/* Destructure the class values */\n\t\tconst { weights, bias } = this;\n\t\tconst { mult, sum } = this;\n\t\t/* propogate forward */\n\t\tconst multStep = mult(inputs, weights);\n\t\tconst sumStep = sum(multStep) + bias;\n\t\tconst actStep = activation(sumStep);\n\n\t\t/* Save values */\n\t\tthis.inputs = inputs;\n\t\tthis.multStep = multStep;\n\t\tthis.sumStep = sumStep;\n\t\tthis.actStep = actStep;\n\t\tthis.output = actStep;\n\t}\n\n\t/* \n\t\tPurpose: feed backward of single neuron\n\t\t@param: dvalue, activation\n\t\t@store inputs, multStep, sumStep, actStep, output\n\t*/\n\tbackward(dvalue, activation) {\n\t\t/* Destructure the class values */\n\t\tconst { inputs, weights, actStep } = this;\n\t\tconst { dSum, mult, sum } = this;\n\t\t/* propgate backwards */\n\t\tconst dActStep = activation(actStep) * dvalue;\n\t\tconst dSumStep = dSum(dActStep, inputs.length);\n\t\tconst dBias = dActStep;\n\t\tconst dWeights = mult(dSumStep, inputs);\n\t\tconst dInputs = mult(dSumStep, weights);\n\t\tconst dInputsSum = sum(dInputs);\n\n\t\t/* Save values */\n\t\tthis.dvalue = dvalue;\n\t\tthis.dActStep = dActStep;\n\t\tthis.dSumStep = dSumStep;\n\t\tthis.dBias = dBias;\n\t\tthis.dWeights = dWeights;\n\t\tthis.dInputs = dInputs;\n\t\tthis.dInputsSum = dInputsSum;\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\texports the losses to be used for the neural network\n\t\t\n*/\nexport class MeanSquaredErrorLoss {\n\t/* \n\t\tPurpose: feed forward of the nerual network\n\t\t@param yhat, y\n\t\t@stores y, yhat, subStep, squareStep, output\n\t*/\n\tforward(yhat, y) {\n\t\tconst subStep = yhat - y;\n\t\tconst squareStep = (this.output = Math.pow(yhat - y, 2));\n\n\t\tthis.subStep = subStep;\n\t\tthis.squareStep = squareStep;\n\t\tthis.output = squareStep;\n\t}\n\t/* \n\t\tPurpose: feed backward of the nerual network\n\t\t@stores dInputs\n\t*/\n\tbackward() {\n\t\tthis.dInputs = 2 * this.subStep;\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tThis creates the definiton and implemntation of the neural network in a non vectorized more manual way \n\t\tdesigned to show all the operations\n\tTODO: add the update that would update to the weights sgd style and compute forward once more to see difference\n*/\nimport { Neuron } from \"./Neuron\";\nimport { MeanSquaredErrorLoss } from \"./Loss\";\nexport class NeuralNetwork {\n\t/* here we construct the Neuron model */\n\tconstructor(shape, weights, biases) {\n\t\tthis.model = [];\n\t\tthis.loss = new MeanSquaredErrorLoss();\n\t\tthis.shape = shape;\n\n\t\t/* HERE WE CONSTRUCT THE MODEL ON CLASS CREATION */\n\t\tfor (let layer = 0; layer < weights.length; layer++) {\n\t\t\tlet dense = [];\n\t\t\tfor (let neuron = 0; neuron < weights[layer].length; neuron++) {\n\t\t\t\tdense.push(\n\t\t\t\t\tnew Neuron(weights[layer][neuron], biases[layer][neuron])\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.model.push(dense);\n\t\t}\n\t}\n\t/* Next are some helper functions */\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tadd(array1, array2) {\n\t\tconst array1Length = array1.length;\n\t\tconst array2Length = array2.length;\n\t\tif (array2Length != array1Length) {\n\t\t\tconsole.error(\n\t\t\t\t`${array1Length} does not match ${array2Length}, so returned empty array`\n\t\t\t);\n\t\t\treturn [];\n\t\t} else {\n\t\t\tlet result = new Array(array1Length);\n\t\t\tfor (let i = 0; i < array1.length; i++) {\n\t\t\t\tresult[i] = array1[i] + array2[i];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\tzeros(length) {\n\t\tlet result = new Array(length);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n\tdReLU(input) {\n\t\treturn input > 0 ? 1 : 0;\n\t}\n\tdLinear(input) {\n\t\treturn 1;\n\t}\n\n\tReLU(input) {\n\t\treturn Math.max(0, input);\n\t}\n\n\tlinear(input) {\n\t\treturn input;\n\t}\n\n\t/* \n\t\tPurpose: to feed forward the entire layer\n\t\t@param input, label\n\t\t@store model, yhat, loss\n\t*/\n\tforward(input, label) {\n\t\tlet inputs = [input];\n\t\tconst lastLayer = this.model.length;\n\t\tconst outputNeuron = 0;\n\t\t/* First iterate through each layer */\n\t\tfor (let layer = 0; layer < lastLayer - 1; layer++) {\n\t\t\t/* Then iterate through each neuron in the layer */\n\t\t\tlet outputs = [];\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\t/* Then feed forward each individual neuron and push to output array */\n\t\t\t\tthis.model[layer][neuron].forward(inputs, this.ReLU);\n\t\t\t\toutputs.push(this.model[layer][neuron].output);\n\t\t\t}\n\n\t\t\t/* Then outputs will be the inputs for the next layer */\n\t\t\tinputs = outputs;\n\t\t}\n\t\tthis.model[lastLayer - 1][0].forward(inputs, this.linear);\n\t\tthis.yhat = this.model[lastLayer - 1][outputNeuron].output;\n\t\tthis.loss.forward(this.yhat, label);\n\t}\n\t/* \n\t\tPurpose: to feed backward the entire model per layer\n\t*/\n\tbackward() {\n\t\tconst { sum, add, zeros } = this;\n\t\tthis.loss.backward();\n\t\tlet dValues = [this.loss.dInputs];\n\t\tconst lastLayer = this.model.length;\n\t\t/* take care of output neuron */\n\t\tconst outputNeuron = 0;\n\t\tthis.model[lastLayer - 1][outputNeuron].backward(\n\t\t\tdValues[outputNeuron],\n\t\t\tthis.dLinear\n\t\t);\n\t\tdValues = this.model[lastLayer - 1][outputNeuron].dInputs;\n\t\t//dValues = [this.model[lastLayer - 1][0].dInputsSum];\n\t\t/* Iterate backwards */\n\t\t//for (let layer = lastLayer - 2; layer >= 0; layer--) {\n\t\t///* First sum the dvalues */\n\t\t//dValue = sum(dValues);\n\t\t//dValues = [];\n\t\t////dValues = zeros(this.model[layer].length);\n\t\t//for (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t//this.model[layer][neuron].backward(dValue, this.dReLU);\n\t\t////this.model[layer][neuron].backward(dValues[], this.dReLU);\n\t\t//dValues.push(this.model[layer][neuron].dInputsSum);\n\t\t////dValues = add(dValues, this.model[layer][neuron].dInputs)\n\t\t//}\n\t\t//}\n\n\t\t/* We are given the dInputs from the previous output neuron in the form [neurons] called dValues */\n\n\t\t/* We want to start the second to last layer */\n\t\tfor (let layer = lastLayer - 2; layer >= 0; layer--) {\n\t\t\tlet dInputs = zeros(this.model[layer][0].inputs.length);\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\tthis.model[layer][neuron].backward(dValues[neuron], this.dReLU);\n\t\t\t\tdInputs = add(dInputs, this.model[layer][neuron].dInputs);\n\t\t\t}\n\t\t\tdValues = dInputs; //we transfer the dInputs into dValues for the next layer back\n\t\t}\n\t}\n\t/* \n\t\tPurpose: to update all the weights using gradient descent\n\t\t@param lr: learning rate\n\t*/\n\tupdate(lr) {\n\t\t/* First create the gradient descent */\n\t\tconst gd = (weight, lr, dweight) => weight - lr * dweight;\n\t\t/* Iterate over the model */\n\t\tfor (let layer = 0; layer < this.model.length; layer++) {\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\ti < this.model[layer][neuron].dWeights.length;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tconst newWeights = gd(\n\t\t\t\t\t\tthis.model[layer][neuron].weights[i],\n\t\t\t\t\t\tlr,\n\t\t\t\t\t\tthis.model[layer][neuron].dWeights[i]\n\t\t\t\t\t);\n\t\t\t\t\tconst newBias = gd(\n\t\t\t\t\t\tthis.model[layer][neuron].bias,\n\t\t\t\t\t\tlr,\n\t\t\t\t\t\tthis.model[layer][neuron].dBias\n\t\t\t\t\t);\n\n\t\t\t\t\t/* Formally update the model weights */\n\t\t\t\t\tthis.model[layer][neuron].weights[i] = newWeights;\n\t\t\t\t\tthis.model[layer][neuron].bias[i] = newBias;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthrottleForward(neuron, layer, change, label) {\n\t\t/* First Change the value of the output of this neuron */\n\t\tconst calcChange = this.model[layer][neuron].output + change;\n\t\tthis.model[layer][neuron].output = calcChange;\n\n\t\t/* First construct the inputs for the next layer which is made out of the new outputs */\n\t\tlet inputs = [];\n\t\tfor (let n = 0; n < this.model[layer].length; n++) {\n\t\t\tinputs.push(this.model[layer][n].output);\n\t\t}\n\n\t\tconst lastLayer = this.model.length;\n\t\tfor (let l = layer + 1; l < lastLayer - 1; l++) {\n\t\t\t/* Then iterate through each neuron in the layer */\n\t\t\tlet outputs = [];\n\t\t\tfor (let n = 0; n < this.model[l].length; n++) {\n\t\t\t\t/* Then feed forward each individual neuron and push to output array */\n\t\t\t\tthis.model[l][n].forward(inputs, this.ReLU);\n\t\t\t\toutputs.push(this.model[l][n].output);\n\t\t\t}\n\n\t\t\t/* Then outputs will be the inputs for the next layer */\n\t\t\tinputs = outputs;\n\t\t}\n\t\tthis.model[lastLayer - 1][0].forward(inputs, this.linear);\n\t\tthis.yhat = this.model[lastLayer - 1][0].output;\n\t\tthis.loss.forward(this.yhat, label);\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tExports some tools that make it easier to deal with the data\n*/\n\n/* \n\tPurpose: format the weight array given from tensorflow\n\t@param uweights (unformatted weights), shape\n\t@return layer (formated weights per layer)\n*/\nexport function formatWeightArray(uweights, shape) {\n\tlet layer = [];\n\t/* Increment over each layer l */\n\tfor (let l = 0; l < uweights.length; l++) {\n\t\t/* First num in shape is input neuron which is why we skip here by adding 1 */\n\t\tlet increment = shape[l + 1];\n\t\tlet weightSet = [];\n\t\t/* Increment over each neuron */\n\t\tfor (let t = 0; t < increment; t++) {\n\t\t\tlet weights = [];\n\t\t\t/* Increment over each weight per neuron */\n\t\t\tfor (let w = t; w < uweights[l].length; w += increment) {\n\t\t\t\tweights.push(uweights[l][w]);\n\t\t\t}\n\t\t\tweightSet.push(weights);\n\t\t}\n\t\tlayer.push(weightSet);\n\t}\n\treturn layer;\n}\n\n/* \n\tPurpose: to turn a 2d array into the same array but fixed to a certian number of numbers/figures\n\t@param arr  (not fixed array), fixed\n\t@return arr (fixed array)\n*/\nexport function toFunc2DArray(arr, fixed) {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let e = 0; e < arr[i].length; e++) {\n\t\t\tarr[i][e] = +arr[i][e].toFixed(fixed);\n\t\t}\n\t}\n\treturn arr;\n}\n\n/* \n\tPurpose: Flattens the array\n\t@param array\n\t@return flattenedArray\n*/\nexport function flatten(array) {\n\tlet flattendArray = [];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\tflattendArray.push(array[i][e]);\n\t\t}\n\t}\n\treturn flattendArray;\n}\n\n/* \n\tPurpose: generate random integer from 0 to given paramter\n\t@param max\n\t@return Number [0,max)\n*/\nexport function getRandomInt(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\n/* \n\tPurpose: turn tensor to array\n\t@param tensor \n\t@return array\n*/\nexport function tensorToArray(tensor) {\n\treturn Array.from(tensor.dataSync());\n}\n","import * as d3 from \"d3\";\n\nexport function generateLinearScale(x, y) {\n\tconst xScale = d3.scaleLinear().domain(x.domain).range(x.range);\n\tconst yScale = d3.scaleLinear().domain(y.domain).range(y.range);\n\treturn { xScale, yScale };\n}\n\nexport function generateLink(adjustment) {\n\treturn d3\n\t\t.linkHorizontal()\n\t\t.x((d) => d.x + adjustment)\n\t\t.y((d) => d.y + adjustment);\n}\n\nexport function generateNeuronPlacement(\n\tshape,\n\tlayerProportion,\n\tsquareWidth,\n\tstartNeuron,\n\tstopNeuron,\n\txScale,\n\tyScale\n) {\n\tlet shapedNeurons = [];\n\tlet flattenedNeurons = [];\n\tshapedNeurons.push([startNeuron]);\n\tflattenedNeurons.push(startNeuron);\n\n\tfor (let layer = 1; layer < shape.length - 1; layer++) {\n\t\tlet dense = [];\n\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\tconst coordinate = {\n\t\t\t\tx: xScale(layerProportion[layer]) - squareWidth / 2,\n\t\t\t\ty: yScale(92 - neuron * 12) - squareWidth / 2,\n\t\t\t};\n\t\t\t// push to arrays\n\t\t\tdense.push(coordinate);\n\t\t\tflattenedNeurons.push(coordinate);\n\t\t}\n\t\tshapedNeurons.push(dense);\n\t}\n\n\tflattenedNeurons.push(stopNeuron);\n\tshapedNeurons.push([stopNeuron]);\n\n\treturn { flattenedNeurons, shapedNeurons };\n}\n\nexport function generateLinksPlacement(shape, shapedNeurons, linksGenerator) {\n\t/* We start to iterate over ns */\n\tlet perLink = [];\n\tlet layerLinks = [];\n\tlet neuronLinks = [];\n\tfor (let layer = 1; layer < shape.length; layer++) {\n\t\tneuronLinks = [];\n\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\tperLink = [];\n\t\t\tfor (\n\t\t\t\tlet nextNeuron = 0;\n\t\t\t\tnextNeuron < shape[layer - 1];\n\t\t\t\tnextNeuron++\n\t\t\t) {\n\t\t\t\tperLink.push(\n\t\t\t\t\tlinksGenerator({\n\t\t\t\t\t\tsource: shapedNeurons[layer - 1][nextNeuron],\n\t\t\t\t\t\ttarget: shapedNeurons[layer][neuron],\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tneuronLinks.push(perLink);\n\t\t}\n\t\tlayerLinks.push(neuronLinks);\n\t}\n\n\treturn layerLinks;\n}\n","/* \n  @author: Donny Bertucci: xnought\n  Summary: \n\tMainTool.js is the main controller of all logic of the backprop explainer\n*/\n\n/*  START IMPORTS  */\nimport React, { Component } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { NeuralNetworkComponent, ScatterPlot, Loss } from \"../../exports\";\nimport {\n\tTypography,\n\tBox,\n\tCard,\n\tCardContent,\n\tIconButton,\n\tCardActions,\n\tChip,\n\tButton,\n\tFab,\n\tSlider,\n\tTooltip,\n} from \"@material-ui/core\";\nimport { Replay, SlowMotionVideo, PlayArrow, Stop } from \"@material-ui/icons\";\nimport { NeuralNetwork, tools } from \"../../../nnMiniLibrary/exports\";\nimport { draw } from \"../../../Utils/exports\";\n/*  END IMPORTS  */\n\nclass MainTool extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* \n\t\t\tApp js state will be the main controller of logic to components\n\t\t\tNote to self: Keep state as shallow as possible to avoid complexity with this.setState()\n\t\t*/\n\t\tthis.state = {\n\t\t\t/* State for NN */\n\t\t\ttensorFlowNN: null,\n\t\t\tminiNN: null,\n\t\t\tX: [],\n\t\t\ty: [],\n\t\t\tyhat: [],\n\t\t\tshape: [1, 4, 4, 1],\n\t\t\tlr: 0.01,\n\t\t\tepoch: 0,\n\t\t\tbiasesData: [],\n\t\t\tweightsData: [],\n\t\t\tlossArray: [],\n\t\t\tloss: null,\n\t\t\tscale: 5,\n\t\t\trects: [],\n\n\t\t\tweights: [],\n\t\t\tshapedWeights: [],\n\t\t\tshapedRects: [],\n\n\t\t\tshapedLinks: [],\n\n\t\t\tdirection: \"edgePaused\",\n\t\t\tcurve: \"sin\",\n\n\t\t\t/* State for Components */\n\t\t\tcontrols: {\n\t\t\t\tplaying: false,\n\t\t\t\tspeed: 0,\n\t\t\t},\n\t\t\tsliderVal: 2,\n\t\t\tmode: false,\n\t\t\tstopRender: false,\n\t\t};\n\n\t\tthis.initNeuralNetwork = this.initNeuralNetwork.bind(this);\n\t\tthis.run = this.run.bind(this);\n\t\tthis.genTensorData = this.genTensorData.bind(this);\n\t\tthis.mutate = this.mutate.bind(this);\n\t\tthis.train = this.train.bind(this);\n\t\tthis.printParameters = this.printParameters.bind(this);\n\t\tthis.reset = this.reset.bind(this);\n\t\tthis.resetParameters = this.resetParameters.bind(this);\n\t\tthis.asyncPause = this.asyncPause.bind(this);\n\t\tthis.changeModelLr = this.changeModelLr.bind(this);\n\t\tthis.anim = this.anim.bind(this);\n\t}\n\n\tasync anim() {}\n\n\tinitNeuralNetwork(shape) {\n\t\tconst { controls } = this.state;\n\t\tconst { playing } = controls;\n\n\t\t// If we are not training the tensorflow neural network\n\t\tif (!playing) {\n\t\t\t/* START SETUP */\n\t\t\tconst squareWidth = 32;\n\t\t\tconst xConstraints = { domain: [0, 100], range: [50, 750] };\n\t\t\tconst yConstraints = { domain: [0, 100], range: [500, 0] };\n\t\t\t//prettier-ignore\n\t\t\tconst {xScale, yScale} = draw.generateLinearScale(xConstraints,yConstraints);\n\t\t\t// Create the starting point and the stopping point for the neural network\n\t\t\tconst start = { x: 50 - squareWidth / 2, y: 250 - squareWidth / 2 };\n\t\t\tconst stop = { x: 750 - squareWidth / 2, y: 250 - squareWidth / 2 };\n\t\t\t// generate function to create paths from (x,y) to (x,y)\n\t\t\tconst linksGenerator = draw.generateLink(squareWidth / 2);\n\t\t\t// how the layers are proptioned compared to the linear scale\n\t\t\tconst layerProportion = [0, 25, 50, 75, 0];\n\t\t\t/* END SETUP */\n\n\t\t\t/* START GENERATING THE GRAPH */\n\t\t\tconst {\n\t\t\t\tflattenedNeurons,\n\t\t\t\tshapedNeurons,\n\t\t\t} = draw.generateNeuronPlacement(\n\t\t\t\tshape,\n\t\t\t\tlayerProportion,\n\t\t\t\tsquareWidth,\n\t\t\t\tstart,\n\t\t\t\tstop,\n\t\t\t\txScale,\n\t\t\t\tyScale\n\t\t\t);\n\t\t\tconst layerLinks = draw.generateLinksPlacement(\n\t\t\t\tshape,\n\t\t\t\tshapedNeurons,\n\t\t\t\tlinksGenerator\n\t\t\t);\n\t\t\t/* END GENERATING THE GRAPH */\n\n\t\t\tshapedNeurons.splice(0, 1); //in order for it to be lined up with the nn model\n\t\t\t//update the state of the links and rectangles to be rendered\n\t\t\tthis.setState({\n\t\t\t\tshapedLinks: layerLinks,\n\t\t\t\trects: flattenedNeurons,\n\t\t\t\tshapedRects: shapedNeurons,\n\t\t\t});\n\t\t} else if (playing) {\n\t\t\tconst { weightsData, shape } = this.state;\n\t\t\tconst flattenedWeights = tools.flatten(weightsData);\n\t\t\t//update the weights to be rendered\n\t\t\tconst shapedWeights = tools.formatWeightArray(weightsData, shape);\n\n\t\t\tthis.setState({ weights: flattenedWeights, shapedWeights });\n\t\t}\n\t}\n\n\tchangeModelLr(lrChange) {\n\t\ttf.tidy(() => {\n\t\t\tthis.setState({ lr: lrChange });\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tasync run() {\n\t\tconst playing = !this.state.controls.playing;\n\t\tthis.mutate(\"controls\", \"playing\", playing);\n\t\tif (playing === true) {\n\t\t\tawait this.train(this.state.X, this.state.y);\n\t\t}\n\t}\n\n\tmutate(key, subkey, value) {\n\t\t/* copy of the state */\n\t\ttf.tidy(() => {\n\t\t\tlet state = { ...this.state };\n\t\t\t/* If this.state.key.subkey exists */\n\t\t\tif (key in state && subkey in state[key]) {\n\t\t\t\t/* Mutate the state */\n\t\t\t\tstate[key][subkey] = value;\n\t\t\t\tthis.setState({ state });\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Could not be found in state\");\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\taddModel(model) {\n\t\treturn tf.tidy(() => {\n\t\t\tlet shape = this.state.shape;\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tinputShape: [1],\n\t\t\t\t\tunits: shape[1],\n\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\tfor (let layer = 2; layer < shape.length - 1; layer++) {\n\t\t\t\tmodel.add(\n\t\t\t\t\ttf.layers.dense({\n\t\t\t\t\t\tunits: shape[layer],\n\t\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\t\tuseBias: true,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tunits: 1,\n\t\t\t\t\tactivation: \"linear\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn model;\n\t\t});\n\t}\n\tmodelCompile(lr) {\n\t\tlet model = tf.sequential();\n\t\tthis.addModel(model);\n\t\tmodel.compile({\n\t\t\toptimizer: tf.train.sgd(lr),\n\t\t\tloss: \"meanSquaredError\",\n\t\t});\n\t\treturn model;\n\t}\n\tasync train(X, y) {\n\t\t/* START SETUP */\n\t\tconst XTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(X);\n\t\t});\n\t\tconst yTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(y);\n\t\t});\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.state.tensorFlowNN;\n\t\t});\n\t\tconst timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\t\t/* START SETUP */\n\n\t\t///* Until broken by user */\n\t\tlet play = this.state.controls.playing;\n\t\t////let epoch = 0;\n\t\twhile (play !== false) {\n\t\t\tthis.setState({ stopRender: true });\n\t\t\tconst { playing, speed } = this.state.controls;\n\t\t\tplay = playing;\n\t\t\tawait model.fit(XTensor, yTensor, {\n\t\t\t\tepochs: 1,\n\t\t\t});\n\t\t\ttf.tidy(() => {\n\t\t\t\tlet yhatTensor = model.predict(XTensor);\n\t\t\t\tlet yhat = tools.tensorToArray(yhatTensor);\n\t\t\t\tlet loss = tf.losses.meanSquaredError(y, yhat).dataSync()[0];\n\t\t\t\tthis.printParameters(model, loss, yhat, this.state.epoch + 1);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\tthis.setState({ stopRender: false });\n\t\t\tawait timer(speed);\n\t\t}\n\t\tthis.setState({ tensorFlowNN: model });\n\t\ttf.dispose(XTensor);\n\t\ttf.dispose(yTensor);\n\t}\n\tasync genTensorData(eqn, scaled, volume) {\n\t\tawait tf.ready();\n\t\ttf.tidy(() => {\n\t\t\tconst XTensor = tf.linspace(\n\t\t\t\t-this.state.scale,\n\t\t\t\tthis.state.scale,\n\t\t\t\tvolume\n\t\t\t);\n\t\t\tconst yTensor = tf.mul(eqn(XTensor), scaled);\n\t\t\tconst yhatTensor = tf.zerosLike(XTensor);\n\t\t\tconst X = tools.tensorToArray(XTensor);\n\t\t\tconst y = tools.tensorToArray(yTensor);\n\t\t\tconst yhat = tools.tensorToArray(yhatTensor);\n\n\t\t\tthis.setState({\n\t\t\t\tX,\n\t\t\t\ty,\n\t\t\t\tyhat,\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t}\n\tprintParameters(model, loss, yhat, epoch) {\n\t\tlet weightsData = [];\n\t\tlet biasesData = [];\n\t\tfor (let i = 0; i < model.getWeights().length; i++) {\n\t\t\t(i % 2 === 0 ? weightsData : biasesData).push(\n\t\t\t\tArray.from(model.getWeights()[i].dataSync())\n\t\t\t);\n\t\t}\n\t\tconst lossArray = [...this.state.lossArray, loss];\n\t\tthis.setState({\n\t\t\tbiasesData,\n\t\t\tweightsData,\n\t\t\tloss,\n\t\t\tyhat,\n\t\t\tepoch,\n\t\t\tlossArray,\n\t\t});\n\t\tthis.initNeuralNetwork(this.state.shape);\n\t}\n\tasync asyncPause() {\n\t\tthis.setState({ controls: { ...this.state.controls, playing: false } });\n\t}\n\tasync resetParameters(scale) {\n\t\ttf.dispose(this.state.tensorFlowNN);\n\t\tconst { curve } = this.state;\n\t\tlet eqn;\n\t\tlet optimizer;\n\t\ttf.tidy(() => {\n\t\t\tif (curve === \"sin\") {\n\t\t\t\teqn = tf.sin;\n\t\t\t} else if (curve === \"tanh\") {\n\t\t\t\teqn = tf.tanh;\n\t\t\t} else if (curve === \"cos\") {\n\t\t\t\teqn = tf.cos;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t\tawait this.genTensorData(eqn, scale, 50);\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.modelCompile(this.state.lr);\n\t\t});\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tepoch: 0,\n\t\t\tloss: null,\n\t\t\tweights: [],\n\t\t\ttensorFlowNN: model,\n\t\t\tshapedWeights: [],\n\t\t\tlossArray: [],\n\t\t});\n\t\ttf.dispose(optimizer);\n\t}\n\tasync reset(scale) {\n\t\tthis.asyncPause();\n\t\tthis.resetParameters(scale);\n\t}\n\tasync componentDidMount() {\n\t\ttf.setBackend(\"cpu\");\n\t\tthis.genTensorData(tf.sin, this.state.scale, 50);\n\t\tthis.initNeuralNetwork(this.state.shape);\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.modelCompile(0.01);\n\t\t});\n\t\tthis.setState({ tensorFlowNN: model });\n\t}\n\tshouldComponentUpdate() {\n\t\tif (this.state.stopRender) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\trender() {\n\t\t/* Destructure State*/\n\t\tconst {\n\t\t\tX,\n\t\t\ty,\n\t\t\tshape,\n\t\t\tscale,\n\t\t\tminiNN,\n\t\t\tweightsData,\n\t\t\tbiasesData,\n\t\t\tyhat,\n\t\t\trects,\n\t\t\tweights,\n\t\t\tmode,\n\t\t\tepoch,\n\t\t\tcurve,\n\t\t\tlr,\n\t\t\tloss,\n\t\t\tcontrols,\n\t\t\tshapedWeights,\n\t\t\tshapedLinks,\n\t\t\tshapedRects,\n\t\t} = this.state;\n\t\tconst { playing, speed } = controls;\n\n\t\tconst lrs = [0.001, 0.005, 0.01, 0.05, 0.1];\n\t\tconst dataSets = [\n\t\t\t{ label: \"sin\", eqn: tf.sin, scale: 5 },\n\t\t\t{ label: \"cos\", eqn: tf.cos, scale: 5 },\n\t\t\t{ label: \"tanh\", eqn: tf.tanh, scale: 5 },\n\t\t];\n\n\t\t/* Destructure render */\n\t\tconst PlayButtonClick = (\n\t\t\t// eslint-disable-next-line\n\t\t\t<Fab\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: !this.state.controls.playing\n\t\t\t\t\t\t? \"#175676\"\n\t\t\t\t\t\t: \"#D62839\",\n\t\t\t\t\tcolor: \"white\",\n\t\t\t\t}}\n\t\t\t\tdisableTouchRipple\n\t\t\t\tonClick={() => this.run()}\n\t\t\t>\n\t\t\t\t{!playing ? <PlayArrow /> : <Stop />}\n\t\t\t</Fab>\n\t\t);\n\t\tconst controlsReg = (\n\t\t\t<CardActions>\n\t\t\t\t<Tooltip title=\"reset\" arrow>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Replay />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Tooltip>\n\t\t\t\t{PlayButtonClick}\n\t\t\t\t<Tooltip title=\"slomo\" arrow>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: speed === 0 ? \"grey\" : \"#FFC006\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tcontrols: {\n\t\t\t\t\t\t\t\t\t...controls,\n\t\t\t\t\t\t\t\t\tspeed: speed === 0 ? 100 : 0,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SlowMotionVideo />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Tooltip>\n\t\t\t</CardActions>\n\t\t);\n\t\tconst controlsBackProp = (\n\t\t\t<CardActions>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\tawait this.anim(this.state.miniNN);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tREPLAY\n\t\t\t\t</Button>\n\t\t\t</CardActions>\n\t\t);\n\n\t\tconst controlCenter = (\n\t\t\t<Box width={400}>\n\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: \"#4BA3C3\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tControl Center\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<div on></div>\n\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\t{this.state.mode\n\t\t\t\t\t\t\t\t\t\t? \"Click to go back\"\n\t\t\t\t\t\t\t\t\t\t: \"Click to see Backpropagation\"}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tarrow\n\t\t\t\t\t\t\tplacement=\"right-start\"\n\t\t\t\t\t\t\topen={this.state.loss != null}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tdisabled={this.state.loss == null}\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tconst timer = (ms) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise((res) =>\n\t\t\t\t\t\t\t\t\t\t\tsetTimeout(res, ms)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tlet formattedWeights = tools.formatWeightArray(\n\t\t\t\t\t\t\t\t\t\tweightsData,\n\t\t\t\t\t\t\t\t\t\tshape\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tlet nn = new NeuralNetwork(\n\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\tformattedWeights,\n\t\t\t\t\t\t\t\t\t\tbiasesData\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tnn.forward(X[0], y[0]);\n\t\t\t\t\t\t\t\t\tnn.backward();\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t...this.state,\n\t\t\t\t\t\t\t\t\t\tminiNN: nn,\n\t\t\t\t\t\t\t\t\t\tmode: !mode,\n\t\t\t\t\t\t\t\t\t\tcontrols: {\n\t\t\t\t\t\t\t\t\t\t\t...this.state.controls,\n\t\t\t\t\t\t\t\t\t\t\tplaying: false,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tawait timer(1000);\n\t\t\t\t\t\t\t\t\tthis.setState({ nshow: 1 });\n\t\t\t\t\t\t\t\t\tawait this.anim(nn);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\n\t\t\t\t\t\t\t\t\tEpoch: {epoch}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\tloss:\n\t\t\t\t\t\t\t{loss == null ? \"\" : loss.toPrecision(6)}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t{this.state.mode ? controlsBackProp : controlsReg}\n\t\t\t\t\t\t<CardActions></CardActions>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\n\t\t\t\t<Box marginTop={5}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tcolor: \"#4BA3C3\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCustomization\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tLearning Rate\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t{lrs.map((num, i) => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tlabel={`${num}`}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\t\t\t\tlr === num ? \"white\" : \"grey\",\n\t\t\t\t\t\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\t\t\t\t\t\tlr === num\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#175676\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"lightgrey\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelLr(num);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tData Set\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t{dataSets.map((item, i) => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\t\t\t\tcurve === item.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"white\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"grey\",\n\t\t\t\t\t\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\t\t\t\t\t\tcurve === item.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#175676\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"lightgrey\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\tcurve: item.label,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.genTensorData(\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.eqn,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.scale,\n\t\t\t\t\t\t\t\t\t\t\t\t\t50\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tNeurons\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#175676\" }}\n\t\t\t\t\t\t\t\t\tdefaultValue={2}\n\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\taria-labelledby=\"discrete-slider\"\n\t\t\t\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\t\t\t\tmarks\n\t\t\t\t\t\t\t\t\tonChange={(e, n) => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ sliderVal: n });\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\t\t\tmax={8}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tlet a = shape;\n\t\t\t\t\t\t\t\t\t\tif (a.length < 5) {\n\t\t\t\t\t\t\t\t\t\t\ta[\n\t\t\t\t\t\t\t\t\t\t\t\ta.length - 1\n\t\t\t\t\t\t\t\t\t\t\t] = this.state.sliderVal;\n\t\t\t\t\t\t\t\t\t\t\ta.push(1);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ shape: a });\n\t\t\t\t\t\t\t\t\t\t\tthis.initNeuralNetwork(a);\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tlet a = shape;\n\t\t\t\t\t\t\t\t\t\tif (a.length > 2) {\n\t\t\t\t\t\t\t\t\t\t\ta.splice(a.length - 2, 1);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ shape: a });\n\t\t\t\t\t\t\t\t\t\t\tthis.initNeuralNetwork(a);\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t–\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t\tconst scatter = (\n\t\t\t<Box marginLeft={10}>\n\t\t\t\t<Box>\n\t\t\t\t\t<ScatterPlot\n\t\t\t\t\t\twidth={300}\n\t\t\t\t\t\theight={300}\n\t\t\t\t\t\tpadding={0}\n\t\t\t\t\t\tstart={-scale}\n\t\t\t\t\t\tstop={scale}\n\t\t\t\t\t\tX={X}\n\t\t\t\t\t\ty={y}\n\t\t\t\t\t\tyhat={yhat}\n\t\t\t\t\t/>\n\t\t\t\t</Box>\n\t\t\t\t<Box marginTop={10}>\n\t\t\t\t\t<Loss lossArray={this.state.lossArray} loss={loss} />\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t\tconst neuralNetwork = (\n\t\t\t<Box marginLeft={10}>\n\t\t\t\t<NeuralNetworkComponent\n\t\t\t\t\tminiNN={miniNN}\n\t\t\t\t\tinput={X[0]}\n\t\t\t\t\tlabel={y[0]}\n\t\t\t\t\tshapedWeights={shapedWeights}\n\t\t\t\t\tshapedLinks={shapedLinks}\n\t\t\t\t\tshapedRects={shapedRects}\n\t\t\t\t\tshape={shape}\n\t\t\t\t\tbiases={biasesData}\n\t\t\t\t\tweights={weights}\n\t\t\t\t\trects={rects}\n\t\t\t\t\tplaying={\n\t\t\t\t\t\tplaying\n\t\t\t\t\t\t\t? speed === 0\n\t\t\t\t\t\t\t\t? \"edgeForward\"\n\t\t\t\t\t\t\t\t: \"edgeSlowed\"\n\t\t\t\t\t\t\t: \"edgePaused\"\n\t\t\t\t\t}\n\t\t\t\t\tshow={playing}\n\t\t\t\t\tmode={mode}\n\t\t\t\t\tbackward={this.state.direction}\n\t\t\t\t></NeuralNetworkComponent>\n\t\t\t</Box>\n\t\t);\n\n\t\treturn (\n\t\t\t<div id=\"app\">\n\t\t\t\t<Card\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: \"#FAFAFA\",\n\t\t\t\t\t\toutlineColor: \"white\",\n\t\t\t\t\t\tpaddingBottom: \"1em\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tclassName=\"regular\"\n\t\t\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\t\t\tjustifyContent=\"center\"\n\t\t\t\t\t\t\tmarginTop={10}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{controlCenter}\n\t\t\t\t\t\t\t{neuralNetwork}\n\t\t\t\t\t\t\t{scatter}\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MainTool;\n","import React, { Component } from \"react\";\nimport { Bar, MainTool } from \"./components/exports\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Bar title={\"Backpropogation Explainer\"} />\n\t\t\t\t<MainTool />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}