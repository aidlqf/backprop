{"version":3,"sources":["components/def/PlayGround.js","components/def/ScatterPlot.js","nn/def/Neuron.js","nn/def/Loss.js","nn/def/NeuralNetwork.js","nn/def/Tools.js","App.js","reportWebVitals.js","index.js"],"names":["PlayGround","props","state","widths","zoom","macro","micro","bind","d3node","d3zoom","x","y","scaleZoom","duration","attr","array","flattendArray","i","length","e","push","model","this","mode","console","log","trans","flatten","children","l","weights","playing","id","width","height","transform","links","map","d","className","strokeWidth","Math","pow","stroke","fill","rects","onClick","fontSize","lin","d3","connection","color","inputWeightComponent","input","weight","dInput","dWeight","add","relu","notPlaying","backward","output","svgGroup","select","setState","neuron","inputs","Component","ScatterPlot","node","formattedPoints","selectAll","data","enter","append","style","a","padding","start","stop","container","svg","xScale","domain","range","yScale","xAxis","scale","yAxis","call","X","yhat","dataSet","remove","plotPoints","Neuron","bias","array1","array2","item","dvalues","oppositeParameter","mult","reduce","b","dvalue","numInputs","dSumArray","activation","sum","multStep","sumStep","actStep","dSum","dActStep","dSumStep","dBias","dWeights","dInputs","dInputsSum","MeanSquaredErrorLoss","subStep","squareStep","NeuralNetwork","shape","biases","loss","layer","dense","max","label","lastLayer","outputs","forward","ReLU","linear","dValues","dValue","dLinear","dReLU","formatWeightArray","uweights","increment","weightSet","t","w","toFunc2DArray","arr","fixed","toFixed","getRandomInt","floor","random","tensorToArray","tensor","Array","from","dataSync","tools","App","duringEpoch","epoch","biasesData","weightsData","lr","curve","controls","speed","nn","run","genTensorData","mutate","train","printParameters","reset","asyncPause","resetParameters","changeModelLr","initNeuralNetwork","flattenedWeights","link","rw","rh","layerProportion","ns","flatns","aaron","prevNeuron","source","target","lrChange","tf","key","subkey","value","error","inputShape","units","useBias","addModel","compile","optimizer","sgd","XTensor","yTensor","timer","ms","Promise","res","setTimeout","play","fit","epochs","yhatTensor","predict","meanSquaredError","eqn","scaled","getWeights","modelCompile","newShape","splice","lrs","dataSets","PlayButtonClick","Fab","Stop","PlayArrow","controlCenter","Box","Card","variant","CardContent","Typography","CardActions","IconButton","disabled","Replay","SlowMotionVideo","marginTop","num","Chip","scatter","marginLeft","AppBar","position","background","Toolbar","display","justifyContent","shapedWeights","show","Button","table","formattedWeights","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3837a515.chunk.js","sourcesContent":["/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tNeural Network component that is what the user interacts with\n*/\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./d3.css\";\n\nclass PlayGround extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\twidths: 32,\n\t\t\tzoom: 15,\n\t\t\tmacro: false,\n\t\t\tmicro: false,\n\t\t};\n\t\tthis.zoom = this.zoom.bind(this);\n\t}\n\tzoom(d3node, d3zoom, x, y, scaleZoom, duration) {\n\t\td3node\n\t\t\t//.transition()\n\t\t\t//.duration(duration)\n\t\t\t//.ease(d3zoom)\n\t\t\t.attr(\n\t\t\t\t\"transform\",\n\t\t\t\t`translate(${-x * scaleZoom}, ${\n\t\t\t\t\t-y * scaleZoom\n\t\t\t\t})scale(${scaleZoom})`\n\t\t\t);\n\t}\n\tflatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\n\trender() {\n\t\tlet model = [];\n\t\tif (this.props.mode) {\n\t\t\tconsole.log(this.props.trans);\n\t\t\tconst { trans } = this.props;\n\n\t\t\tmodel = this.flatten(trans.model);\n\t\t\t/* Now create array of output values from each neuron */\n\t\t}\n\t\tconst { children } = this.props;\n\n\t\tlet l = this.props.weights.length;\n\t\tconst playing = (\n\t\t\t<svg id=\"p\" width=\"800\" height=\"600\">\n\t\t\t\t<g transform={\"scale(1)\"}>\n\t\t\t\t\t{this.props.links.map((d, i) => (\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\td={d}\n\t\t\t\t\t\t\tclassName={this.props.playing}\n\t\t\t\t\t\t\tstrokeWidth={\n\t\t\t\t\t\t\t\tl === 0\n\t\t\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t\t\t: Math.pow(this.props.weights[i], 2) + 0.25\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstroke={\n\t\t\t\t\t\t\t\tl !== 0\n\t\t\t\t\t\t\t\t\t? this.props.weights[i] > 0\n\t\t\t\t\t\t\t\t\t\t? \"#8b0de5\"\n\t\t\t\t\t\t\t\t\t\t: \"#F50257\"\n\t\t\t\t\t\t\t\t\t: \"#ededed\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t></path>\n\t\t\t\t\t))}\n\t\t\t\t\t{this.props.rects.map((d, i) => (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\t\twidth={this.state.widths}\n\t\t\t\t\t\t\theight={this.state.widths}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.props.onClick();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tfill=\"lightgrey\"\n\t\t\t\t\t\t></rect>\n\t\t\t\t\t))}\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t);\n\n\t\t//Lets create the computational graph\n\t\tlet fontSize = \"1px\";\n\t\tconst lin = d3.line();\n\n\t\tconst mult = (x, y) => (\n\t\t\t<svg x={x} y={y} width={2} height={2}>\n\t\t\t\t<rect width={2} height={2} x={0} y={0} fill=\"white\"></rect>\n\t\t\t\t<text fontSize=\"2px\" x={0.5} y={2}>\n\t\t\t\t\t*\n\t\t\t\t</text>\n\t\t\t</svg>\n\t\t);\n\t\tconst connection = (x, y, color) => (\n\t\t\t<path d={lin([x, y])} stroke={color} strokeWidth=\"0.1\"></path>\n\t\t);\n\n\t\tconst inputWeightComponent = (input, weight, dInput, dWeight) => (\n\t\t\t<g>\n\t\t\t\t{connection([1, 0.75], [4, 0.75], \"black\")}\n\t\t\t\t{connection([1, 2.25], [4, 2.25], \"black\")}\n\t\t\t\t{connection([4, 0.75], [6, 1.5], \"black\")}\n\t\t\t\t{connection([4, 2.25], [6, 1.5], \"black\")}\n\t\t\t\t{mult(5, 0.5)}\n\t\t\t</g>\n\t\t);\n\n\t\tconst add = (x, y) => (\n\t\t\t<svg x={x} y={y} width={2} height={2}>\n\t\t\t\t<rect width={2} height={2} x={0} y={0} fill=\"white\"></rect>\n\t\t\t\t<text fontSize=\"2px\" x={0.5} y={1.5}>\n\t\t\t\t\t+\n\t\t\t\t</text>\n\t\t\t</svg>\n\t\t);\n\t\tconst relu = (x, y) => (\n\t\t\t<svg x={x} y={y} width={2} height={2}>\n\t\t\t\t<rect width={2} height={2} x={0} y={0} fill=\"white\"></rect>\n\t\t\t\t<text fontSize=\"0.5px\" x={0.25} y={0.5}>\n\t\t\t\t\tReLU\n\t\t\t\t</text>\n\t\t\t\t{connection([0, 1.5], [1, 1.5], \"black\")}\n\t\t\t\t{connection([1, 1.5], [2, 0.5], \"black\")}\n\t\t\t</svg>\n\t\t);\n\n\t\tconst graph = (x, y, neuron) => (\n\t\t\t<svg width={32} height={32} x={x} y={y}>\n\t\t\t\t{neuron.length == 0\n\t\t\t\t\t? \"\"\n\t\t\t\t\t: neuron.inputs.map((d, i) => (\n\t\t\t\t\t\t\t<g key={i}>\n\t\t\t\t\t\t\t\t<svg width={10} height={4} x={0} y={i * 3.5}>\n\t\t\t\t\t\t\t\t\t<text fontSize={fontSize} x={0} y={1}>\n\t\t\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t<text fontSize={fontSize} x={0} y={2.5}>\n\t\t\t\t\t\t\t\t\t\tw\n\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t{connection([6, 1.5], [10, 1.5], \"black\")}\n\t\t\t\t\t\t\t\t\t{inputWeightComponent(1, 1, 1, 1)}\n\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t{connection(\n\t\t\t\t\t\t\t\t\t[10, i * 3.5 + 1.5],\n\t\t\t\t\t\t\t\t\t[18.25, 16],\n\t\t\t\t\t\t\t\t\t\"black\"\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</g>\n\t\t\t\t\t  ))}\n\n\t\t\t\t<text fontSize={fontSize} x={0} y={30}>\n\t\t\t\t\tb\n\t\t\t\t</text>\n\t\t\t\t{connection([0.75, 29.75], [10, 29.75], \"black\")}\n\t\t\t\t{connection([10, 29.75], [18.25, 16], \"black\")}\n\n\t\t\t\t{connection([19, 16], [30, 16], \"black\")}\n\t\t\t\t{add(18, 15)}\n\t\t\t\t{relu(24, 15)}\n\t\t\t</svg>\n\t\t);\n\n\t\tconst notPlaying = (\n\t\t\t<svg id=\"pp\" width=\"800\" height=\"600\">\n\t\t\t\t<g id=\"gpp\">\n\t\t\t\t\t{this.props.links.map((d, i) => (\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\td={d}\n\t\t\t\t\t\t\tclassName={this.props.backward}\n\t\t\t\t\t\t\tstrokeWidth={\n\t\t\t\t\t\t\t\tMath.pow(this.props.weights[i], 2) + 0.25\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstroke={\n\t\t\t\t\t\t\t\tthis.props.weights.length !== 0\n\t\t\t\t\t\t\t\t\t? this.props.weights[i] > 0\n\t\t\t\t\t\t\t\t\t\t? \"#8b0de5\"\n\t\t\t\t\t\t\t\t\t\t: \"#F50257\"\n\t\t\t\t\t\t\t\t\t: \"#ededed\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t></path>\n\t\t\t\t\t))}\n\t\t\t\t\t{this.props.rects.map((d, i) => (\n\t\t\t\t\t\t<g id=\"ggpp\" key={i}>\n\t\t\t\t\t\t\t<text x={d.x + 35} y={d.y + 16}>\n\t\t\t\t\t\t\t\t{model.length !== 0\n\t\t\t\t\t\t\t\t\t? i > 0\n\t\t\t\t\t\t\t\t\t\t? model[i - 1].output\n\t\t\t\t\t\t\t\t\t\t: this.props.input\n\t\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\t\t\twidth={this.state.widths}\n\t\t\t\t\t\t\t\theight={this.state.widths}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tconsole.log(model[i]);\n\t\t\t\t\t\t\t\t\tconst svgGroup = d3\n\t\t\t\t\t\t\t\t\t\t.select(\"#pp\")\n\t\t\t\t\t\t\t\t\t\t.select(\"g\");\n\t\t\t\t\t\t\t\t\tthis.zoom(\n\t\t\t\t\t\t\t\t\t\tsvgGroup,\n\t\t\t\t\t\t\t\t\t\td3.easeExpInOut,\n\t\t\t\t\t\t\t\t\t\td.x - 16,\n\t\t\t\t\t\t\t\t\t\td.y,\n\t\t\t\t\t\t\t\t\t\tthis.state.zoom,\n\t\t\t\t\t\t\t\t\t\t1500\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tthis.setState({ micro: true });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tfill=\"lightgrey\"\n\t\t\t\t\t\t\t></rect>\n\t\t\t\t\t\t\t{i > 0 && this.state.micro\n\t\t\t\t\t\t\t\t? graph(\n\t\t\t\t\t\t\t\t\t\td.x + 2,\n\t\t\t\t\t\t\t\t\t\td.y,\n\t\t\t\t\t\t\t\t\t\tmodel.length > 0 ? model[i - 1] : []\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t))}\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t);\n\t\treturn (\n\t\t\t<div id=\"nn\">\n\t\t\t\t{children}\n\t\t\t\t{!this.props.mode ? playing : notPlaying}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default PlayGround;\n","import React, { Component } from \"react\";\nimport \"./d3.css\";\nimport * as d3 from \"d3\";\n\nclass ScatterPlot extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tplotPoints(node, formattedPoints) {\n\t\t/* Now need to plot said data */\n\t\tnode.selectAll(\"circle\")\n\t\t\t.data(formattedPoints)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", (d) => d.x)\n\t\t\t.attr(\"cy\", (d) => d.y)\n\t\t\t.attr(\"r\", 2)\n\t\t\t.style(\"fill\", \"#F50257\");\n\t}\n\t/* This is where we initialize the Scatter Plot */\n\tasync componentDidMount() {\n\t\tconst { width, height, padding, start, stop } = this.props;\n\t\tconst container = d3.select(\"#nice\");\n\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis);\n\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", (height + 1) / 2)\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", (height + 1) / 2)\n\t\t\t.attr(\"class\", \"split\");\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", (width + 1) / 2)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", (width + 1) / 2)\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"class\", \"split\");\n\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"epic\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { width, height, padding, start, stop, X, y, yhat } = this.props;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#nice\").select(\"svg\");\n\t\tlet dataSet = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\tdataSet.push({\n\t\t\t\tx: xScale(X[i]),\n\t\t\t\ty: yScale(y[i]),\n\t\t\t});\n\t\t}\n\t\tlet a = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\ta.push([xScale(X[i]), yScale(yhat[i])]);\n\t\t}\n\t\tsvg.selectAll(\"circle\").remove();\n\t\tthis.plotPoints(svg, dataSet);\n\n\t\tsvg.select(\"#epic\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\t//componentDidUpdate() {\n\t//const { width, height, padding, start, stop, X, y } = this.props;\n\t//console.log(X);\n\t//console.log(y);\n\t//let xScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([0, width - 2 * padding]);\n\n\t//let yScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([height - 2 * padding, 0]);\n\t//const svg = d3.select(\"#nice\").select(\"svg\");\n\t//let dataSet = [];\n\t//for (let i = 0; i < X.length; i++) {\n\t//dataSet.push({\n\t//x: xScale(X[i]),\n\t//y: yScale(y[i]),\n\t//});\n\t//}\n\t///* Now need to plot said data */\n\t//svg.selectAll(\"circle\")\n\t//.data(dataSet)\n\t//.enter()\n\t//.append(\"circle\")\n\t//.attr(\"cx\", (d) => d.x)\n\t//.attr(\"cy\", (d) => d.y)\n\t//.attr(\"r\", 2)\n\t//.style(\"fill\", \"#F50257\");\n\t//}\n\trender() {\n\t\treturn <div id=\"nice\"></div>;\n\t}\n}\n\nexport default ScatterPlot;\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tThis is the class definiton and implmentation of Neuron for Nerual Network\n*/\nexport class Neuron {\n\tconstructor(weights, bias) {\n\t\tthis.weights = weights;\n\t\tthis.bias = bias;\n\t}\n\t/* Next functions are just helper functions for the operations */\n\tmult(array1, array2) {\n\t\treturn array1.map((item, i) => {\n\t\t\treturn item * array2[i];\n\t\t});\n\t}\n\tdMult(dvalues, oppositeParameter) {\n\t\treturn this.mult(dvalues, oppositeParameter);\n\t}\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tdSum(dvalue, numInputs) {\n\t\tlet dSumArray = [];\n\t\tfor (let i = 0; i < numInputs; i++) {\n\t\t\tdSumArray.push(dvalue);\n\t\t}\n\t\treturn dSumArray;\n\t}\n\tlinear(input) {\n\t\treturn input;\n\t}\n\n\t/* \n\t\tPurpose: feed forward of single neuron\n\t\t@param: inputs, activation\n\t\t@store inputs, multStep, sumStep, actStep, output\n\t*/\n\tforward(inputs, activation) {\n\t\t/* Destructure the class values */\n\t\tconst { weights, bias } = this;\n\t\tconst { mult, sum } = this;\n\t\t/* propogate forward */\n\t\tconst multStep = mult(inputs, weights);\n\t\tconst sumStep = sum(multStep) + bias;\n\t\tconst actStep = activation(sumStep);\n\n\t\t/* Save values */\n\t\tthis.inputs = inputs;\n\t\tthis.multStep = multStep;\n\t\tthis.sumStep = sumStep;\n\t\tthis.actStep = actStep;\n\t\tthis.output = actStep;\n\t}\n\n\t/* \n\t\tPurpose: feed backward of single neuron\n\t\t@param: dvalue, activation\n\t\t@store inputs, multStep, sumStep, actStep, output\n\t*/\n\tbackward(dvalue, activation) {\n\t\t/* Destructure the class values */\n\t\tconst { inputs, weights, actStep } = this;\n\t\tconst { dSum, mult, sum } = this;\n\t\t/* propgate backwards */\n\t\tconst dActStep = activation(actStep) * dvalue;\n\t\tconst dSumStep = dSum(dActStep, inputs.length);\n\t\tconst dBias = dActStep;\n\t\tconst dWeights = mult(dSumStep, inputs);\n\t\tconst dInputs = mult(dSumStep, weights);\n\t\tconst dInputsSum = sum(dInputs);\n\n\t\t/* Save values */\n\t\tthis.dvalue = dvalue;\n\t\tthis.dActStep = dActStep;\n\t\tthis.dSumStep = dSumStep;\n\t\tthis.dBias = dBias;\n\t\tthis.dWeights = dWeights;\n\t\tthis.dInputs = dInputs;\n\t\tthis.dInputsSum = dInputsSum;\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\texports the losses to be used for the neural network\n\t\t\n*/\nexport class MeanSquaredErrorLoss {\n\t/* \n\t\tPurpose: feed forward of the nerual network\n\t\t@param yhat, y\n\t\t@stores y, yhat, subStep, squareStep, output\n\t*/\n\tforward(yhat, y) {\n\t\tconst subStep = yhat - y;\n\t\tconst squareStep = (this.output = Math.pow(yhat - y, 2));\n\n\t\tthis.subStep = subStep;\n\t\tthis.squareStep = squareStep;\n\t\tthis.output = squareStep;\n\t}\n\t/* \n\t\tPurpose: feed backward of the nerual network\n\t\t@stores dInputs\n\t*/\n\tbackward() {\n\t\tthis.dInputs = 2 * this.subStep;\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tThis creates the definiton and implemntation of the neural network in a non vectorized more manual way \n\t\tdesigned to show all the operations\n\tTODO: add the update that would update to the weights sgd style and compute forward once more to see difference\n*/\nimport { Neuron } from \"./Neuron\";\nimport { MeanSquaredErrorLoss } from \"./Loss\";\nexport class NeuralNetwork {\n\t/* here we construct the Neuron model */\n\tconstructor(shape, weights, biases) {\n\t\tthis.model = [];\n\t\tthis.loss = new MeanSquaredErrorLoss();\n\t\tthis.shape = shape;\n\n\t\t/* HERE WE CONSTRUCT THE MODEL ON CLASS CREATION */\n\t\tfor (let layer = 0; layer < weights.length; layer++) {\n\t\t\tlet dense = [];\n\t\t\tfor (let neuron = 0; neuron < weights[layer].length; neuron++) {\n\t\t\t\tdense.push(\n\t\t\t\t\tnew Neuron(weights[layer][neuron], biases[layer][neuron])\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.model.push(dense);\n\t\t}\n\t}\n\t/* Next are some helper functions */\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tdReLU(input) {\n\t\treturn input > 0 ? 1 : 0;\n\t}\n\tdLinear(input) {\n\t\treturn 1;\n\t}\n\n\tReLU(input) {\n\t\treturn Math.max(0, input);\n\t}\n\n\tlinear(input) {\n\t\treturn input;\n\t}\n\n\t/* \n\t\tPurpose: to feed forward the entire layer\n\t\t@param input, label\n\t\t@store model, yhat, loss\n\t*/\n\tforward(input, label) {\n\t\tlet inputs = [input];\n\t\tconst lastLayer = this.model.length;\n\t\tconst outputNeuron = 0;\n\t\t/* First iterate through each layer */\n\t\tfor (let layer = 0; layer < lastLayer - 1; layer++) {\n\t\t\t/* Then iterate through each neuron in the layer */\n\t\t\tlet outputs = [];\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\t/* Then feed forward each individual neuron and push to output array */\n\t\t\t\tthis.model[layer][neuron].forward(inputs, this.ReLU);\n\t\t\t\toutputs.push(this.model[layer][neuron].output);\n\t\t\t}\n\n\t\t\t/* Then outputs will be the inputs for the next layer */\n\t\t\tinputs = outputs;\n\t\t}\n\t\tthis.model[lastLayer - 1][0].forward(inputs, this.linear);\n\t\tthis.yhat = this.model[lastLayer - 1][outputNeuron].output;\n\t\tthis.loss.forward(this.yhat, label);\n\t}\n\t/* \n\t\tPurpose: to feed backward the entire model per layer\n\t*/\n\tbackward() {\n\t\tconst { sum } = this;\n\t\tthis.loss.backward();\n\t\tlet dValues = [this.loss.dInputs];\n\t\tconst lastLayer = this.model.length;\n\t\tlet dValue = sum(dValues);\n\t\t/* take care of output neuron */\n\t\tthis.model[lastLayer - 1][0].backward(dValue, this.dLinear);\n\t\tdValues = [this.model[lastLayer - 1][0].dInputsSum];\n\t\t/* Iterate backwards */\n\t\tfor (let layer = lastLayer - 2; layer >= 0; layer--) {\n\t\t\t/* First sum the dvalues */\n\t\t\tdValue = sum(dValues);\n\t\t\tdValues = [];\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\tthis.model[layer][neuron].backward(dValue, this.dReLU);\n\t\t\t\tdValues.push(this.model[layer][neuron].dInputsSum);\n\t\t\t}\n\t\t}\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tExports some tools that make it easier to deal with the data\n*/\n\n/* \n\tPurpose: format the weight array given from tensorflow\n\t@param uweights (unformatted weights), shape\n\t@return layer (formated weights per layer)\n*/\nexport function formatWeightArray(uweights, shape) {\n\tlet layer = [];\n\t/* Increment over each layer l */\n\tfor (let l = 0; l < uweights.length; l++) {\n\t\t/* First num in shape is input neuron which is why we skip here by adding 1 */\n\t\tlet increment = shape[l + 1];\n\t\tlet weightSet = [];\n\t\t/* Increment over each neuron */\n\t\tfor (let t = 0; t < increment; t++) {\n\t\t\tlet weights = [];\n\t\t\t/* Increment over each weight per neuron */\n\t\t\tfor (let w = t; w < uweights[l].length; w += increment) {\n\t\t\t\tweights.push(uweights[l][w]);\n\t\t\t}\n\t\t\tweightSet.push(weights);\n\t\t}\n\t\tlayer.push(weightSet);\n\t}\n\treturn layer;\n}\n\n/* \n\tPurpose: to turn a 2d array into the same array but fixed to a certian number of numbers/figures\n\t@param arr  (not fixed array), fixed\n\t@return arr (fixed array)\n*/\nexport function toFunc2DArray(arr, fixed) {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let e = 0; e < arr[i].length; e++) {\n\t\t\tarr[i][e] = +arr[i][e].toFixed(fixed);\n\t\t}\n\t}\n\treturn arr;\n}\n\n/* \n\tPurpose: Flattens the array\n\t@param array\n\t@return flattenedArray\n*/\nexport function flatten(array) {\n\tlet flattendArray = [];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\tflattendArray.push(array[i][e]);\n\t\t}\n\t}\n\treturn flattendArray;\n}\n\n/* \n\tPurpose: generate random integer from 0 to given paramter\n\t@param max\n\t@return Number [0,max)\n*/\nexport function getRandomInt(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\n/* \n\tPurpose: turn tensor to array\n\t@param tensor \n\t@return array\n*/\nexport function tensorToArray(tensor) {\n\treturn Array.from(tensor.dataSync());\n}\n","/* \n  Donny Bertucci: @xnought\n  Summary: \n    This file acts as the highest state and act as the controls \n    for the entire application\n*/\nimport React, { Component } from \"react\";\nimport {\n\tTypography,\n\tBox,\n\tAppBar,\n\tToolbar,\n\tCard,\n\tCardContent,\n\tIconButton,\n\tCardActions,\n\tChip,\n\tButton,\n\tFab,\n} from \"@material-ui/core\";\nimport { Replay, SlowMotionVideo, PlayArrow, Stop } from \"@material-ui/icons\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as d3 from \"d3\";\nimport { PlayGround, ScatterPlot } from \"./components/exports\";\nimport { NeuralNetwork, tools } from \"./nn/exports\";\nimport \"./App.css\";\nconst { flatten, formatWeightArray, tensorToArray } = tools;\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* Treat the app state as the global state */\n\t\tthis.state = {\n\t\t\tloss: null,\n\t\t\tduringEpoch: false,\n\t\t\tshape: [1, 8, 8, 1],\n\t\t\tepoch: 0,\n\t\t\tyhat: [],\n\t\t\tbiasesData: [],\n\t\t\tweightsData: [],\n\t\t\tlr: 0.1,\n\t\t\tdata: {\n\t\t\t\tX: [],\n\t\t\t\ty: [],\n\t\t\t},\n\t\t\tscale: 5,\n\t\t\tcurve: \"sin\",\n\t\t\tcontrols: {\n\t\t\t\tplaying: false,\n\t\t\t\tspeed: 0,\n\t\t\t},\n\t\t\trects: [],\n\t\t\tweights: [],\n\t\t\tlinks: [],\n\t\t\tnn: null,\n\t\t\tmode: false,\n\t\t\ttrans: null,\n\t\t\tmacro: false,\n\t\t};\n\n\t\t/* Prototype: Functions Binds to \"this\" */\n\t\t/* Main Logic */\n\t\tthis.run = this.run.bind(this);\n\t\t/* Neural Network Logic */\n\t\tthis.genTensorData = this.genTensorData.bind(this);\n\t\t/* Mutators of State */\n\t\tthis.mutate = this.mutate.bind(this);\n\n\t\tthis.train = this.train.bind(this);\n\t\tthis.printParameters = this.printParameters.bind(this);\n\t\tthis.reset = this.reset.bind(this);\n\t\tthis.asyncPause = this.asyncPause.bind(this);\n\t\tthis.resetParameters = this.resetParameters.bind(this);\n\t\tthis.changeModelLr = this.changeModelLr.bind(this);\n\t\tthis.initNeuralNetwork = this.initNeuralNetwork.bind(this);\n\t}\n\n\tinitNeuralNetwork(shape) {\n\t\tif (!this.state.controls.playing) {\n\t\t\tconst rw = 32;\n\t\t\tconst rh = 32;\n\t\t\tlet xScale = d3.scaleLinear().domain([0, 100]).range([50, 750]);\n\t\t\tlet yScale = d3.scaleLinear().domain([0, 100]).range([500, 0]);\n\t\t\tlet start = { x: 50 - rw / 2, y: 250 - rh / 2 };\n\t\t\tlet stop = { x: 750 - rw / 2, y: 250 - rh / 2 };\n\t\t\tconst link = d3\n\t\t\t\t.linkHorizontal()\n\t\t\t\t.x((d) => d.x + rw / 2)\n\t\t\t\t.y((d) => d.y + rh / 2);\n\t\t\t/* First we figure our how to create the neurons */\n\t\t\t/* GIVEN A SHAPE OF [1,2,2,1] */\n\t\t\tconst layerProportion = [0, 25, 50, 75, 0];\n\t\t\tlet ns = [];\n\t\t\tlet flatns = [];\n\t\t\tns.push([start]);\n\t\t\tflatns.push(start);\n\t\t\tfor (let layer = 1; layer < shape.length - 1; layer++) {\n\t\t\t\tlet dense = [];\n\t\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t\t/* First generate neuron */\n\t\t\t\t\tlet aaron = {\n\t\t\t\t\t\tx: xScale(layerProportion[layer]) - rw / 2,\n\t\t\t\t\t\ty: yScale(92 - neuron * 12) - rh / 2,\n\t\t\t\t\t};\n\t\t\t\t\tdense.push(aaron);\n\t\t\t\t\tflatns.push(aaron);\n\t\t\t\t}\n\t\t\t\tns.push(dense);\n\t\t\t}\n\t\t\tflatns.push(stop);\n\t\t\tns.push([stop]);\n\n\t\t\t/* We start to iterate over ns */\n\t\t\tlet links = [];\n\t\t\tfor (let layer = shape.length - 1; layer > 0; layer--) {\n\t\t\t\tfor (\n\t\t\t\t\tlet prevNeuron = 0;\n\t\t\t\t\tprevNeuron < shape[layer - 1];\n\t\t\t\t\tprevNeuron++\n\t\t\t\t) {\n\t\t\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t\t\tlinks.push(\n\t\t\t\t\t\t\tlink({\n\t\t\t\t\t\t\t\tsource: ns[layer - 1][prevNeuron],\n\t\t\t\t\t\t\t\ttarget: ns[layer][neuron],\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setState({ rects: flatns });\n\t\t\tthis.setState({ links });\n\t\t} else if (this.state.controls.playing) {\n\t\t\tlet flattenedWeights = flatten(this.state.weightsData);\n\t\t\tthis.setState({ weights: flattenedWeights });\n\t\t}\n\t}\n\n\tchangeModelLr(lrChange) {\n\t\ttf.tidy(() => {\n\t\t\tthis.setState({ lr: lrChange });\n\t\t\treturn undefined;\n\t\t});\n\t}\n\tasync run() {\n\t\tlet playing = !this.state.controls.playing;\n\t\tthis.mutate(\"controls\", \"playing\", playing);\n\t\tif (playing === true) {\n\t\t\tawait this.train(this.state.data.X, this.state.data.y);\n\t\t\tconsole.log(\"epic\");\n\t\t}\n\t}\n\n\tmutate(key, subkey, value) {\n\t\t/* copy of the state */\n\t\ttf.tidy(() => {\n\t\t\tlet state = { ...this.state };\n\t\t\t/* If this.state.key.subkey exists */\n\t\t\tif (key in state && subkey in state[key]) {\n\t\t\t\t/* Mutate the state */\n\t\t\t\tstate[key][subkey] = value;\n\t\t\t\tthis.setState({ state });\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Could not be found in state\");\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\taddModel(model) {\n\t\treturn tf.tidy(() => {\n\t\t\tlet shape = this.state.shape;\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tinputShape: [1],\n\t\t\t\t\tunits: shape[1],\n\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\tfor (let layer = 2; layer < shape.length - 1; layer++) {\n\t\t\t\tmodel.add(\n\t\t\t\t\ttf.layers.dense({\n\t\t\t\t\t\tunits: shape[layer],\n\t\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\t\tuseBias: true,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tunits: 1,\n\t\t\t\t\tactivation: \"linear\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn model;\n\t\t});\n\t}\n\tmodelCompile(lr) {\n\t\tlet model = tf.sequential();\n\t\tthis.addModel(model);\n\t\tmodel.compile({\n\t\t\toptimizer: tf.train.sgd(lr),\n\t\t\tloss: \"meanSquaredError\",\n\t\t});\n\t\treturn model;\n\t}\n\tasync train(X, y) {\n\t\tconst XTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(X);\n\t\t});\n\t\tconst yTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(y);\n\t\t});\n\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.state.nn;\n\t\t});\n\t\tconst timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\t\t///* Until broken by user */\n\t\tlet play = this.state.controls.playing;\n\t\t////let epoch = 0;\n\t\twhile (play !== false) {\n\t\t\tthis.setState({ duringEpoch: true });\n\t\t\tconst { playing /* speed */ } = this.state.controls;\n\t\t\tplay = playing;\n\t\t\tawait model.fit(XTensor, yTensor, {\n\t\t\t\tepochs: 1,\n\t\t\t});\n\t\t\ttf.tidy(() => {\n\t\t\t\tlet yhatTensor = model.predict(XTensor);\n\t\t\t\tlet yhat = tensorToArray(yhatTensor);\n\t\t\t\tlet loss = tf.losses.meanSquaredError(y, yhat).dataSync()[0];\n\t\t\t\tthis.printParameters(model, loss, yhat, this.state.epoch + 1);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\tthis.setState({ duringEpoch: false });\n\t\t\tawait timer(this.state.controls.speed);\n\t\t}\n\t\tthis.setState({ nn: model });\n\t\ttf.dispose(XTensor);\n\t\ttf.dispose(yTensor);\n\t}\n\tasync genTensorData(eqn, scaled) {\n\t\tawait tf.ready();\n\t\ttf.tidy(() => {\n\t\t\tlet XTensor = tf.linspace(-this.state.scale, this.state.scale, 50);\n\t\t\tlet yTensor;\n\t\t\tyTensor = tf.mul(eqn(XTensor), scaled);\n\t\t\tlet yhatTensor = tf.zerosLike(XTensor);\n\t\t\tlet X = tensorToArray(XTensor);\n\t\t\tlet y = tensorToArray(yTensor);\n\t\t\tlet yhat = tensorToArray(yhatTensor);\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\tdata: { X, y },\n\t\t\t\tyhat,\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t}\n\tprintParameters(model, loss, yhat, epoch) {\n\t\tlet weightsData = [];\n\t\tlet biasesData = [];\n\t\tfor (let i = 0; i < model.getWeights().length; i++) {\n\t\t\t(i % 2 === 0 ? weightsData : biasesData).push(\n\t\t\t\tArray.from(model.getWeights()[i].dataSync())\n\t\t\t);\n\t\t}\n\n\t\tthis.setState({ biasesData, weightsData, loss, yhat, epoch });\n\t\tthis.initNeuralNetwork(this.state.shape);\n\t}\n\tasync asyncPause() {\n\t\tthis.setState({ controls: { ...this.state.controls, playing: false } });\n\t}\n\tasync resetParameters(scale) {\n\t\ttf.dispose(this.state.nn);\n\t\tconst { curve } = this.state;\n\t\tlet eqn;\n\t\tlet optimizer;\n\t\ttf.tidy(() => {\n\t\t\tif (curve === \"sin\") {\n\t\t\t\teqn = tf.sin;\n\t\t\t} else if (curve === \"tanh\") {\n\t\t\t\teqn = tf.tanh;\n\t\t\t} else if (curve === \"cos\") {\n\t\t\t\teqn = tf.cos;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t\tawait this.genTensorData(eqn, scale);\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.modelCompile(this.state.lr);\n\t\t});\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tepoch: 0,\n\t\t\tloss: null,\n\t\t\tweights: [],\n\t\t\tnn: model,\n\t\t});\n\t\ttf.dispose(optimizer);\n\t}\n\n\tasync reset(scale) {\n\t\tthis.asyncPause();\n\t\tthis.resetParameters(scale);\n\t}\n\tasync componentDidMount() {\n\t\ttf.setBackend(\"cpu\");\n\t\tthis.genTensorData(tf.sin, this.state.scale);\n\t\tthis.initNeuralNetwork(this.state.shape);\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.modelCompile(0.01);\n\t\t});\n\t\tthis.setState({ nn: model });\n\t}\n\tshouldComponentUpdate() {\n\t\tif (this.state.duringEpoch) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\trender() {\n\t\t/* Destructure State*/\n\t\tconst {\n\t\t\tshape,\n\t\t\tscale,\n\t\t\ttrans,\n\t\t\tweightsData,\n\t\t\tbiasesData,\n\t\t\tyhat,\n\t\t\trects,\n\t\t\tlinks,\n\t\t\tweights,\n\t\t\tmode,\n\t\t\tepoch,\n\t\t\tcurve,\n\t\t\tlr,\n\t\t\tloss,\n\t\t\tcontrols,\n\t\t\tdata,\n\t\t} = this.state;\n\t\tconst { playing, speed } = controls;\n\t\tconst { X, y } = data;\n\n\t\tlet newShape = [...shape];\n\t\tnewShape.splice(0, 1);\n\t\tnewShape.splice(newShape.length - 1, 1);\n\t\tconst lrs = [0.001, 0.01, 0.1, 0.3, (1.0).toFixed(1)];\n\t\tconst dataSets = [\n\t\t\t{ label: \"sin\", eqn: tf.sin, scale: 5 },\n\t\t\t{ label: \"cos\", eqn: tf.cos, scale: 5 },\n\t\t\t{ label: \"tanh\", eqn: tf.tanh, scale: 5 },\n\t\t];\n\n\t\t/* Destructure render */\n\t\tconst PlayButtonClick = (\n\t\t\t// eslint-disable-next-line\n\t\t\t<Fab color=\"secondary\" onClick={() => this.run()}>\n\t\t\t\t{!playing ? <PlayArrow /> : <Stop />}\n\t\t\t</Fab>\n\t\t);\n\t\tconst controlCenter = (\n\t\t\t<Box width={400} className={mode ? \"backpropmode\" : \"regular\"}>\n\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: \"rgb(245, 2, 87, 0.5)\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tControl Center\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography variant=\"h4\">Epoch: {epoch}</Typography>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\tloss:\n\t\t\t\t\t\t\t{loss == null ? \"\" : loss.toFixed(6)}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Replay />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t{PlayButtonClick}\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tcolor: speed === 0 ? \"grey\" : \"#FFC006\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcontrols: {\n\t\t\t\t\t\t\t\t\t\t\t...controls,\n\t\t\t\t\t\t\t\t\t\t\tspeed: speed === 0 ? 100 : 0,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SlowMotionVideo />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\n\t\t\t\t<Box marginTop={5}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tcolor: \"rgb(245, 2, 87, 0.5)\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tModel Initialization\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tLearning Rate\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t{lrs.map((num, i) => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tlabel={`${num}`}\n\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\tlr === num ? \"secondary\" : \"default\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelLr(num);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tData Set\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t{dataSets.map((item, i) => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\tcurve === item.label\n\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\tcurve: item.label,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.genTensorData(\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.eqn,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.scale\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t\tconst scatter = (\n\t\t\t<Box marginLeft={10}>\n\t\t\t\t<div className={mode ? \"backpropmode\" : \"regular\"}>\n\t\t\t\t\t<ScatterPlot\n\t\t\t\t\t\twidth={300}\n\t\t\t\t\t\theight={300}\n\t\t\t\t\t\tpadding={0}\n\t\t\t\t\t\tstart={-scale}\n\t\t\t\t\t\tstop={scale}\n\t\t\t\t\t\tX={X}\n\t\t\t\t\t\ty={y}\n\t\t\t\t\t\tyhat={yhat}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Box>\n\t\t);\n\n\t\treturn (\n\t\t\t<div id=\"app\">\n\t\t\t\t<AppBar\n\t\t\t\t\tposition=\"static\"\n\t\t\t\t\tstyle={{ background: \"#f50257\", color: \"white\" }}\n\t\t\t\t>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\tBackpropagation Visualizer\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\n\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" marginTop={10}>\n\t\t\t\t\t{controlCenter}\n\t\t\t\t\t<Box marginLeft={10}>\n\t\t\t\t\t\t<div className=\"regular\">\n\t\t\t\t\t\t\t<PlayGround\n\t\t\t\t\t\t\t\ttrans={trans}\n\t\t\t\t\t\t\t\tinput={X[0]}\n\t\t\t\t\t\t\t\tlabel={y[0]}\n\t\t\t\t\t\t\t\tshapedWeights={weightsData}\n\t\t\t\t\t\t\t\tshape={shape}\n\t\t\t\t\t\t\t\tbiases={biasesData}\n\t\t\t\t\t\t\t\tweights={weights}\n\t\t\t\t\t\t\t\trects={rects}\n\t\t\t\t\t\t\t\tlinks={links}\n\t\t\t\t\t\t\t\tplaying={\n\t\t\t\t\t\t\t\t\tplaying\n\t\t\t\t\t\t\t\t\t\t? speed === 0\n\t\t\t\t\t\t\t\t\t\t\t? \"edgeForward\"\n\t\t\t\t\t\t\t\t\t\t\t: \"edgeSlowed\"\n\t\t\t\t\t\t\t\t\t\t: \"edgePaused\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tshow={playing}\n\t\t\t\t\t\t\t\tmode={mode}\n\t\t\t\t\t\t\t\tbackward={\n\t\t\t\t\t\t\t\t\tthis.state.macro\n\t\t\t\t\t\t\t\t\t\t? \"edgeSlowed\"\n\t\t\t\t\t\t\t\t\t\t: \"edgeBackward\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.asyncPause();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t></PlayGround>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Box>\n\t\t\t\t\t{scatter}\n\t\t\t\t</Box>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tlet a = shape;\n\t\t\t\t\t\ta[a.length - 1] = 2;\n\t\t\t\t\t\ta.push(1);\n\t\t\t\t\t\tthis.setState({ shape: a });\n\t\t\t\t\t\tthis.initNeuralNetwork(a);\n\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tADD LAYER\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconsole.table(tf.memory());\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tMEM\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\tconst timer = (ms) =>\n\t\t\t\t\t\t\tnew Promise((res) => setTimeout(res, ms));\n\t\t\t\t\t\tlet formattedWeights = formatWeightArray(\n\t\t\t\t\t\t\tweightsData,\n\t\t\t\t\t\t\tshape\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet nn = new NeuralNetwork(\n\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\tformattedWeights,\n\t\t\t\t\t\t\tbiasesData\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tnn.forward(X[0], y[0]);\n\t\t\t\t\t\tnn.backward();\n\t\t\t\t\t\tthis.setState({ trans: nn, mode: !mode });\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t>\n\t\t\t\t\tEPOCH MODE {mode ? \"true\" : \"false\"}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}