{"version":3,"sources":["components/NN.js","components/ScatterPlot.js","App.js","reportWebVitals.js","index.js"],"names":["NN","props","state","initNeuralNetwork","bind","node","this","playing","shape","weights","slowed","svg","xScale","d3","domain","range","yScale","start","x","y","stop","link","d","rw","rh","layerProportion","ns","flatns","push","layer","length","dense","neuron","aaron","links","prevNeuron","source","target","flattenedWeights","flatten","selectAll","data","enter","append","attr","Math","pow","array","flattendArray","i","e","weightModel","revereseFlatten","console","log","weightsIndex","connections","connectionArray","w","reverse","select","children","id","Component","ScatterPlot","formattedPoints","style","a","width","height","padding","container","xAxis","scale","yAxis","call","X","yhat","dataSet","remove","plotPoints","App","loss","duringEpoch","epoch","biasData","weightsData","lr","model","seq","neurons","dlossdyhat","curve","optimizer","controls","speed","run","genTensorData","mutate","train","printParameters","reset","asyncPause","resetParameters","changeModelLr","changeModelOptimizer","optimizerChange","lrChange","tf","setState","number","max","array1","array2","map","item","reduce","b","floor","random","key","subkey","value","error","tensor","Array","from","dataSync","add","inputShape","units","activation","useBias","addModel","compile","XTensor","yTensor","sgd","timer","ms","Promise","res","setTimeout","play","fit","epochs","yhatTensor","predict","tensorToArray","meanSquaredError","eqn","scaled","biasesData","getWeights","adam","newShape","splice","lrs","toFixed","dataSets","label","PlayButtonClick","onClick","Button","AppBar","position","background","color","Toolbar","Typography","variant","Box","display","justifyContent","marginTop","Card","CardContent","CardActions","IconButton","disabled","Replay","SlowMotionVideo","Chip","num","marginLeft","biases","minWidth","marginRight","marginBottom","table","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3561d2bd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nclass NN extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t\tthis.initNeuralNetwork = this.initNeuralNetwork.bind(this);\n\t}\n\tinitNeuralNetwork(node) {\n\t\tconst { playing, shape, weights, slowed } = this.props;\n\t\tconst rw = 32;\n\t\tconst rh = 32;\n\t\tconst svg = node;\n\t\tlet xScale = d3.scaleLinear().domain([0, 100]).range([50, 750]);\n\n\t\tlet yScale = d3.scaleLinear().domain([0, 100]).range([500, 0]);\n\n\t\tlet start = { x: 50 - rw / 2, y: 250 - rh / 2 };\n\t\tlet stop = { x: 750 - rw / 2, y: 250 - rh / 2 };\n\n\t\tconst link = d3\n\t\t\t.linkHorizontal()\n\t\t\t.x((d) => d.x + rw / 2)\n\t\t\t.y((d) => d.y + rh / 2);\n\n\t\t/* First we figure our how to create the neurons */\n\t\t/* GIVEN A SHAPE OF [1,2,2,1] */\n\t\tconst layerProportion = [0, 25, 50, 75, 0];\n\t\tlet ns = [];\n\t\tlet flatns = [];\n\t\tns.push([start]);\n\t\tflatns.push(start);\n\t\tfor (let layer = 1; layer < shape.length - 1; layer++) {\n\t\t\tlet dense = [];\n\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t/* First generate neuron */\n\t\t\t\tlet aaron = {\n\t\t\t\t\tx: xScale(layerProportion[layer]) - rw / 2,\n\t\t\t\t\ty: yScale(92 - neuron * 12) - rh / 2,\n\t\t\t\t};\n\t\t\t\tdense.push(aaron);\n\t\t\t\tflatns.push(aaron);\n\t\t\t}\n\t\t\tns.push(dense);\n\t\t}\n\t\tflatns.push(stop);\n\t\tns.push([stop]);\n\n\t\t/* We start to iterate over ns */\n\t\tlet links = [];\n\t\tfor (let layer = shape.length - 1; layer > 0; layer--) {\n\t\t\tfor (\n\t\t\t\tlet prevNeuron = 0;\n\t\t\t\tprevNeuron < shape[layer - 1];\n\t\t\t\tprevNeuron++\n\t\t\t) {\n\t\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t\tlinks.push(\n\t\t\t\t\t\tlink({\n\t\t\t\t\t\t\tsource: ns[layer - 1][prevNeuron],\n\t\t\t\t\t\t\ttarget: ns[layer][neuron],\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet flattenedWeights = this.flatten(weights);\n\n\t\tsvg.selectAll(\"path\")\n\t\t\t.data(links)\n\t\t\t.enter()\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"class\", \"edgeForward\")\n\t\t\t.attr(\"stroke\", \"green\")\n\t\t\t.attr(\"stroke-width\", \"0.5\")\n\t\t\t.attr(\"d\", (d) => d);\n\n\t\tsvg.selectAll(\"path\")\n\t\t\t.data(flattenedWeights)\n\t\t\t.attr(\"stroke-width\", (d) => Math.pow(d, 2) + 0.2)\n\t\t\t.attr(\"stroke\", (d) => (d > 0 ? \"#48b778\" : \"#f50257\"));\n\n\t\tsvg.selectAll(\"rect\")\n\t\t\t.data(flatns)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", (d) => d.x)\n\t\t\t.attr(\"y\", (d) => d.y)\n\t\t\t.attr(\"width\", rw)\n\t\t\t.attr(\"height\", rh)\n\t\t\t.attr(\"class\", \"node\");\n\t\t//.on(\"click\", (e, d) => {\n\t\t//console.log(d);\n\t\t///* Now I need to pass in the weight set and bias for each neuron some how */\n\t\t//});\n\n\t\tif (!playing) {\n\t\t\tsvg.selectAll(\"path\").attr(\"class\", \"edgePaused\");\n\t\t} else if (playing) {\n\t\t\tsvg.selectAll(\"path\").attr(\n\t\t\t\t\"class\",\n\t\t\t\tslowed ? \"edgeSlowed\" : \"edgeForward\"\n\t\t\t);\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tconst height = 500;\n\t\tconst width = 800;\n\t\tconst svg = d3\n\t\t\t.select(\"#nn\")\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"overflow\", \"visible\");\n\t\t//svg.append(\"circle\").attr(\"r\", 1000);\n\n\t\tthis.initNeuralNetwork(svg);\n\t}\n\tflatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\trevereseFlatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\tperNeuron(weights, shape) {\n\t\tlet weightModel = [];\n\t\tif (weights.length > 0) {\n\t\t\tlet flattenedWeights = this.revereseFlatten(weights);\n\t\t\tconsole.log(flattenedWeights);\n\t\t\tconsole.log(weights);\n\t\t\tlet weightsIndex = 0;\n\t\t\t/* Iterate but not the input node */\n\t\t\t/*  this is an ass algo fix this you idiot  */\n\t\t\tfor (let layer = shape.length - 1; layer > 0; layer--) {\n\t\t\t\t/* Now we want to assign the weight based on number of inputs */\n\t\t\t\tlet dense = [];\n\t\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t\tlet connections = shape[layer - 1];\n\t\t\t\t\tlet connectionArray = [];\n\t\t\t\t\tfor (let w = 0; w < connections; w++) {\n\t\t\t\t\t\tconnectionArray.push(flattenedWeights[weightsIndex]);\n\t\t\t\t\t\tweightsIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tdense.push(connectionArray);\n\t\t\t\t}\n\t\t\t\tweightModel.push(dense);\n\t\t\t}\n\t\t}\n\t\treturn weightModel.reverse();\n\t}\n\tcomponentDidUpdate() {\n\t\tconst svg = d3.select(\"#nn\").select(\"svg\");\n\t\tthis.initNeuralNetwork(svg);\n\n\t\t/* If there is a change to shape do these things */\n\t\t/* First need to create a function to places all of the neurons */\n\t\t/* then need to create a function to that links all of the neurons with stroke */\n\n\t\t/* If there is no change to shape then we just need to change the link stroke */\n\t}\n\trender() {\n\t\tconst { children } = this.props;\n\t\treturn <div id=\"nn\">{children}</div>;\n\t}\n}\n\nexport default NN;\n","import React, { Component } from \"react\";\nimport style from \"./d3.css\";\nimport * as d3 from \"d3\";\n\nclass ScatterPlot extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tplotPoints(node, formattedPoints) {\n\t\t/* Now need to plot said data */\n\t\tnode.selectAll(\"circle\")\n\t\t\t.data(formattedPoints)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", (d) => d.x)\n\t\t\t.attr(\"cy\", (d) => d.y)\n\t\t\t.attr(\"r\", 2)\n\t\t\t.style(\"fill\", \"#F50257\");\n\t}\n\t/* This is where we initialize the Scatter Plot */\n\tasync componentDidMount() {\n\t\tconst { width, height, padding, start, stop } = this.props;\n\t\tconst container = d3.select(\"#nice\");\n\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis);\n\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", (height + 1) / 2)\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", (height + 1) / 2)\n\t\t\t.attr(\"class\", \"split\");\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", (width + 1) / 2)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", (width + 1) / 2)\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"class\", \"split\");\n\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"epic\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { width, height, padding, start, stop, X, y, yhat } = this.props;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#nice\").select(\"svg\");\n\t\tlet dataSet = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\tdataSet.push({\n\t\t\t\tx: xScale(X[i]),\n\t\t\t\ty: yScale(y[i]),\n\t\t\t});\n\t\t}\n\t\tlet a = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\ta.push([xScale(X[i]), yScale(yhat[i])]);\n\t\t}\n\t\tsvg.selectAll(\"circle\").remove();\n\t\tthis.plotPoints(svg, dataSet);\n\n\t\tsvg.select(\"#epic\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\t//componentDidUpdate() {\n\t//const { width, height, padding, start, stop, X, y } = this.props;\n\t//console.log(X);\n\t//console.log(y);\n\t//let xScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([0, width - 2 * padding]);\n\n\t//let yScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([height - 2 * padding, 0]);\n\t//const svg = d3.select(\"#nice\").select(\"svg\");\n\t//let dataSet = [];\n\t//for (let i = 0; i < X.length; i++) {\n\t//dataSet.push({\n\t//x: xScale(X[i]),\n\t//y: yScale(y[i]),\n\t//});\n\t//}\n\t///* Now need to plot said data */\n\t//svg.selectAll(\"circle\")\n\t//.data(dataSet)\n\t//.enter()\n\t//.append(\"circle\")\n\t//.attr(\"cx\", (d) => d.x)\n\t//.attr(\"cy\", (d) => d.y)\n\t//.attr(\"r\", 2)\n\t//.style(\"fill\", \"#F50257\");\n\t//}\n\trender() {\n\t\treturn <div id=\"nice\"></div>;\n\t}\n}\n\nexport default ScatterPlot;\n","/* \n  Donny Bertucci: @xnought\n  Date Created: 02/15/2021\n  Summary: \n    This file acts as the highest state and act as the controls \n    for the entire application\n*/\nimport React, { Component } from \"react\";\nimport {\n\tTypography,\n\tBox,\n\tAppBar,\n\tToolbar,\n\tCard,\n\tCardContent,\n\tIconButton,\n\tCardActions,\n\tChip,\n\tButton,\n} from \"@material-ui/core\";\nimport { Replay, SlowMotionVideo } from \"@material-ui/icons\";\nimport style from \"./App.css\";\nimport PlayButton from \"./components/PlayButton\";\nimport NN from \"./components/NN\";\nimport ScatterPlot from \"./components/ScatterPlot\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as d3 from \"d3\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* Treat the app state as the global state */\n\t\tthis.state = {\n\t\t\t/* data: stores the input and lables to the input */\n\t\t\tloss: null,\n\t\t\tduringEpoch: false,\n\t\t\tX: null,\n\t\t\ty: null,\n\t\t\tshape: [1, 4, 4, 1],\n\t\t\tepoch: 0,\n\t\t\tyhat: [],\n\t\t\tbiasData: [],\n\t\t\tweightsData: [],\n\t\t\tlr: 0.1,\n\t\t\tdata: {\n\t\t\t\tX: [],\n\t\t\t\ty: [],\n\t\t\t},\n\t\t\tscale: 5,\n\t\t\t/* Stores the model and model metadata */\n\t\t\tmodel: {\n\t\t\t\tseq: {},\n\t\t\t\tneurons: [],\n\t\t\t\tshape: [1, 4, 4, 1],\n\t\t\t\tloss: null,\n\t\t\t\ty: null,\n\t\t\t\tyhat: [],\n\t\t\t\tdlossdyhat: null,\n\t\t\t\tepoch: 0,\n\t\t\t\tlr: 0.01,\n\t\t\t\tcurve: \"sin\",\n\t\t\t\toptimizer: \"adam\",\n\t\t\t\tscale: 5,\n\t\t\t},\n\t\t\t/* Stores the controls */\n\t\t\tcontrols: {\n\t\t\t\tplaying: false,\n\t\t\t\tspeed: 0,\n\t\t\t},\n\t\t};\n\n\t\t/* Prototype: Functions Binds to \"this\" */\n\t\t/* Main Logic */\n\t\tthis.run = this.run.bind(this);\n\t\t/* Neural Network Logic */\n\t\tthis.genTensorData = this.genTensorData.bind(this);\n\t\t/* Mutators of State */\n\t\tthis.mutate = this.mutate.bind(this);\n\n\t\tthis.train = this.train.bind(this);\n\t\tthis.printParameters = this.printParameters.bind(this);\n\t\tthis.reset = this.reset.bind(this);\n\t\tthis.asyncPause = this.asyncPause.bind(this);\n\t\tthis.resetParameters = this.resetParameters.bind(this);\n\t\tthis.changeModelLr = this.changeModelLr.bind(this);\n\t\tthis.changeModelOptimizer = this.changeModelOptimizer.bind(this);\n\t}\n\tasync changeModelOptimizer(optimizerChange) {}\n\n\tchangeModelLr(lrChange) {\n\t\ttf.tidy(() => {\n\t\t\tthis.setState({ lr: lrChange });\n\t\t\treturn undefined;\n\t\t});\n\t}\n\t/* not binded to \"this\" functions */\n\tReLU(number) {\n\t\treturn Math.max(0, number);\n\t}\n\tmseDerivative(yhat, y) {\n\t\treturn 2 * (yhat - y);\n\t}\n\tmseLoss(yhat, y) {\n\t\treturn Math.pow(yhat - y, 2);\n\t}\n\tmult(array1, array2) {\n\t\treturn array1.map((item, i) => {\n\t\t\treturn item * array2[i];\n\t\t});\n\t}\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tgetRandomInt(max) {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t/* \n    Name: start\n    Purpose: start the main logic and choose to stop\n    @mutate: this.state.controls.playing\n  */\n\tasync run() {\n\t\tlet playing = !this.state.controls.playing;\n\t\tthis.mutate(\"controls\", \"playing\", playing);\n\t\tif (playing === true) {\n\t\t\tawait this.train(this.state.data.X, this.state.data.y);\n\t\t\tconsole.log(\"epic\");\n\t\t}\n\t}\n\n\t/* \n    Name: mutate\n    @param key: corresponds to this.state.key\n    @param subkey: corresponds to this.state.key.subkey\n    @param value\n    @mutate: this.state.key.subkey with value\n  */\n\tmutate(key, subkey, value) {\n\t\t/* copy of the state */\n\t\ttf.tidy(() => {\n\t\t\tlet state = { ...this.state };\n\t\t\t/* If this.state.key.subkey exists */\n\t\t\tif (key in state && subkey in state[key]) {\n\t\t\t\t/* Mutate the state */\n\t\t\t\tstate[key][subkey] = value;\n\t\t\t\tthis.setState({ state });\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Could not be found in state\");\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\ttensorToArray(tensor) {\n\t\treturn Array.from(tensor.dataSync());\n\t}\n\n\taddModel(model) {\n\t\treturn tf.tidy(() => {\n\t\t\tlet shape = this.state.shape;\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tinputShape: [1],\n\t\t\t\t\tunits: shape[1],\n\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\tfor (let layer = 2; layer < shape.length - 1; layer++) {\n\t\t\t\tmodel.add(\n\t\t\t\t\ttf.layers.dense({\n\t\t\t\t\t\tunits: shape[layer],\n\t\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\t\tuseBias: true,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tunits: 1,\n\t\t\t\t\tactivation: \"linear\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn model;\n\t\t});\n\t}\n\tmodelCompile(optimizer, lr) {\n\t\tlet model = tf.sequential();\n\t\tthis.addModel(model);\n\t\tmodel.compile({\n\t\t\toptimizer: optimizer(lr),\n\t\t\tloss: \"meanSquaredError\",\n\t\t});\n\t\treturn model;\n\t}\n\tasync train(X, y) {\n\t\tconst XTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(X);\n\t\t});\n\t\tconst yTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(y);\n\t\t});\n\n\t\tlet model = tf.sequential();\n\t\tthis.addModel(model);\n\t\tmodel.compile({\n\t\t\toptimizer: tf.train.sgd(0.01),\n\t\t\tloss: \"meanSquaredError\",\n\t\t});\n\n\t\t//this.setState({ epoch: 0 });\n\t\t////await model.fit(X, y, { epochs: 1000 });\n\t\t////model.predict(X);\n\t\t////console.log(yArr);\n\t\t////console.log(XArr);\n\t\tconst timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\t\t///* Until broken by user */\n\t\tlet play = this.state.controls.playing;\n\t\t////let epoch = 0;\n\t\twhile (play !== false) {\n\t\t\tthis.setState({ duringEpoch: true });\n\t\t\t//let a = performance.now();\n\t\t\t/* Destructure neccesary state */\n\t\t\tconst { playing /* speed */ } = this.state.controls;\n\t\t\t//const { epoch } = this.state.model;\n\t\t\tplay = playing;\n\t\t\t//this.setState({ duringEpoch: true });\n\t\t\t//this.mutate(\"model\", \"epoch\", epoch + 1);\n\t\t\t//while(playing) {\n\t\t\t//let t0 = performance.now();\n\t\t\tawait model.fit(XTensor, yTensor, {\n\t\t\t\tepochs: 1,\n\t\t\t});\n\t\t\t//let t1 = performance.now();\n\t\t\t//console.log(`FIT SPEED: ${t1 - t0}`);\n\t\t\t//}\n\n\t\t\ttf.tidy(() => {\n\t\t\t\tlet yhatTensor = model.predict(XTensor);\n\t\t\t\tlet yhat = this.tensorToArray(yhatTensor);\n\t\t\t\tlet loss = tf.losses.meanSquaredError(y, yhat).dataSync()[0];\n\t\t\t\tthis.printParameters(model, loss, yhat, this.state.epoch + 1);\n\t\t\t\t//this.setState({\n\t\t\t\t////model: {\n\t\t\t\t////...this.state.model,\n\t\t\t\t////yhat,\n\t\t\t\t////loss,\n\t\t\t\t////epoch: this.state.model.epoch + 1,\n\t\t\t\t////},\n\t\t\t\t//});\n\t\t\t\t//let b = performance.now();\n\t\t\t\t//console.log(`SPEED: ${b - a}`);\n\t\t\t\t//console.log(`epoch: ${this.state.model.epoch}`);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\tthis.setState({ duringEpoch: false });\n\t\t\tawait timer(0);\n\t\t}\n\t\ttf.dispose(model);\n\t\ttf.dispose(XTensor);\n\t\ttf.dispose(yTensor);\n\t\t//console.table(tf.memory());\n\t}\n\tasync genTensorData(eqn, scaled) {\n\t\tawait tf.ready();\n\t\ttf.tidy(() => {\n\t\t\tlet XTensor = tf.linspace(-this.state.scale, this.state.scale, 50);\n\t\t\tlet yTensor;\n\t\t\tyTensor = tf.mul(eqn(XTensor), scaled);\n\t\t\tlet yhatTensor = tf.zerosLike(XTensor);\n\t\t\tlet X = this.tensorToArray(XTensor);\n\t\t\tlet y = this.tensorToArray(yTensor);\n\t\t\tlet yhat = this.tensorToArray(yhatTensor);\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\tdata: { X, y },\n\t\t\t\tyhat,\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t}\n\tprintParameters(model, loss, yhat, epoch) {\n\t\t//let a = performance.now();\n\t\tlet weightsData = [];\n\t\tlet biasesData = [];\n\t\tfor (let i = 0; i < model.getWeights().length; i++) {\n\t\t\t(i % 2 === 0 ? weightsData : biasesData).push(\n\t\t\t\tArray.from(model.getWeights()[i].dataSync())\n\t\t\t);\n\t\t}\n\n\t\tthis.setState({ weightsData, loss, yhat, epoch });\n\t\t//let b = performance.now();\n\t\t//console.log(`PRINT SPEED: ${b - a}`);\n\t\t//for (let layer = 1; layer < model.layers.length; layer++) {\n\t\t//console.log(`Layer: ${layer} `);\n\t\t//model.layers[layer].getWeights()[0].print();\n\n\t\t//model.layers[layer].getWeights()[1].print();\n\t\t//}\n\t}\n\tasync asyncPause() {\n\t\tthis.mutate(\"controls\", \"playing\", false);\n\t}\n\tasync resetParameters(scale) {\n\t\tlet eqn;\n\t\tlet optimizer;\n\t\tif (this.state.model.curve === \"sin\") {\n\t\t\teqn = tf.sin;\n\t\t} else if (this.state.model.curve === \"tanh\") {\n\t\t\teqn = tf.tanh;\n\t\t} else if (this.state.model.curve === \"cos\") {\n\t\t\teqn = tf.cos;\n\t\t}\n\t\tif (this.state.model.optimizer === \"adam\") {\n\t\t\toptimizer = tf.train.adam;\n\t\t} else if (this.state.model.optimizer === \"sgd\") {\n\t\t\toptimizer = tf.train.sgd;\n\t\t}\n\t\tawait this.genTensorData(eqn, scale);\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tepoch: 0,\n\t\t\tloss: null,\n\t\t});\n\t\ttf.dispose(optimizer);\n\t}\n\n\tasync reset(scale) {\n\t\tthis.asyncPause();\n\t\tthis.resetParameters(scale);\n\t\t//;this.mutate(\"model\", \"seq\", model);\n\t\t//;this.setState({ yhat: [] });\n\t\t//;this.mutate(\"model\", \"epoch\", 0);\n\t}\n\tasync componentDidMount() {\n\t\ttf.setBackend(\"cpu\");\n\t\tconsole.log(tf.getBackend());\n\t\t/* First lets choose the data */\n\t\t//document.body.style.zoom = \"75%\";\n\t\tthis.genTensorData(tf.sin, this.state.model.scale);\n\t\t//let model = this.modelCompile(tf.train.adam, this.state.model.lr);\n\t\t//this.mutate(\"model\", \"seq\", model);\n\t\t//this.printParameters(model);\n\t\t//tf.dispose(model);\n\t\tconsole.log(tf.backend());\n\t}\n\tshouldComponentUpdate() {\n\t\tif (this.state.duringEpoch) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\trender() {\n\t\t/* Destructure State*/\n\t\tconst { model, controls } = this.state;\n\n\t\t/* Destructuring model */\n\t\tconst { epoch, loss } = model;\n\t\tlet shape = this.state.shape;\n\n\t\tlet newShape = [...shape];\n\t\tnewShape.splice(0, 1);\n\t\tnewShape.splice(newShape.length - 1, 1);\n\t\t//console.log(newShape);\n\t\tconst lrs = [0.001, 0.01, 0.1, 0.3, (1.0).toFixed(1)];\n\t\tconst optimizers = [\"adam\", \"sgd\"];\n\t\tconst dataSets = [\n\t\t\t{ label: \"sin\", eqn: tf.sin, scale: 5 },\n\t\t\t{ label: \"cos\", eqn: tf.cos, scale: 5 },\n\t\t\t{ label: \"tanh\", eqn: tf.tanh, scale: 5 },\n\t\t];\n\n\t\t/* Destructuring of model */\n\n\t\t/* Destructure render */\n\t\tconst PlayButtonClick = (\n\t\t\t// eslint-disable-next-line\n\t\t\t<a\n\t\t\t\tonClick={async () => {\n\t\t\t\t\tawait this.run();\n\t\t\t\t\tconsole.log(\"nice\");\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Button>CLick ME</Button>\n\t\t\t</a>\n\t\t);\n\n\t\treturn (\n\t\t\t<div id=\"app\">\n\t\t\t\t<AppBar\n\t\t\t\t\tposition=\"static\"\n\t\t\t\t\tstyle={{ background: \"#f50257\", color: \"white\" }}\n\t\t\t\t>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\tBackpropagation Visualizer\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\n\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" marginTop={10}>\n\t\t\t\t\t<Box width={400}>\n\t\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tcolor: \"rgb(245, 2, 87, 0.5)\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tControl Center\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\n\t\t\t\t\t\t\t\t\tEpoch: {this.state.epoch}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tloss:\n\t\t\t\t\t\t\t\t\t{this.state.loss == null\n\t\t\t\t\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t\t\t\t\t: this.state.loss.toFixed(6)}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\tdisabled={this.state.controls.playing}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(this.state.scale);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Replay />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t{PlayButtonClick}\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.speed === 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"grey\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"#FFC006\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.mutate(\n\t\t\t\t\t\t\t\t\t\t\t\t\"controls\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"speed\",\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.speed === 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? 100\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<SlowMotionVideo />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</Card>\n\n\t\t\t\t\t\t<Box marginTop={5}>\n\t\t\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"rgb(245, 2, 87, 0.5)\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tModel Initialization\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\t\t\tOptimizer\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t{optimizers.map((optimizer, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.playing\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={optimizer}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.model\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optimizer === optimizer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.mutate(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"model\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"optimizer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet a = tf.train.sgd;\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet b = tf.train.adam;\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelOptimizer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer === \"sgd\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: b\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.dispose(a);\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.dispose(b);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\t\t\tLearning Rate\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t{lrs.map((num, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={`${num}`}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.lr === num\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelLr(num);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\t\t\tData Set\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t{dataSets.map((item, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.playing\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.model.curve ===\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ shape });\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.mutate(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"model\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"curve\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.genTensorData(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.eqn,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box marginLeft={10}>\n\t\t\t\t\t\t<NN\n\t\t\t\t\t\t\tweights={this.state.weightsData}\n\t\t\t\t\t\t\tbiases={this.state.biasData}\n\t\t\t\t\t\t\tshape={this.state.shape}\n\t\t\t\t\t\t\tplaying={this.state.controls.playing}\n\t\t\t\t\t\t\tslowed={this.state.controls.speed !== 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card variant=\"outlined\" style={{ minWidth: 875 }}>\n\t\t\t\t\t\t\t\t<Box justifyContent=\"start\" display=\"flex\">\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Box marginRight={11.5}>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = this.state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!(shape.length > 4)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.splice(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.length - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.push(2);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.push(1);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"path\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rect\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tAdd Layer\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t{newShape.map((num, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Box key={i} marginRight={17}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box marginBottom={1}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"–\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet e = i + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] === 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? shape[e]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: shape[e] -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (shape[e] > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"path\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rect\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"+\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet e = i + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] >= 8\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? shape[e]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: shape[e] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (shape[i] <= 8) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"path\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rect\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = model.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (shape.length > 2) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.splice(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.length - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.splice(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.length - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.push(1);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\"path\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\"rect\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tRemove Layer\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</NN>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box marginLeft={10}>\n\t\t\t\t\t\t<ScatterPlot\n\t\t\t\t\t\t\twidth={300}\n\t\t\t\t\t\t\theight={300}\n\t\t\t\t\t\t\tpadding={0}\n\t\t\t\t\t\t\tstart={-this.state.model.scale}\n\t\t\t\t\t\t\tstop={this.state.model.scale}\n\t\t\t\t\t\t\tX={this.state.data.X}\n\t\t\t\t\t\t\ty={this.state.data.y}\n\t\t\t\t\t\t\tyhat={this.state.yhat}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconsole.table(tf.memory());\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tMEM\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}