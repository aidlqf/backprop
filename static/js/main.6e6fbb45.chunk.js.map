{"version":3,"sources":["components/PlayButton.js","components/NN.js","components/ScatterPlot.js","App.js","reportWebVitals.js","index.js"],"names":["PlayButton","playing","Fab","style","background","color","Stop","PlayArrow","NN","props","state","initNeuralNetwork","bind","node","this","shape","weights","slowed","svg","xScale","d3","domain","range","yScale","start","x","y","stop","link","d","rw","rh","layerProportion","ns","flatns","push","layer","length","dense","neuron","aaron","links","prevNeuron","source","target","flattenedWeights","flatten","selectAll","data","enter","append","attr","Math","pow","array","flattendArray","i","e","weightModel","revereseFlatten","console","log","weightsIndex","connections","connectionArray","w","reverse","select","children","id","Component","ScatterPlot","formattedPoints","a","width","height","padding","container","xAxis","scale","yAxis","call","X","yhat","dataSet","remove","plotPoints","tf","App","loss","duringEpoch","epoch","biasData","weightsData","lr","model","seq","neurons","dlossdyhat","curve","optimizer","controls","speed","run","genTensorData","mutate","train","printParameters","reset","asyncPause","resetParameters","changeModelLr","changeModelOptimizer","optimizerChange","lrChange","setState","number","max","array1","array2","map","item","reduce","b","floor","random","key","subkey","value","error","tensor","Array","from","dataSync","add","inputShape","units","activation","useBias","addModel","compile","XTensor","yTensor","modelCompile","adam","play","fit","epochs","yhatTensor","predict","tensorToArray","meanSquaredError","eqn","scaled","biasesData","getWeights","sgd","newShape","splice","lrs","toFixed","dataSets","label","PlayButtonClick","onClick","AppBar","position","Toolbar","Typography","variant","Box","display","justifyContent","marginTop","Card","CardContent","CardActions","IconButton","disabled","Replay","SlowMotionVideo","Chip","num","marginLeft","biases","minWidth","marginRight","Button","marginBottom","table","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e6fbb45.chunk.js","sourcesContent":["/* \n\tDonny Bertucci: @xnought\n\tDate Created: 02/15/2021\n\tSummary: \n\t\tFunctional Component for PlayButton\n\t@Props: playing: false or true\n*/\nimport { Fab } from \"@material-ui/core\";\nimport { PlayArrow, Stop } from \"@material-ui/icons\";\n\nconst PlayButton = ({ playing }) => (\n\t<Fab\n\t\tstyle={{\n\t\t\tbackground: playing ? \"#f44336\" : \"#4caf50\",\n\t\t\tcolor: \"#FFFFFF\",\n\t\t}}\n\t>\n\t\t{playing ? <Stop /> : <PlayArrow />}\n\t</Fab>\n);\n\nexport default PlayButton;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nclass NN extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t\tthis.initNeuralNetwork = this.initNeuralNetwork.bind(this);\n\t}\n\tinitNeuralNetwork(node) {\n\t\tconst { playing, shape, weights, slowed } = this.props;\n\t\tconst rw = 32;\n\t\tconst rh = 32;\n\t\tconst svg = node;\n\t\tlet xScale = d3.scaleLinear().domain([0, 100]).range([50, 750]);\n\n\t\tlet yScale = d3.scaleLinear().domain([0, 100]).range([500, 0]);\n\n\t\tlet start = { x: 50 - rw / 2, y: 250 - rh / 2 };\n\t\tlet stop = { x: 750 - rw / 2, y: 250 - rh / 2 };\n\n\t\tconst link = d3\n\t\t\t.linkHorizontal()\n\t\t\t.x((d) => d.x + rw / 2)\n\t\t\t.y((d) => d.y + rh / 2);\n\n\t\t/* First we figure our how to create the neurons */\n\t\t/* GIVEN A SHAPE OF [1,2,2,1] */\n\t\tconst layerProportion = [0, 25, 50, 75, 0];\n\t\tlet ns = [];\n\t\tlet flatns = [];\n\t\tns.push([start]);\n\t\tflatns.push(start);\n\t\tfor (let layer = 1; layer < shape.length - 1; layer++) {\n\t\t\tlet dense = [];\n\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t/* First generate neuron */\n\t\t\t\tlet aaron = {\n\t\t\t\t\tx: xScale(layerProportion[layer]) - rw / 2,\n\t\t\t\t\ty: yScale(92 - neuron * 12) - rh / 2,\n\t\t\t\t};\n\t\t\t\tdense.push(aaron);\n\t\t\t\tflatns.push(aaron);\n\t\t\t}\n\t\t\tns.push(dense);\n\t\t}\n\t\tflatns.push(stop);\n\t\tns.push([stop]);\n\n\t\t/* We start to iterate over ns */\n\t\tlet links = [];\n\t\tfor (let layer = shape.length - 1; layer > 0; layer--) {\n\t\t\tfor (\n\t\t\t\tlet prevNeuron = 0;\n\t\t\t\tprevNeuron < shape[layer - 1];\n\t\t\t\tprevNeuron++\n\t\t\t) {\n\t\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t\tlinks.push(\n\t\t\t\t\t\tlink({\n\t\t\t\t\t\t\tsource: ns[layer - 1][prevNeuron],\n\t\t\t\t\t\t\ttarget: ns[layer][neuron],\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet flattenedWeights = this.flatten(weights);\n\n\t\tsvg.selectAll(\"path\")\n\t\t\t.data(links)\n\t\t\t.enter()\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"class\", \"edgeForward\")\n\t\t\t.attr(\"stroke\", \"green\")\n\t\t\t.attr(\"stroke-width\", \"0.5\")\n\t\t\t.attr(\"d\", (d) => d);\n\n\t\tsvg.selectAll(\"path\")\n\t\t\t.data(flattenedWeights)\n\t\t\t.attr(\"stroke-width\", (d) => Math.pow(d, 2) + 0.2)\n\t\t\t.attr(\"stroke\", (d) => (d > 0 ? \"#48b778\" : \"#f50257\"));\n\n\t\tsvg.selectAll(\"rect\")\n\t\t\t.data(flatns)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", (d) => d.x)\n\t\t\t.attr(\"y\", (d) => d.y)\n\t\t\t.attr(\"width\", rw)\n\t\t\t.attr(\"height\", rh)\n\t\t\t.attr(\"class\", \"node\");\n\t\t//.on(\"click\", (e, d) => {\n\t\t//console.log(d);\n\t\t///* Now I need to pass in the weight set and bias for each neuron some how */\n\t\t//});\n\n\t\tif (!playing) {\n\t\t\tsvg.selectAll(\"path\").attr(\"class\", \"edgePaused\");\n\t\t} else if (playing) {\n\t\t\tsvg.selectAll(\"path\").attr(\n\t\t\t\t\"class\",\n\t\t\t\tslowed ? \"edgeSlowed\" : \"edgeForward\"\n\t\t\t);\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tconst height = 500;\n\t\tconst width = 800;\n\t\tconst svg = d3\n\t\t\t.select(\"#nn\")\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"overflow\", \"visible\");\n\t\t//svg.append(\"circle\").attr(\"r\", 1000);\n\n\t\tthis.initNeuralNetwork(svg);\n\t}\n\tflatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\trevereseFlatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\tperNeuron(weights, shape) {\n\t\tlet weightModel = [];\n\t\tif (weights.length > 0) {\n\t\t\tlet flattenedWeights = this.revereseFlatten(weights);\n\t\t\tconsole.log(flattenedWeights);\n\t\t\tconsole.log(weights);\n\t\t\tlet weightsIndex = 0;\n\t\t\t/* Iterate but not the input node */\n\t\t\t/*  this is an ass algo fix this you idiot  */\n\t\t\tfor (let layer = shape.length - 1; layer > 0; layer--) {\n\t\t\t\t/* Now we want to assign the weight based on number of inputs */\n\t\t\t\tlet dense = [];\n\t\t\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\t\t\tlet connections = shape[layer - 1];\n\t\t\t\t\tlet connectionArray = [];\n\t\t\t\t\tfor (let w = 0; w < connections; w++) {\n\t\t\t\t\t\tconnectionArray.push(flattenedWeights[weightsIndex]);\n\t\t\t\t\t\tweightsIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tdense.push(connectionArray);\n\t\t\t\t}\n\t\t\t\tweightModel.push(dense);\n\t\t\t}\n\t\t}\n\t\treturn weightModel.reverse();\n\t}\n\tcomponentDidUpdate() {\n\t\tconst svg = d3.select(\"#nn\").select(\"svg\");\n\t\tthis.initNeuralNetwork(svg);\n\n\t\t/* If there is a change to shape do these things */\n\t\t/* First need to create a function to places all of the neurons */\n\t\t/* then need to create a function to that links all of the neurons with stroke */\n\n\t\t/* If there is no change to shape then we just need to change the link stroke */\n\t}\n\trender() {\n\t\tconst { children } = this.props;\n\t\treturn <div id=\"nn\">{children}</div>;\n\t}\n}\n\nexport default NN;\n","import React, { Component } from \"react\";\nimport style from \"./d3.css\";\nimport * as d3 from \"d3\";\n\nclass ScatterPlot extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tplotPoints(node, formattedPoints) {\n\t\t/* Now need to plot said data */\n\t\tnode.selectAll(\"circle\")\n\t\t\t.data(formattedPoints)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", (d) => d.x)\n\t\t\t.attr(\"cy\", (d) => d.y)\n\t\t\t.attr(\"r\", 2)\n\t\t\t.style(\"fill\", \"#F50257\");\n\t}\n\t/* This is where we initialize the Scatter Plot */\n\tasync componentDidMount() {\n\t\tconst { width, height, padding, start, stop } = this.props;\n\t\tconst container = d3.select(\"#nice\");\n\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis);\n\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", (height + 1) / 2)\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", (height + 1) / 2)\n\t\t\t.attr(\"class\", \"split\");\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", (width + 1) / 2)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", (width + 1) / 2)\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"class\", \"split\");\n\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"epic\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { width, height, padding, start, stop, X, y, yhat } = this.props;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#nice\").select(\"svg\");\n\t\tlet dataSet = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\tdataSet.push({\n\t\t\t\tx: xScale(X[i]),\n\t\t\t\ty: yScale(y[i]),\n\t\t\t});\n\t\t}\n\t\tlet a = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\ta.push([xScale(X[i]), yScale(yhat[i])]);\n\t\t}\n\t\tsvg.selectAll(\"circle\").remove();\n\t\tthis.plotPoints(svg, dataSet);\n\n\t\tsvg.select(\"#epic\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\t//componentDidUpdate() {\n\t//const { width, height, padding, start, stop, X, y } = this.props;\n\t//console.log(X);\n\t//console.log(y);\n\t//let xScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([0, width - 2 * padding]);\n\n\t//let yScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([height - 2 * padding, 0]);\n\t//const svg = d3.select(\"#nice\").select(\"svg\");\n\t//let dataSet = [];\n\t//for (let i = 0; i < X.length; i++) {\n\t//dataSet.push({\n\t//x: xScale(X[i]),\n\t//y: yScale(y[i]),\n\t//});\n\t//}\n\t///* Now need to plot said data */\n\t//svg.selectAll(\"circle\")\n\t//.data(dataSet)\n\t//.enter()\n\t//.append(\"circle\")\n\t//.attr(\"cx\", (d) => d.x)\n\t//.attr(\"cy\", (d) => d.y)\n\t//.attr(\"r\", 2)\n\t//.style(\"fill\", \"#F50257\");\n\t//}\n\trender() {\n\t\treturn <div id=\"nice\"></div>;\n\t}\n}\n\nexport default ScatterPlot;\n","/* \n  Donny Bertucci: @xnought\n  Date Created: 02/15/2021\n  Summary: \n    This file acts as the highest state and act as the controls \n    for the entire application\n*/\nimport React, { Component } from \"react\";\nimport {\n\tTypography,\n\tBox,\n\tAppBar,\n\tToolbar,\n\tCard,\n\tCardContent,\n\tIconButton,\n\tCardActions,\n\tChip,\n\tButton,\n} from \"@material-ui/core\";\nimport { Replay, SlowMotionVideo } from \"@material-ui/icons\";\nimport style from \"./App.css\";\nimport PlayButton from \"./components/PlayButton\";\nimport NN from \"./components/NN\";\nimport ScatterPlot from \"./components/ScatterPlot\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport * as d3 from \"d3\";\ntf.setBackend(\"webgl\");\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* Treat the app state as the global state */\n\t\tthis.state = {\n\t\t\t/* data: stores the input and lables to the input */\n\t\t\tloss: null,\n\t\t\tduringEpoch: false,\n\t\t\tX: null,\n\t\t\ty: null,\n\t\t\tshape: [1, 4, 4, 1],\n\t\t\tepoch: 0,\n\t\t\tyhat: [],\n\t\t\tbiasData: [],\n\t\t\tweightsData: [],\n\t\t\tlr: 0.1,\n\t\t\tdata: {\n\t\t\t\tX: [],\n\t\t\t\ty: [],\n\t\t\t},\n\t\t\tscale: 5,\n\t\t\t/* Stores the model and model metadata */\n\t\t\tmodel: {\n\t\t\t\tseq: {},\n\t\t\t\tneurons: [],\n\t\t\t\tshape: [1, 4, 4, 1],\n\t\t\t\tloss: null,\n\t\t\t\ty: null,\n\t\t\t\tyhat: [],\n\t\t\t\tdlossdyhat: null,\n\t\t\t\tepoch: 0,\n\t\t\t\tlr: 0.01,\n\t\t\t\tcurve: \"sin\",\n\t\t\t\toptimizer: \"adam\",\n\t\t\t\tscale: 5,\n\t\t\t},\n\t\t\t/* Stores the controls */\n\t\t\tcontrols: {\n\t\t\t\tplaying: false,\n\t\t\t\tspeed: 0,\n\t\t\t},\n\t\t};\n\n\t\t/* Prototype: Functions Binds to \"this\" */\n\t\t/* Main Logic */\n\t\tthis.run = this.run.bind(this);\n\t\t/* Neural Network Logic */\n\t\tthis.genTensorData = this.genTensorData.bind(this);\n\t\t/* Mutators of State */\n\t\tthis.mutate = this.mutate.bind(this);\n\n\t\tthis.train = this.train.bind(this);\n\t\tthis.printParameters = this.printParameters.bind(this);\n\t\tthis.reset = this.reset.bind(this);\n\t\tthis.asyncPause = this.asyncPause.bind(this);\n\t\tthis.resetParameters = this.resetParameters.bind(this);\n\t\tthis.changeModelLr = this.changeModelLr.bind(this);\n\t\tthis.changeModelOptimizer = this.changeModelOptimizer.bind(this);\n\t}\n\tasync changeModelOptimizer(optimizerChange) {}\n\n\tchangeModelLr(lrChange) {\n\t\ttf.tidy(() => {\n\t\t\tthis.setState({ lr: lrChange });\n\t\t\treturn undefined;\n\t\t});\n\t}\n\t/* not binded to \"this\" functions */\n\tReLU(number) {\n\t\treturn Math.max(0, number);\n\t}\n\tmseDerivative(yhat, y) {\n\t\treturn 2 * (yhat - y);\n\t}\n\tmseLoss(yhat, y) {\n\t\treturn Math.pow(yhat - y, 2);\n\t}\n\tmult(array1, array2) {\n\t\treturn array1.map((item, i) => {\n\t\t\treturn item * array2[i];\n\t\t});\n\t}\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tgetRandomInt(max) {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t/* \n    Name: start\n    Purpose: start the main logic and choose to stop\n    @mutate: this.state.controls.playing\n  */\n\tasync run() {\n\t\tlet playing = !this.state.controls.playing;\n\t\tthis.mutate(\"controls\", \"playing\", playing);\n\t\tif (playing === true) {\n\t\t\tawait this.train(this.state.data.X, this.state.data.y);\n\t\t\t//tf.tidy(() => {\n\t\t\t//tf.tensor([1, 2, 3]).print();\n\t\t\t//return undefined;\n\t\t\t//});\n\t\t}\n\t\t//await this.main();\n\t}\n\n\t/* \n    Name: mutate\n    @param key: corresponds to this.state.key\n    @param subkey: corresponds to this.state.key.subkey\n    @param value\n    @mutate: this.state.key.subkey with value\n  */\n\tmutate(key, subkey, value) {\n\t\t/* copy of the state */\n\t\ttf.tidy(() => {\n\t\t\tlet state = { ...this.state };\n\t\t\t/* If this.state.key.subkey exists */\n\t\t\tif (key in state && subkey in state[key]) {\n\t\t\t\t/* Mutate the state */\n\t\t\t\tstate[key][subkey] = value;\n\t\t\t\tthis.setState({ state });\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Could not be found in state\");\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\ttensorToArray(tensor) {\n\t\treturn Array.from(tensor.dataSync());\n\t}\n\n\taddModel(model) {\n\t\treturn tf.tidy(() => {\n\t\t\tlet shape = this.state.shape;\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tinputShape: [1],\n\t\t\t\t\tunits: shape[1],\n\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\tfor (let layer = 2; layer < shape.length - 1; layer++) {\n\t\t\t\tmodel.add(\n\t\t\t\t\ttf.layers.dense({\n\t\t\t\t\t\tunits: shape[layer],\n\t\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\t\tuseBias: true,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tunits: 1,\n\t\t\t\t\tactivation: \"linear\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn model;\n\t\t});\n\t}\n\tmodelCompile(optimizer, lr) {\n\t\tlet model = tf.sequential();\n\t\tthis.addModel(model);\n\t\tmodel.compile({\n\t\t\toptimizer: optimizer(lr),\n\t\t\tloss: \"meanSquaredError\",\n\t\t});\n\t\treturn model;\n\t}\n\tasync train(X, y) {\n\t\tconst XTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(X);\n\t\t});\n\t\tconst yTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(y);\n\t\t});\n\n\t\tconst model = this.modelCompile(tf.train.adam, this.state.lr);\n\t\tthis.setState({ epoch: 0 });\n\t\t//await model.fit(X, y, { epochs: 1000 });\n\t\t//model.predict(X);\n\t\t//console.log(yArr);\n\t\t//console.log(XArr);\n\t\t//const timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\t\t/* Until broken by user */\n\t\tlet play = this.state.controls.playing;\n\t\t//let epoch = 0;\n\t\twhile (play !== false) {\n\t\t\tthis.setState({ duringEpoch: true });\n\t\t\t//let a = performance.now();\n\t\t\t/* Destructure neccesary state */\n\t\t\tconst { playing /* speed */ } = this.state.controls;\n\t\t\t//const { epoch } = this.state.model;\n\t\t\tplay = playing;\n\t\t\t//this.setState({ duringEpoch: true });\n\t\t\t//this.mutate(\"model\", \"epoch\", epoch + 1);\n\t\t\t//while(playing) {\n\t\t\t//let t0 = performance.now();\n\t\t\tawait model.fit(XTensor, yTensor, {\n\t\t\t\tepochs: 1,\n\t\t\t});\n\t\t\t//let t1 = performance.now();\n\t\t\t//console.log(`FIT SPEED: ${t1 - t0}`);\n\t\t\t//}\n\n\t\t\ttf.tidy(() => {\n\t\t\t\tlet yhatTensor = model.predict(XTensor);\n\t\t\t\tlet yhat = this.tensorToArray(yhatTensor);\n\t\t\t\tlet loss = tf.losses.meanSquaredError(y, yhat).dataSync()[0];\n\t\t\t\tthis.printParameters(model, loss, yhat, this.state.epoch + 1);\n\t\t\t\t//this.setState({\n\t\t\t\t////model: {\n\t\t\t\t////...this.state.model,\n\t\t\t\t////yhat,\n\t\t\t\t////loss,\n\t\t\t\t////epoch: this.state.model.epoch + 1,\n\t\t\t\t////},\n\t\t\t\t//});\n\t\t\t\t//let b = performance.now();\n\t\t\t\t//console.log(`SPEED: ${b - a}`);\n\t\t\t\t//console.log(`epoch: ${this.state.model.epoch}`);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\tthis.setState({ duringEpoch: false });\n\t\t}\n\t\ttf.dispose(model);\n\t\ttf.dispose(XTensor);\n\t\ttf.dispose(yTensor);\n\t\t//console.table(tf.memory());\n\t}\n\tasync genTensorData(eqn, scaled) {\n\t\tawait tf.ready();\n\t\ttf.tidy(() => {\n\t\t\tlet XTensor = tf.linspace(-this.state.scale, this.state.scale, 50);\n\t\t\tlet yTensor;\n\t\t\tyTensor = tf.mul(eqn(XTensor), scaled);\n\t\t\tlet yhatTensor = tf.zerosLike(XTensor);\n\t\t\tlet X = this.tensorToArray(XTensor);\n\t\t\tlet y = this.tensorToArray(yTensor);\n\t\t\tlet yhat = this.tensorToArray(yhatTensor);\n\t\t\tthis.setState({\n\t\t\t\t...this.state,\n\t\t\t\tdata: { X, y },\n\t\t\t\tyhat,\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t}\n\tprintParameters(model, loss, yhat, epoch) {\n\t\t//let a = performance.now();\n\t\tlet weightsData = [];\n\t\tlet biasesData = [];\n\t\tfor (let i = 0; i < model.getWeights().length; i++) {\n\t\t\t(i % 2 === 0 ? weightsData : biasesData).push(\n\t\t\t\tArray.from(model.getWeights()[i].dataSync())\n\t\t\t);\n\t\t}\n\n\t\tthis.setState({ weightsData, loss, yhat, epoch });\n\t\t//let b = performance.now();\n\t\t//console.log(`PRINT SPEED: ${b - a}`);\n\t\t//for (let layer = 1; layer < model.layers.length; layer++) {\n\t\t//console.log(`Layer: ${layer} `);\n\t\t//model.layers[layer].getWeights()[0].print();\n\n\t\t//model.layers[layer].getWeights()[1].print();\n\t\t//}\n\t}\n\tasync asyncPause() {\n\t\tthis.mutate(\"controls\", \"playing\", false);\n\t}\n\tasync resetParameters(scale) {\n\t\tlet eqn;\n\t\tlet optimizer;\n\t\tif (this.state.model.curve === \"sin\") {\n\t\t\teqn = tf.sin;\n\t\t} else if (this.state.model.curve === \"tanh\") {\n\t\t\teqn = tf.tanh;\n\t\t} else if (this.state.model.curve === \"cos\") {\n\t\t\teqn = tf.cos;\n\t\t}\n\t\tif (this.state.model.optimizer === \"adam\") {\n\t\t\toptimizer = tf.train.adam;\n\t\t} else if (this.state.model.optimizer === \"sgd\") {\n\t\t\toptimizer = tf.train.sgd;\n\t\t}\n\t\tawait this.genTensorData(eqn, scale);\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tepoch: 0,\n\t\t\tloss: null,\n\t\t});\n\t\ttf.dispose(optimizer);\n\t}\n\n\tasync reset(scale) {\n\t\tthis.asyncPause();\n\t\tthis.resetParameters(scale);\n\t\t//;this.mutate(\"model\", \"seq\", model);\n\t\t//;this.setState({ yhat: [] });\n\t\t//;this.mutate(\"model\", \"epoch\", 0);\n\t}\n\tasync componentDidMount() {\n\t\t/* First lets choose the data */\n\t\t//document.body.style.zoom = \"75%\";\n\t\tthis.genTensorData(tf.sin, this.state.model.scale);\n\t\t//let model = this.modelCompile(tf.train.adam, this.state.model.lr);\n\t\t//this.mutate(\"model\", \"seq\", model);\n\t\t//this.printParameters(model);\n\t\t//tf.dispose(model);\n\t}\n\tshouldComponentUpdate() {\n\t\tif (this.state.duringEpoch) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\trender() {\n\t\t/* Destructure State*/\n\t\tconst { model, controls } = this.state;\n\n\t\t/* Destructuring model */\n\t\tconst { epoch, loss } = model;\n\t\tlet shape = this.state.shape;\n\n\t\tlet newShape = [...shape];\n\t\tnewShape.splice(0, 1);\n\t\tnewShape.splice(newShape.length - 1, 1);\n\t\t//console.log(newShape);\n\t\tconst lrs = [0.001, 0.01, 0.1, 0.3, (1.0).toFixed(1)];\n\t\tconst optimizers = [\"adam\", \"sgd\"];\n\t\tconst dataSets = [\n\t\t\t{ label: \"sin\", eqn: tf.sin, scale: 5 },\n\t\t\t{ label: \"cos\", eqn: tf.cos, scale: 5 },\n\t\t\t{ label: \"tanh\", eqn: tf.tanh, scale: 5 },\n\t\t];\n\n\t\t/* Destructuring of model */\n\n\t\t/* Destructure render */\n\t\tconst PlayButtonClick = (\n\t\t\t// eslint-disable-next-line\n\t\t\t<a\n\t\t\t\tonClick={async () => {\n\t\t\t\t\tawait this.run();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<PlayButton playing={controls.playing} />\n\t\t\t</a>\n\t\t);\n\n\t\treturn (\n\t\t\t<div id=\"app\">\n\t\t\t\t<AppBar\n\t\t\t\t\tposition=\"static\"\n\t\t\t\t\tstyle={{ background: \"#f50257\", color: \"white\" }}\n\t\t\t\t>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\tBackpropagation Visualizer\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\n\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" marginTop={10}>\n\t\t\t\t\t<Box width={400}>\n\t\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tcolor: \"rgb(245, 2, 87, 0.5)\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tControl Center\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\n\t\t\t\t\t\t\t\t\tEpoch: {this.state.epoch}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tloss:{\" \"}\n\t\t\t\t\t\t\t\t\t{this.state.loss == null\n\t\t\t\t\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t\t\t\t\t: this.state.loss.toFixed(6)}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\tdisabled={this.state.controls.playing}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Replay />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t{PlayButtonClick}\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.speed === 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"grey\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"#FFC006\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.mutate(\n\t\t\t\t\t\t\t\t\t\t\t\t\"controls\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"speed\",\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.speed === 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? 100\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<SlowMotionVideo />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</Card>\n\n\t\t\t\t\t\t<Box marginTop={5}>\n\t\t\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"rgb(245, 2, 87, 0.5)\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tModel Initialization\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\t\t\tOptimizer\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t{optimizers.map((optimizer, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.playing\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={optimizer}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.model\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optimizer === optimizer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.mutate(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"model\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"optimizer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet a = tf.train.sgd;\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet b = tf.train.adam;\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelOptimizer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer === \"sgd\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: b\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.dispose(a);\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.dispose(b);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\t\t\tLearning Rate\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t{lrs.map((num, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={`${num}`}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.lr === num\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelLr(num);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\t\t\tData Set\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t{dataSets.map((item, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.controls.playing\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.model.curve ===\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ shape });\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.mutate(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"model\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"curve\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.genTensorData(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.eqn,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box marginLeft={10}>\n\t\t\t\t\t\t<NN\n\t\t\t\t\t\t\tweights={this.state.weightsData}\n\t\t\t\t\t\t\tbiases={this.state.biasData}\n\t\t\t\t\t\t\tshape={this.state.shape}\n\t\t\t\t\t\t\tplaying={this.state.controls.playing}\n\t\t\t\t\t\t\tslowed={this.state.controls.speed !== 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card variant=\"outlined\" style={{ minWidth: 875 }}>\n\t\t\t\t\t\t\t\t<Box justifyContent=\"start\" display=\"flex\">\n\t\t\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t\t\t<Box marginRight={11.5}>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = this.state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!(shape.length > 4)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.splice(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.length - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.push(2);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.push(1);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"path\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rect\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tAdd Layer\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t{newShape.map((num, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<Box key={i} marginRight={17}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box marginBottom={1}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"–\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet e = i + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] === 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? shape[e]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: shape[e] -\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (shape[e] > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"path\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rect\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"+\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet e = i + 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape[e] >= 8\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? shape[e]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: shape[e] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (shape[i] <= 8) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"path\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#app\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"#nn\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"svg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"rect\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.state\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.scale\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet shape = model.shape;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (shape.length > 2) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.splice(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.length - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.splice(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.length - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape.push(1);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\"path\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\td3.select(\"#app\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.select(\"svg\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.selectAll(\"rect\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(model.scale);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tRemove Layer\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</NN>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box marginLeft={10}>\n\t\t\t\t\t\t<ScatterPlot\n\t\t\t\t\t\t\twidth={300}\n\t\t\t\t\t\t\theight={300}\n\t\t\t\t\t\t\tpadding={0}\n\t\t\t\t\t\t\tstart={-this.state.model.scale}\n\t\t\t\t\t\t\tstop={this.state.model.scale}\n\t\t\t\t\t\t\tX={this.state.data.X}\n\t\t\t\t\t\t\ty={this.state.data.y}\n\t\t\t\t\t\t\tyhat={this.state.yhat}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconsole.table(tf.memory());\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tMEM\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}