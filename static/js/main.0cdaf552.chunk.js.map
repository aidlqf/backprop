{"version":3,"sources":["components/implementations/svg/Legend.js","components/implementations/svg/Arrow.js","components/implementations/graphs/NeuralNetworkComponent.js","components/implementations/graphs/ScatterPlot.js","components/implementations/graphs/Loss.js","components/implementations/article/LinearFunction.js","components/implementations/article/NestedFunction.js","components/implementations/app/Bar.js","components/implementations/app/assets/controlcenter.gif","components/implementations/app/assets/customization.gif","components/implementations/app/assets/nn.png","components/implementations/app/assets/scatter.gif","nnMiniLibrary/implementations/Neuron.js","nnMiniLibrary/implementations/Loss.js","nnMiniLibrary/implementations/NeuralNetwork.js","nnMiniLibrary/implementations/Tools.js","Utils/implementations/Draw.js","components/implementations/app/MainTool.js","App.js","reportWebVitals.js","index.js"],"names":["Legend","width","height","className","overflow","fill","fontFamily","fontSize","x","y","source","target","color","isAnimating","id","orient","markerWidth","markerHeight","refX","refY","d","markerEnd","stroke","NeuralNetworkComponent","props","state","array","flattendArray","i","length","e","push","val","array3d","j","k","this","isUndefined","playing","mode","shapedLinks","shapedWeights","shapedRects","miniNN","subEpoch","keyFrameLoss","keyFrameLayer","link","input","label","children","d3","graphConnectionColor","squareWidth","VerticalArrow","xStart","yStart","dirIsUp","vector","Arrow","nn","map","layer","neuron","moving","colorChange","isUndefined3d","currentWeight","sw","Math","abs","s","gradient","model","dWeights","gradientWithLr","select","transition","duration","ease","attr","strokeWidth","actColor","beforeUpdate","brighter","actStep","lr","dActStep","Component","ScatterPlot","node","formattedPoints","selectAll","data","enter","append","style","a","padding","start","stop","container","svg","xScale","domain","range","yScale","xAxis","scale","yAxis","call","X","yhat","dataSet","remove","plotPoints","Loss","ticks","lossArray","loss","lossMin","lossMax","Bar","title","AppBar","position","variant","background","Toolbar","Typography","Neuron","weights","bias","array1","array2","item","dvalues","oppositeParameter","mult","reduce","b","dvalue","numInputs","dSumArray","inputs","activation","sum","multStep","sumStep","output","dSum","dSumStep","dBias","dInputs","dInputsSum","MeanSquaredErrorLoss","subStep","squareStep","pow","NeuralNetwork","shape","biases","dense","array1Length","array2Length","console","error","result","Array","max","lastLayer","outputs","forward","ReLU","linear","add","zeros","backward","dValues","dLinear","dReLU","gd","weight","dweight","newWeights","newBias","change","calcChange","n","l","formatWeightArray","uweights","increment","weightSet","t","w","toFunc2DArray","arr","fixed","toFixed","flatten","getRandomInt","floor","random","tensorToArray","tensor","from","dataSync","generateLinearScale","generateLink","adjustment","generateNeuronPlacement","layerProportion","startNeuron","stopNeuron","shapedNeurons","flattenedNeurons","coordinate","generateLinksPlacement","linksGenerator","perLink","layerLinks","neuronLinks","nextNeuron","MainTool","tensorFlowNN","epoch","biasesData","weightsData","rects","direction","curve","controls","speed","sliderVal","stopRender","lossSavings","singleInputExample","singleLabelExample","newOutput","controlCenterHelp","customizationHelp","neuralNetworkHelp","scatterHelp","lossHelp","lossChange","initNeuralNetwork","bind","run","genTensorData","mutate","train","printParameters","reset","resetParameters","asyncPause","changeModelLr","anim","randomInputGeneration","randomInput","tools","formattedWeights","clone","update","setState","timer","ms","Promise","res","setTimeout","flattenedWeights","draw","splice","lrChange","tf","key","subkey","value","inputShape","units","useBias","addModel","compile","optimizer","sgd","XTensor","yTensor","play","fit","epochs","yhatTensor","predict","meanSquaredError","eqn","scaled","volume","getWeights","modelCompile","dataSets","PlayButtonClick","Fab","disableTouchRipple","onClick","Stop","PlayArrow","controlsReg","CardActions","Tooltip","arrow","IconButton","disabled","Replay","SlowMotionVideo","controlsBackProp","Box","Button","controlCenter","Card","CardContent","size","Help","placement","open","formatValue","toPrecision","marginTop","num","Chip","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","onChange","min","scatter","marginLeft","bottom","right","neuralNetwork","show","left","outlineColor","paddingBottom","display","justifyContent","Dialog","PaperProps","backgroundColor","DialogActions","Close","DialogContent","src","controlGif","alt","marginBottom","customGif","nnDiagram","scatterGif","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g2BA2DeA,MAxDf,WACC,IACMC,EAAQ,IACd,OACC,8BACC,sBACCA,MAAOA,EACPC,OANY,GAOZC,UAAU,OACVC,SAAS,UAJV,UAMC,sBACCC,KAAK,OACLC,WAAW,aACXC,SAAS,OACTC,EAAG,EACHC,GAAI,GALL,8BAUA,sBACCJ,KAAK,OACLC,WAAW,aACXC,SAAS,OACTC,EAAG,EACHC,GAAI,EALL,6BAUA,sBAAMF,SAAS,OAAOF,KAAK,OAAOG,GAAI,GAAKC,EAAG,GAA9C,eAGA,sBAAMF,SAAS,OAAOF,KAAK,OAAOG,GAAI,IAAKC,EAAG,GAA9C,oBAIA,sBAAMF,SAAS,OAAOF,KAAK,OAAOG,EAAGP,GAAeQ,EAAG,GAAvD,eAGA,sBAAMF,SAAS,OAAOF,KAAK,OAAOG,EAAGP,KAAiBQ,EAAG,GAAzD,eAIA,sBAAMF,SAAS,OAAOF,KAAK,OAAOG,EAAGP,GAAWQ,EAAG,GAAnD,eAGA,sBAAMF,SAAS,OAAOF,KAAK,OAAOG,EAAGP,KAAiBQ,EAAG,GAAzD,qBCzBWT,EAxBA,SAAC,GAAD,IAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAA1B,OACd,8BACC,+BACC,wBACCC,GAAG,OACHC,OAAO,OACPC,YAAY,IACZC,aAAa,IACbC,KAAK,MACLC,KAAK,IANN,SAQC,sBAAMC,EAAE,iBAAiBf,KAAMO,QAGjC,sBACCT,UAAYU,EAAwB,SAAV,QAC1BC,GAAG,aACHO,UAAU,aACVhB,KAAK,OACLiB,OAAQV,EACRQ,EAAC,WAAMV,EAAOF,EAAb,YAAkBE,EAAOD,EAAzB,aAA+BE,EAAOH,EAAtC,aAA4CG,EAAOF,SCwQxCc,E,kDArRd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,GAFK,E,2CAInB,SAAQC,GAEP,IADA,IAAIC,EAAgB,GACXC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IACjC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAME,GAAGC,OAAQC,IACpCH,EAAcI,KAAKL,EAAME,GAAGE,IAG9B,OAAOH,I,qBAER,SAAQD,GACP,OAAwB,IAAjBA,EAAMG,S,yBAEd,SAAYG,GACX,MAAsB,qBAARA,I,2BAEf,SAAcC,EAASL,EAAGM,EAAGC,GAC5B,OACCC,KAAKC,YAAYJ,EAAQL,KACzBQ,KAAKC,YAAYJ,EAAQL,GAAGM,KAC5BE,KAAKC,YAAYJ,EAAQL,GAAGM,GAAGC,M,oBAIjC,WAAU,IAAD,SAcJC,KAAKZ,MAZRc,EAFO,EAEPA,QACAC,EAHO,EAGPA,KACAC,EAJO,EAIPA,YACAC,EALO,EAKPA,cACAC,EANO,EAMPA,YACAC,EAPO,EAOPA,OACAC,EARO,EAQPA,SACAC,EATO,EASPA,aACAC,EAVO,EAUPA,cAKKC,GAfE,EAWPC,MAXO,EAYPC,MAZO,EAaPC,SAEYC,MAEX3C,GAAE,SAACY,GAAD,OAAOA,EAAEZ,KACXC,GAAE,SAACW,GAAD,OAAOA,EAAEX,MAGP2C,EAAuB,QACvBC,EAAc,GAEdC,EAAgB,SAACC,EAAQC,EAAQ3B,EAAQ4B,EAAS7C,GACvD,IAAM8C,EAASD,GAAW5B,EAASA,EACnC,OACC,cAAC8B,EAAD,CACCjD,OAAQ,CAAEF,EAAG+C,EAAQ9C,EAAG+C,GACxB7C,OAAQ,CAAEH,EAAG+C,EAAQ9C,EAAG+C,EAASE,GACjC9C,MAAOA,EACPC,YAA0B,eAAb+B,KAcVgB,EACL,qBAAK9C,GAAG,IAAIb,MAAM,MAAMC,OAAO,MAAME,SAAS,UAA9C,SACC,oBAAGU,GAAG,KAAN,UACC,sBACCM,EAAE,wBACFE,OACkB,IAAjBuB,GAAuC,IAAjBA,EACnB,SACAO,EAEJjD,UACCoC,GAAQM,EAAe,EApBN,IAAjBA,EACI,cACoB,IAAjBA,EACH,eAEA,aAiBDP,IAIL,sBACClB,EAAG2B,EAAK,CACPrC,OAAQ,CAAEF,EAAG,IAAKC,EAAG,KACrBE,OAAQ,CAAEH,EAAG,IAAKC,EAAG,OAEtBa,OAAQ8B,EACR/C,KAAK,OACLF,UAAWmC,IAEZ,sBACClB,EAAG2B,EAAK,CACPrC,OAAQ,CAAEF,EAAG,IAAKC,EAAG,KACrBE,OAAQ,CAAEH,EAAG,IAAKC,EAAG,OAEtBa,OAAQ8B,EACR/C,KAAK,OACLF,UAAWmC,IAEXE,EAAYqB,KAAI,SAACC,EAAOlC,GACxB,OAAOkC,EAAMD,KAAI,SAACE,EAAQ7B,GACzB,IAAI8B,EAAS,aACTpD,EAAQ,SACRqD,GAAc,EAiBlB,OAfC1B,GACa,YAAbK,GACAhB,IAAMkB,GAENkB,EAAS,cACTC,GAAc,EACdrD,EAAQ,UAER2B,GACa,aAAbK,GACAhB,IAAMkB,IAENkB,EAAS,eACTC,GAAc,GAERF,EAAOF,KAAI,SAACzC,EAAGe,GACrB,IAAME,EAAc,EAAK6B,cACxBzB,EACAb,EACAM,EACAC,GAEKgC,EAAgB9B,EACnB,GACAI,EAAcb,GAAGM,GAAGC,GACjBiC,EAAK/B,EACR,EACA,EAAIgC,KAAKC,IAAIH,GAAiB,GAC3BI,EAAIlC,EACP,YACA8B,EAAgB,EAhGP,UADA,UAqGZ,GACC5B,GACa,WAAbK,IAC2B,IAA3B,EAAKpB,MAAMX,YACV,CACD,IAAI2D,EACH,EAAI7B,EAAO8B,MAAM7C,GAAGM,GAAGwC,SAASvC,GAC7BwC,EAA4B,IAAXH,EAErBrB,IAAU,OACRyB,OAAO,MACPA,OAAO,OACPA,OAHF,gBAGkBhD,GAHlB,OAGsBM,GAHtB,OAG0BC,IACxB0C,aACAC,SAAS,KACTC,KAAK5B,KACL6B,KAAK,eAAgBZ,EAAKI,GAC1BK,aACAC,SAAS,KACTC,KAAK5B,KACL6B,KACA,eACAZ,EAAKO,GAIR,OACC,sBACC7D,GAAE,eAAUc,GAAV,OAAcM,GAAd,OAAkBC,GAEpBf,EAAGA,EACHjB,UAAWoC,EAAOyB,EAAS1B,EAC3B2C,YAAab,EACb9C,OAAQ2C,EAAcrD,EAAQ2D,EAC9BlE,KAAK,QALA8B,YAWV,sBACC3B,EAAG,GACHC,EAAG,IACHR,MAAOoD,EACPnD,OAAQmD,EACRhD,KAAK,aAGLqC,EAAYmB,KAAI,SAACE,EAAQnC,GAAT,OAChBmC,EAAOF,KAAI,SAACzC,EAAGc,GACd,IAAIgD,GAAW,EACTC,EACQ,aAAbvC,GACa,eAAbA,EASD,OAPEL,GAAQX,GAAKkB,GACdqC,GACa,WAAbvC,KAEAsC,GAAW,GAIX,8BACC,sBACC1E,EAAGY,EAAEZ,EACLC,EAAGW,EAAEX,EACLR,MAAOoD,EACPnD,OAAQmD,EACRhD,KAAM8C,IACA,IAAK,IAAK,KACdiC,SACAF,EACGvC,EAAO8B,MAAM7C,GAAGM,GACfmD,QACD,EAAK7D,MAAM8D,GACX,GAELhE,OAAQ,QACR2D,YAAa,EACb9E,UAAU,QAGC,OAAXwC,GACDJ,GACA4C,GACAvD,GAAKkB,EAAgB,EAClBQ,EACAlC,EAAEZ,EAAI,GACNY,EAAEX,EAAI,GACN4D,KAAKC,IACJ3B,EAAO8B,MAAM7C,GAAGM,GAAGqD,UAEpB5C,EAAO8B,MAAM7C,GAAGM,GAAGqD,SAAW,EAC9B,UAEA,YAMP,sBACC/E,EAAG,IACHC,EAAG,IACHR,MAAOoD,EACPnD,OAAQmD,EACRhD,KAAK,OACLiB,OAAO,UAER,sBACChB,WAAW,aACXC,SAAS,OACTC,EAAG,IACHC,EAAG,IAJJ,uBAWH,OACC,sBAAKK,GAAG,KAAR,UACE8C,EACD,cAAC,EAAD,W,GAhRiC4B,a,wBCsItBC,E,kDAzId,WAAYjE,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,GAFK,E,8CAKnB,SAAWiE,EAAMC,GAEhBD,EAAKE,UAAU,UACbC,KAAKF,GACLG,QACAC,OAAO,UACPf,KAAK,MAAM,SAAC5D,GAAD,OAAOA,EAAEZ,KACpBwE,KAAK,MAAM,SAAC5D,GAAD,OAAOA,EAAEX,KACpBuE,KAAK,IAAK,GACVgB,MAAM,OAAQ,U,sEAGjB,kDAAAC,EAAA,wDACiD7D,KAAKZ,MAA7CvB,EADT,EACSA,MAAOC,EADhB,EACgBA,OAAQgG,EADxB,EACwBA,QAASC,EADjC,EACiCA,MAAOC,EADxC,EACwCA,KACjCC,EAAYlD,IAAU,UAEtBmD,EAAMD,EACVN,OAAO,OACPf,KAAK,QAAS/E,GACd+E,KAAK,SAAU9E,GACf8F,MAAM,WAAY,YAChBD,OAAO,QACTf,KAAK,QAAS/E,GACd+E,KAAK,SAAU9E,GACf8E,KAAK,QAAS,QACZuB,EAASpD,MAEXqD,OAAO,CAACL,EAAOC,IACfK,MAAM,CAAC,EAAGxG,EAAQ,EAAIiG,IAEpBQ,EAASvD,MAEXqD,OAAO,CAACL,EAAOC,IACfK,MAAM,CAACvG,EAAS,EAAIgG,EAAS,IAE3BS,EAAQxD,MAAgByD,MAAML,GAC9BM,EAAQ1D,MAAeyD,MAAMF,GACjCJ,EAAIP,OAAO,KACTf,KAAK,QAAS,QACdA,KAAK,YAFP,sBAEmC9E,EAAS,EAAIgG,EAFhD,MAGEY,KAAKH,GAEPL,EAAIP,OAAO,KACTf,KAAK,QAAS,QACdA,KAAK,YAAa,cAAgB/E,EAAQ,EAAIiG,GAAW,OACzDY,KAAKD,GAEPP,EAAIP,OAAO,QACTf,KAAK,KAAM,GACXA,KAAK,MAAO9E,EAAS,GAAK,GAC1B8E,KAAK,KAAM/E,GACX+E,KAAK,MAAO9E,EAAS,GAAK,GAC1B8E,KAAK,QAAS,SAChBsB,EAAIP,OAAO,QACTf,KAAK,MAAO/E,EAAQ,GAAK,GACzB+E,KAAK,KAAM,GACXA,KAAK,MAAO/E,EAAQ,GAAK,GACzB+E,KAAK,KAAM9E,GACX8E,KAAK,QAAS,SAEhBsB,EAAIP,OAAO,QACTf,KAAK,KAAM,QACXA,KAAK,SAAU,QACfA,KAAK,OAAQ,QAnDhB,iD,sFAqDA,WAaC,IAbqB,IAAD,EACwC5C,KAAKZ,MAAzDvB,EADY,EACZA,MAAOC,EADK,EACLA,OAAQgG,EADH,EACGA,QAASC,EADZ,EACYA,MAAOC,EADnB,EACmBA,KAAMW,EADzB,EACyBA,EAAGtG,EAD5B,EAC4BA,EAAGuG,EAD/B,EAC+BA,KAC/CT,EAASpD,MAEXqD,OAAO,CAACL,EAAOC,IACfK,MAAM,CAAC,EAAGxG,EAAQ,EAAIiG,IAEpBQ,EAASvD,MAEXqD,OAAO,CAACL,EAAOC,IACfK,MAAM,CAACvG,EAAS,EAAIgG,EAAS,IACzBI,EAAMnD,IAAU,SAASyB,OAAO,OAClCqC,EAAU,GACLrF,EAAI,EAAGA,EAAImF,EAAElF,OAAQD,IAC7BqF,EAAQlF,KAAK,CACZvB,EAAG+F,EAAOQ,EAAEnF,IACZnB,EAAGiG,EAAOjG,EAAEmB,MAId,IADA,IAAIqE,EAAI,GACCrE,EAAI,EAAGA,EAAImF,EAAElF,OAAQD,IAC7BqE,EAAElE,KAAK,CAACwE,EAAOQ,EAAEnF,IAAK8E,EAAOM,EAAKpF,MAEnC0E,EAAIV,UAAU,UAAUsB,SACxB9E,KAAK+E,WAAWb,EAAKW,GAErBX,EAAI1B,OAAO,SACTI,KAAK,IAAK7B,MAAU8C,IACpBjB,KAAK,SAAU,SACfA,KAAK,OAAQ,U,oBAiChB,WACC,OAAO,qBAAKlE,GAAG,a,GAtIS0E,aC2FX4B,E,kDA1Fd,WAAY5F,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,GAFK,E,qDAInB,WACC,IAAM4E,EAAYlD,IAAU,UACtBjD,EAAS,IACTD,EAAQ,IAEVsG,EAASpD,MAEXqD,OAAO,CAAC,GAAI,IACZC,MAAM,CAAC,EAAGxG,MAERyG,EAASvD,MAEXqD,OAAO,CAAC,EAAG,IACXC,MAAM,CAACvG,IAAsB,IACzBoG,EAAMD,EACVN,OAAO,OACPf,KAAK,QAAS/E,GACd+E,KAAK,SAAU9E,GACf8F,MAAM,WAAY,WAEpBM,EAAIP,OAAO,QACTf,KAAK,QAAS/E,GACd+E,KAAK,SAAU9E,GACf8E,KAAK,QAAS,QAChB,IAAI2B,EAAQxD,MAAgByD,MAAML,GAC9BM,EAAQ1D,MAAeyD,MAAMF,GACjCJ,EAAIP,OAAO,KACTf,KAAK,QAAS,QACdA,KAAK,KAAM,KACXA,KAAK,YAHP,sBAGmC9E,IAHnC,MAIE4G,KAAKH,GAEPL,EAAIP,OAAO,KACTf,KAAK,QAAS,QACdA,KAAK,KAAM,KACXA,KAAK,YAAa,oBAClB8B,KAAKD,EAAMQ,MAAM,IACnBf,EAAIP,OAAO,QACTf,KAAK,KAAM,QACXA,KAAK,SAAU,QACfA,KAAK,OAAQ,U,gCAGhB,WAoBC,IApBqB,IAAD,EACQ5C,KAAKZ,MAAzB8F,EADY,EACZA,UAIFlB,GALc,EACDmB,KAIND,EAAUzF,OAAS,GAE5B0E,EAASpD,MAEXqD,OAAO,CALK,EAKGJ,IACfK,MAAM,CAAC,EAAGxG,MAERuH,EAAUrE,IAAOmE,GACjBG,EAAUtE,IAAOmE,GACjBZ,EAASvD,MAEXqD,OAAO,CAACgB,EAASC,IACjBhB,MAAM,CAACvG,IAAsB,IACzBoG,EAAMnD,IAAU,UAAUyB,OAAO,OACnCqB,EAAI,GACCrE,EAAI,EAAGA,EAAI0F,EAAUzF,OAAQD,IACrCqE,EAAElE,KAAK,CAACwE,EAAO3E,GAAI8E,EAAOY,EAAU1F,MAGrC,IAAI+E,EAAQxD,MAAgByD,MAAML,GAC9BM,EAAQ1D,MAAeyD,MAAMF,GACjCJ,EAAI1B,OAAO,MACTI,KAAK,YADP,sBACmC9E,IADnC,MAEE4G,KAAKH,EAAMU,MAAM,IAEnBf,EAAI1B,OAAO,MACTI,KAAK,YAAa,oBAClB8B,KAAKD,EAAMQ,MAAM,IACnBf,EAAI1B,OAAO,SACTI,KAAK,IAAK7B,MAAU8C,IACpBjB,KAAK,SAAU,SACfA,KAAK,OAAQ,U,oBAEhB,WACC,OAAO,qBAAKlE,GAAG,c,GAvFE0E,a,wDCDUA,Y,oBCQAA,Y,iBCMdkC,EAfH,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,cAACC,EAAA,EAAD,CACCC,SAAS,QACTC,QAAQ,WACR9B,MAAO,CACN+B,WAAY,UACZnH,MAAO,SALT,SAQC,cAACoH,EAAA,EAAD,UACC,cAACC,EAAA,EAAD,CAAYH,QAAQ,KAApB,SAA0BH,S,wKCZd,MAA0B,0CCA1B,OAA0B,0CCA1B,OAA0B,+BCA1B,OAA0B,oCCK5BO,GAAb,WACC,WAAYC,EAASC,GAAO,oBAC3BhG,KAAK+F,QAAUA,EACf/F,KAAKgG,KAAOA,EAHd,wCAMC,SAAKC,EAAQC,GACZ,OAAOD,EAAOxE,KAAI,SAAC0E,EAAM3G,GACxB,OAAO2G,EAAOD,EAAO1G,QARxB,mBAWC,SAAM4G,EAASC,GACd,OAAOrG,KAAKsG,KAAKF,EAASC,KAZ5B,iBAcC,SAAI/G,GACH,OAAOA,EAAMiH,QAAO,SAAC1C,EAAG2C,GAAJ,OAAU3C,EAAI2C,OAfpC,kBAiBC,SAAKC,EAAQC,GAEZ,IADA,IAAIC,EAAY,GACPnH,EAAI,EAAGA,EAAIkH,EAAWlH,IAC9BmH,EAAUhH,KAAK8G,GAEhB,OAAOE,IAtBT,oBAwBC,SAAO/F,GACN,OAAOA,IAzBT,qBAiCC,SAAQgG,EAAQC,GAAY,IAEnBd,EAAkB/F,KAAlB+F,QAASC,EAAShG,KAATgG,KACTM,EAActG,KAAdsG,KAAMQ,EAAQ9G,KAAR8G,IAERC,EAAWT,EAAKM,EAAQb,GACxBiB,EAAUF,EAAIC,GAAYf,EAC1B/C,EAAU4D,EAAWG,GAG3BhH,KAAK4G,OAASA,EACd5G,KAAK+G,SAAWA,EAChB/G,KAAKgH,QAAUA,EACfhH,KAAKiD,QAAUA,EACfjD,KAAKiH,OAAShE,IA/ChB,sBAuDC,SAASwD,EAAQI,GAAY,IAEpBD,EAA6B5G,KAA7B4G,OAAQb,EAAqB/F,KAArB+F,QAAS9C,EAAYjD,KAAZiD,QACjBiE,EAAoBlH,KAApBkH,KAAMZ,EAActG,KAAdsG,KAAMQ,EAAQ9G,KAAR8G,IAEd3D,EAAW0D,EAAW5D,GAAWwD,EACjCU,EAAWD,EAAK/D,EAAUyD,EAAOnH,QACjC2H,EAAQjE,EACRb,EAAWgE,EAAKa,EAAUP,GAC1BS,EAAUf,EAAKa,EAAUpB,GACzBuB,EAAaR,EAAIO,GAGvBrH,KAAKyG,OAASA,EACdzG,KAAKmD,SAAWA,EAChBnD,KAAKmH,SAAWA,EAChBnH,KAAKoH,MAAQA,EACbpH,KAAKsC,SAAWA,EAChBtC,KAAKqH,QAAUA,EACfrH,KAAKsH,WAAaA,MA1EpB,KCCaC,GAAb,uFAMC,SAAQ3C,EAAMvG,GACb,IAAMmJ,EAAU5C,EAAOvG,EACjBoJ,EAAczH,KAAKiH,OAAShF,KAAKyF,IAAI9C,EAAOvG,EAAG,GAErD2B,KAAKwH,QAAUA,EACfxH,KAAKyH,WAAaA,EAClBzH,KAAKiH,OAASQ,IAZhB,sBAkBC,WACCzH,KAAKqH,QAAU,EAAIrH,KAAKwH,YAnB1B,KCGaG,GAAb,WAEC,WAAYC,EAAO7B,EAAS8B,GAAS,oBACpC7H,KAAKqC,MAAQ,GACbrC,KAAKmF,KAAO,IAAIoC,GAChBvH,KAAK4H,MAAQA,EAGb,IAAK,IAAIlG,EAAQ,EAAGA,EAAQqE,EAAQtG,OAAQiC,IAAS,CAEpD,IADA,IAAIoG,EAAQ,GACHnG,EAAS,EAAGA,EAASoE,EAAQrE,GAAOjC,OAAQkC,IACpDmG,EAAMnI,KACL,IAAImG,GAAOC,EAAQrE,GAAOC,GAASkG,EAAOnG,GAAOC,KAGnD3B,KAAKqC,MAAM1C,KAAKmI,IAfnB,uCAmBC,SAAIxI,GACH,OAAOA,EAAMiH,QAAO,SAAC1C,EAAG2C,GAAJ,OAAU3C,EAAI2C,OApBpC,iBAsBC,SAAIP,EAAQC,GACX,IAAM6B,EAAe9B,EAAOxG,OACtBuI,EAAe9B,EAAOzG,OAC5B,GAAIuI,GAAgBD,EAInB,OAHAE,QAAQC,MAAR,UACIH,EADJ,2BACmCC,EADnC,8BAGO,GAGP,IADA,IAAIG,EAAS,IAAIC,MAAML,GACdvI,EAAI,EAAGA,EAAIyG,EAAOxG,OAAQD,IAClC2I,EAAO3I,GAAKyG,EAAOzG,GAAK0G,EAAO1G,GAEhC,OAAO2I,IAnCV,mBAsCC,SAAM1I,GAEL,IADA,IAAI0I,EAAS,IAAIC,MAAM3I,GACdD,EAAI,EAAGA,EAAIC,EAAQD,IAC3B2I,EAAO3I,GAAK,EAEb,OAAO2I,IA3CT,mBA6CC,SAAMvH,GACL,OAAOA,EAAQ,EAAI,EAAI,IA9CzB,qBAgDC,SAAQA,GACP,OAAO,IAjDT,kBAoDC,SAAKA,GACJ,OAAOqB,KAAKoG,IAAI,EAAGzH,KArDrB,oBAwDC,SAAOA,GACN,OAAOA,IAzDT,qBAiEC,SAAQA,EAAOC,GAKd,IAJA,IAAI+F,EAAS,CAAChG,GACR0H,EAAYtI,KAAKqC,MAAM5C,OAGpBiC,EAAQ,EAAGA,EAAQ4G,EAAY,EAAG5G,IAAS,CAGnD,IADA,IAAI6G,EAAU,GACL5G,EAAS,EAAGA,EAAS3B,KAAKqC,MAAMX,GAAOjC,OAAQkC,IAEvD3B,KAAKqC,MAAMX,GAAOC,GAAQ6G,QAAQ5B,EAAQ5G,KAAKyI,MAC/CF,EAAQ5I,KAAKK,KAAKqC,MAAMX,GAAOC,GAAQsF,QAIxCL,EAAS2B,EAEVvI,KAAKqC,MAAMiG,EAAY,GAAG,GAAGE,QAAQ5B,EAAQ5G,KAAK0I,QAClD1I,KAAK4E,KAAO5E,KAAKqC,MAAMiG,EAAY,GAfd,GAe+BrB,OACpDjH,KAAKmF,KAAKqD,QAAQxI,KAAK4E,KAAM/D,KApF/B,sBAyFC,WAC6Bb,KAApB8G,IADG,IACE6B,EAAe3I,KAAf2I,IAAKC,EAAU5I,KAAV4I,MAClB5I,KAAKmF,KAAK0D,WACV,IAAIC,EAAU,CAAC9I,KAAKmF,KAAKkC,SACnBiB,EAAYtI,KAAKqC,MAAM5C,OAG7BO,KAAKqC,MAAMiG,EAAY,GADF,GACmBO,SACvCC,EAFoB,GAGpB9I,KAAK+I,SAEND,EAAU9I,KAAKqC,MAAMiG,EAAY,GALZ,GAK6BjB,QAGlD,IAAK,IAAI3F,EAAQ4G,EAAY,EAAG5G,GAAS,EAAGA,IAAS,CAEpD,IADA,IAAI2F,EAAUuB,EAAM5I,KAAKqC,MAAMX,GAAO,GAAGkF,OAAOnH,QACvCkC,EAAS,EAAGA,EAAS3B,KAAKqC,MAAMX,GAAOjC,OAAQkC,IACvD3B,KAAKqC,MAAMX,GAAOC,GAAQkH,SAASC,EAAQnH,GAAS3B,KAAKgJ,OACzD3B,EAAUsB,EAAItB,EAASrH,KAAKqC,MAAMX,GAAOC,GAAQ0F,SAElDyB,EAAUzB,KA7Gb,oBAoHC,SAAOnE,GAIN,IAFA,IAAM+F,EAAK,SAACC,EAAQhG,EAAIiG,GAAb,OAAyBD,EAAShG,EAAKiG,GAEzCzH,EAAQ,EAAGA,EAAQ1B,KAAKqC,MAAM5C,OAAQiC,IAC9C,IAAK,IAAIC,EAAS,EAAGA,EAAS3B,KAAKqC,MAAMX,GAAOjC,OAAQkC,IACvD,IACC,IAAInC,EAAI,EACRA,EAAIQ,KAAKqC,MAAMX,GAAOC,GAAQW,SAAS7C,OACvCD,IACC,CACD,IAAM4J,EAAaH,EAClBjJ,KAAKqC,MAAMX,GAAOC,GAAQoE,QAAQvG,GAClC0D,EACAlD,KAAKqC,MAAMX,GAAOC,GAAQW,SAAS9C,IAE9B6J,EAAUJ,EACfjJ,KAAKqC,MAAMX,GAAOC,GAAQqE,KAC1B9C,EACAlD,KAAKqC,MAAMX,GAAOC,GAAQyF,OAI3BpH,KAAKqC,MAAMX,GAAOC,GAAQoE,QAAQvG,GAAK4J,EACvCpJ,KAAKqC,MAAMX,GAAOC,GAAQqE,KAAOqD,KA5ItC,6BAkJC,SAAgB1H,EAAQD,EAAO4H,EAAQzI,GAEtC,IAAM0I,EAAavJ,KAAKqC,MAAMX,GAAOC,GAAQsF,OAASqC,EACtDtJ,KAAKqC,MAAMX,GAAOC,GAAQsF,OAASsC,EAInC,IADA,IAAI3C,EAAS,GACJ4C,EAAI,EAAGA,EAAIxJ,KAAKqC,MAAMX,GAAOjC,OAAQ+J,IAC7C5C,EAAOjH,KAAKK,KAAKqC,MAAMX,GAAO8H,GAAGvC,QAIlC,IADA,IAAMqB,EAAYtI,KAAKqC,MAAM5C,OACpBgK,EAAI/H,EAAQ,EAAG+H,EAAInB,EAAY,EAAGmB,IAAK,CAG/C,IADA,IAAIlB,EAAU,GACLiB,EAAI,EAAGA,EAAIxJ,KAAKqC,MAAMoH,GAAGhK,OAAQ+J,IAEzCxJ,KAAKqC,MAAMoH,GAAGD,GAAGhB,QAAQ5B,EAAQ5G,KAAKyI,MACtCF,EAAQ5I,KAAKK,KAAKqC,MAAMoH,GAAGD,GAAGvC,QAI/BL,EAAS2B,EAEVvI,KAAKqC,MAAMiG,EAAY,GAAG,GAAGE,QAAQ5B,EAAQ5G,KAAK0I,QAClD1I,KAAK4E,KAAO5E,KAAKqC,MAAMiG,EAAY,GAAG,GAAGrB,OACzCjH,KAAKmF,KAAKqD,QAAQxI,KAAK4E,KAAM/D,OA5K/B,KCEO,SAAS6I,GAAkBC,EAAU/B,GAG3C,IAFA,IAAIlG,EAAQ,GAEH+H,EAAI,EAAGA,EAAIE,EAASlK,OAAQgK,IAAK,CAKzC,IAHA,IAAIG,EAAYhC,EAAM6B,EAAI,GACtBI,EAAY,GAEPC,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAGnC,IAFA,IAAI/D,EAAU,GAELgE,EAAID,EAAGC,EAAIJ,EAASF,GAAGhK,OAAQsK,GAAKH,EAC5C7D,EAAQpG,KAAKgK,EAASF,GAAGM,IAE1BF,EAAUlK,KAAKoG,GAEhBrE,EAAM/B,KAAKkK,GAEZ,OAAOnI,EAQD,SAASsI,GAAcC,EAAKC,GAClC,IAAK,IAAI1K,EAAI,EAAGA,EAAIyK,EAAIxK,OAAQD,IAC/B,IAAK,IAAIE,EAAI,EAAGA,EAAIuK,EAAIzK,GAAGC,OAAQC,IAClCuK,EAAIzK,GAAGE,IAAMuK,EAAIzK,GAAGE,GAAGyK,QAAQD,GAGjC,OAAOD,EAQD,SAASG,GAAQ9K,GAEvB,IADA,IAAIC,EAAgB,GACXC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IACjC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAME,GAAGC,OAAQC,IACpCH,EAAcI,KAAKL,EAAME,GAAGE,IAG9B,OAAOH,EAQD,SAAS8K,GAAahC,GAC5B,OAAOpG,KAAKqI,MAAMrI,KAAKsI,SAAWtI,KAAKqI,MAAMjC,IAQvC,SAASmC,GAAcC,GAC7B,OAAOrC,MAAMsC,KAAKD,EAAOE,YC1EnB,SAASC,GAAoBxM,EAAGC,GAGtC,MAAO,CAAE8F,OAFMpD,MAAiBqD,OAAOhG,EAAEgG,QAAQC,MAAMjG,EAAEiG,OAExCC,OADFvD,MAAiBqD,OAAO/F,EAAE+F,QAAQC,MAAMhG,EAAEgG,QAInD,SAASwG,GAAaC,GAC5B,OAAO/J,MAEL3C,GAAE,SAACY,GAAD,OAAOA,EAAEZ,EAAI0M,KACfzM,GAAE,SAACW,GAAD,OAAOA,EAAEX,EAAIyM,KAGX,SAASC,GACfnD,EACAoD,EACA/J,EACAgK,EACAC,EACA/G,EACAG,GAEA,IAAI6G,EAAgB,GAChBC,EAAmB,GACvBD,EAAcxL,KAAK,CAACsL,IACpBG,EAAiBzL,KAAKsL,GAEtB,IAAK,IAAIvJ,EAAQ,EAAGA,EAAQkG,EAAMnI,OAAS,EAAGiC,IAAS,CAEtD,IADA,IAAIoG,EAAQ,GACHnG,EAAS,EAAGA,EAASiG,EAAMlG,GAAQC,IAAU,CACrD,IAAM0J,EAAa,CAClBjN,EAAG+F,EAAO6G,EAAgBtJ,IAAUT,EAAc,EAClD5C,EAAGiG,EAAO,GAAc,GAAT3C,GAAeV,EAAc,GAG7C6G,EAAMnI,KAAK0L,GACXD,EAAiBzL,KAAK0L,GAEvBF,EAAcxL,KAAKmI,GAMpB,OAHAsD,EAAiBzL,KAAKuL,GACtBC,EAAcxL,KAAK,CAACuL,IAEb,CAAEE,mBAAkBD,iBAGrB,SAASG,GAAuB1D,EAAOuD,EAAeI,GAK5D,IAHA,IAAIC,EAAU,GACVC,EAAa,GACbC,EAAc,GACThK,EAAQ,EAAGA,EAAQkG,EAAMnI,OAAQiC,IAAS,CAClDgK,EAAc,GACd,IAAK,IAAI/J,EAAS,EAAGA,EAASiG,EAAMlG,GAAQC,IAAU,CACrD6J,EAAU,GACV,IACC,IAAIG,EAAa,EACjBA,EAAa/D,EAAMlG,EAAQ,GAC3BiK,IAEAH,EAAQ7L,KACP4L,EAAe,CACdjN,OAAQ6M,EAAczJ,EAAQ,GAAGiK,GACjCpN,OAAQ4M,EAAczJ,GAAOC,MAIhC+J,EAAY/L,KAAK6L,GAElBC,EAAW9L,KAAK+L,GAGjB,OAAOD,E,ICmlCOG,G,kDAlnCd,WAAYxM,GAAQ,IAAD,8BAClB,cAAMA,IAKDC,MAAQ,CAEZwM,aAAc,KACdtL,OAAQ,KACRoE,EAAG,GACHtG,EAAG,GACHuG,KAAM,GACNgD,MAAO,CAAC,EAAG,EAAG,EAAG,GACjB1E,GAAI,IACJ4I,MAAO,EACPC,WAAY,GACZC,YAAa,GACb9G,UAAW,GACXC,KAAM,KACNX,MAAO,EACPyH,MAAO,GAEPlG,QAAS,GACT1F,cAAe,GACfC,YAAa,GAEbF,YAAa,GAEb8L,UAAW,aACXC,MAAO,MAGPC,SAAU,CACTlM,SAAS,EACTmM,MAAO,GAERC,UAAW,EACXnM,MAAM,EACNoM,YAAY,EACZ7L,cAAe,EACfD,aAAc,EACdD,SAAU,GACV/B,aAAa,EACb+N,YAAa,EACbC,mBAAoB,EACpBC,mBAAoB,EACpBC,UAAW,EAGXC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,aAAa,EACbC,UAAU,EACVC,WAAY,GAGb,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,IAAM,EAAKA,IAAID,KAAT,gBACX,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,OAAS,EAAKA,OAAOH,KAAZ,gBACd,EAAKI,MAAQ,EAAKA,MAAMJ,KAAX,gBACb,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBACvB,EAAKM,MAAQ,EAAKA,MAAMN,KAAX,gBACb,EAAKO,gBAAkB,EAAKA,gBAAgBP,KAArB,gBACvB,EAAKQ,WAAa,EAAKA,WAAWR,KAAhB,gBAClB,EAAKS,cAAgB,EAAKA,cAAcT,KAAnB,gBACrB,EAAKU,KAAO,EAAKA,KAAKV,KAAV,gBACZ,EAAKW,sBAAwB,EAAKA,sBAAsBX,KAA3B,gBArEX,E,yDAuEnB,SAAsBxI,EAAGtG,EAAG2N,EAAaD,EAAYnE,EAAO1E,EAAI/C,GAC/D,IAAM4N,EAAcC,EAAM3D,aAAa,IACjCoC,EAAqB9H,EAAEoJ,GACvBrB,EAAqBrO,EAAE0P,GAEzBE,EAAmBD,EAAMtE,kBAAkBsC,EAAapE,GACxDpG,EAAK,IAAImG,GAAcC,EAAOqG,EAAkBlC,GAChDmC,EAAQ,IAAIvG,GAAcC,EAAOqG,EAAkBlC,GAEvDvK,EAAGgH,QAAQiE,EAAoBC,GAC/BlL,EAAGqH,WAEHqF,EAAM1F,QAAQiE,EAAoBC,GAClCwB,EAAMrF,WACNqF,EAAMC,OAAOjL,GACbgL,EAAM1F,QAAQiE,EAAoBC,GAElC,IAAMC,EAAYuB,EAAMtJ,KAElB4H,EADc0B,EAAM/I,KAAK8B,OAG/BjH,KAAKoO,SAAL,2BACIpO,KAAKX,OADT,IAECkB,OAAQiB,EACRrB,MAAM,EACNqM,cACAC,qBACAC,qBACAC,YACAP,SAAS,2BACLpM,KAAKX,MAAM+M,UADP,IAEPlM,SAAS,S,yDAKZ,oCAAA2D,EAAA,sDACS+D,EAAU5H,KAAKX,MAAfuI,MACFyE,EAAQ,IAERgC,EAAQ,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAKF,OAG3DtO,KAAKoO,SAAS,CACb5N,SAAU,UACV/B,aAAa,EACbwO,WAAY,IAEJzN,EAAI,EAZd,YAYiBA,EAAIoI,EAAMnI,QAZ3B,oBAaEO,KAAKoO,SAAS,CAAE1N,cAAelB,IAC3BA,IAAMoI,EAAMnI,OAAS,EAd3B,uEAiBQ4O,EAAMhC,GAjBd,QAYmC7M,IAZnC,8BAsBCQ,KAAKoO,SAAS,CAAE3N,aAAc,IAtB/B,UAuBO4N,EAAMhC,GAvBb,eAwBCrM,KAAKoO,SAAS,CAAE3N,aAAc,IAxB/B,UAyBO4N,EAAMhC,GAzBb,QA0BCrM,KAAKoO,SAAS,CAAE3N,aAAc,IAG9BT,KAAKoO,SAAS,CAAEnB,WAAYjN,KAAKX,MAAMkB,OAAO4E,KAAK8B,SACnDjH,KAAKoO,SAAS,CAAE5N,SAAU,aAEjBhB,EAAIoI,EAAMnI,OAAS,EAhC7B,aAgCgCD,GAAK,GAhCrC,wBAiCEQ,KAAKoO,SAAS,CAAE1N,cAAelB,IAjCjC,UAkCQ6O,EAAMhC,GAlCd,QAgCwC7M,IAhCxC,+BAoCCQ,KAAKoO,SAAS,CAAE1N,eAAgB,IApCjC,UAsCO2N,EAAMhC,GAtCb,eAuCCrM,KAAKoO,SAAS,CAAE5N,SAAU,eAvC3B,UAyCO6N,EAAM,KAzCb,eA0CCrO,KAAKoO,SAAS,CAAE5N,SAAU,WA1C3B,UA2CO6N,EAAM,KA3Cb,QA6CCrO,KAAKoO,SAAS,CACb3P,aAAa,EACbwO,WAAYjN,KAAKX,MAAMmN,cA/CzB,iD,qFAqDA,SAAkB5E,GAAQ,IAEjB1H,EADaF,KAAKX,MAAlB+M,SACAlM,QAGR,GAAKA,GA2CE,GAAIA,EAAS,CAAC,IAAD,EACYF,KAAKX,MAA5B2M,EADW,EACXA,YAAapE,EADF,EACEA,MACf8G,EAAmBV,EAAM5D,QAAQ4B,GAEjC3L,EAAgB2N,EAAMtE,kBAAkBsC,EAAapE,GAE3D5H,KAAKoO,SAAS,CAAErI,QAAS2I,EAAkBrO,uBAjD9B,CAEb,IAAMY,EAAc,GAFP,EAMY0N,EAAK/D,oBAHT,CAAExG,OAAQ,CAAC,EAAG,KAAMC,MAAO,CAAC,GAAI,MAChC,CAAED,OAAQ,CAAC,EAAG,KAAMC,MAAO,CAAC,IAAK,KAE/CF,EANM,EAMNA,OAAQG,EANF,EAMEA,OAETP,EAAQ,CAAE3F,EAAG,GAAsBC,EAAG,KACtC2F,EAAO,CAAE5F,EAAG,IAAuBC,EAAG,KAEtCkN,EAAiBoD,EAAK9D,aAAa5J,IAX5B,EAoBT0N,EAAK5D,wBACRnD,EARuB,CAAC,EAAG,GAAI,GAAI,GAAI,GAUvC3G,EACA8C,EACAC,EACAG,EACAG,GATA8G,EAlBY,EAkBZA,iBACAD,EAnBY,EAmBZA,cAUKM,EAAakD,EAAKrD,uBACvB1D,EACAuD,EACAI,GAIDJ,EAAcyD,OAAO,EAAG,GAExB5O,KAAKoO,SAAS,CACbhO,YAAaqL,EACbQ,MAAOb,EACP9K,YAAa6K,O,2BAYhB,SAAc0D,GAAW,IAAD,OACvBC,KAAQ,WACP,EAAKV,SAAS,CAAElL,GAAI2L,S,wDAKtB,4BAAAhL,EAAA,yDACO3D,GAAWF,KAAKX,MAAM+M,SAASlM,QACrCF,KAAKsN,OAAO,WAAY,UAAWpN,IACnB,IAAZA,EAHL,gCAIQF,KAAKuN,MAAMvN,KAAKX,MAAMsF,EAAG3E,KAAKX,MAAMhB,GAJ5C,gD,0EAQA,SAAO0Q,EAAKC,EAAQC,GAAQ,IAAD,OAE1BH,KAAQ,WACP,IAAIzP,EAAK,eAAQ,EAAKA,OAElB0P,KAAO1P,GAAS2P,KAAU3P,EAAM0P,IAEnC1P,EAAM0P,GAAKC,GAAUC,EACrB,EAAKb,SAAS,CAAE/O,WAEhB4I,QAAQC,MAAM,oC,sBAMjB,SAAS7F,GAAQ,IAAD,OACf,OAAOyM,KAAQ,WACd,IAAIlH,EAAQ,EAAKvI,MAAMuI,MACvBvF,EAAMsG,IACLmG,IAAUhH,MAAM,CACfoH,WAAY,CAAC,GACbC,MAAOvH,EAAM,GACbf,WAAY,OACZuI,SAAS,KAGX,IAAK,IAAI1N,EAAQ,EAAGA,EAAQkG,EAAMnI,OAAS,EAAGiC,IAC7CW,EAAMsG,IACLmG,IAAUhH,MAAM,CACfqH,MAAOvH,EAAMlG,GACbmF,WAAY,OACZuI,SAAS,KAYZ,OARA/M,EAAMsG,IACLmG,IAAUhH,MAAM,CACfqH,MAAO,EACPtI,WAAY,SACZuI,SAAS,KAIJ/M,O,0BAGT,SAAaa,GACZ,IAAIb,EAAQyM,MAMZ,OALA9O,KAAKqP,SAAShN,GACdA,EAAMiN,QAAQ,CACbC,UAAWT,IAASU,IAAItM,GACxBiC,KAAM,qBAEA9C,I,0DAER,WAAYsC,EAAGtG,GAAf,oCAAAwF,EAAA,sDAEO4L,EAAUX,KAAQ,WACvB,OAAOA,IAAUnK,MAEZ+K,EAAUZ,KAAQ,WACvB,OAAOA,IAAUzQ,MAEZgE,EAAQyM,KAAQ,WACrB,OAAO,EAAKzP,MAAMwM,gBAEbwC,EAAQ,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAKF,OAIvDqB,EAAO3P,KAAKX,MAAM+M,SAASlM,QAfhC,WAiBiB,IAATyP,EAjBR,wBAkBE3P,KAAKoO,SAAS,CAAE7B,YAAY,IAlB9B,EAmB6BvM,KAAKX,MAAM+M,SAA9BlM,EAnBV,EAmBUA,QAASmM,EAnBnB,EAmBmBA,MACjBsD,EAAOzP,EApBT,UAqBQmC,EAAMuN,IAAIH,EAASC,EAAS,CACjCG,OAAQ,IAtBX,eAwBEf,KAAQ,WACP,IAAIgB,EAAazN,EAAM0N,QAAQN,GAC3B7K,EAAOoJ,EAAMxD,cAAcsF,GAC3B3K,EAAO2J,IAAUkB,iBAAiB3R,EAAGuG,GAAM+F,WAAW,GAC1D,EAAK6C,gBAAgBnL,EAAO8C,EAAMP,EAAM,EAAKvF,MAAMyM,MAAQ,MAG5D9L,KAAKoO,SAAS,CAAE7B,YAAY,IA/B9B,UAgCQ8B,EAAMhC,GAhCd,+BAkCCrM,KAAKoO,SAAS,CAAEvC,aAAcxJ,IAC9ByM,IAAWW,GACXX,IAAWY,GApCZ,iD,2HAsCA,WAAoBO,EAAKC,EAAQC,GAAjC,oBAAAtM,EAAA,sEACOiL,MADP,OAECA,KAAQ,WACP,IAAMW,EAAUX,KACd,EAAKzP,MAAMmF,MACZ,EAAKnF,MAAMmF,MACX2L,GAEKT,EAAUZ,IAAOmB,EAAIR,GAAUS,GAC/BJ,EAAahB,IAAaW,GAC1B9K,EAAIqJ,EAAMxD,cAAciF,GACxBpR,EAAI2P,EAAMxD,cAAckF,GACxB9K,EAAOoJ,EAAMxD,cAAcsF,GAEjC,EAAK1B,SAAS,CACbzJ,IACAtG,IACAuG,YAjBH,2C,wFAsBA,SAAgBvC,EAAO8C,EAAMP,EAAMkH,GAGlC,IAFA,IAAIE,EAAc,GACdD,EAAa,GACRvM,EAAI,EAAGA,EAAI6C,EAAM+N,aAAa3Q,OAAQD,KAC7CA,EAAI,IAAM,EAAIwM,EAAcD,GAAYpM,KACxCyI,MAAMsC,KAAKrI,EAAM+N,aAAa5Q,GAAGmL,aAGnC,IAAMzF,EAAS,sBAAOlF,KAAKX,MAAM6F,WAAlB,CAA6BC,IAC5CnF,KAAKoO,SAAS,CACbrC,aACAC,cACA7G,OACAP,OACAkH,QACA5G,cAEDlF,KAAKkN,kBAAkBlN,KAAKX,MAAMuI,S,+DAEnC,sBAAA/D,EAAA,sDACC7D,KAAKoO,SAAS,CAAEhC,SAAS,2BAAMpM,KAAKX,MAAM+M,UAAlB,IAA4BlM,SAAS,MAD9D,gD,0HAGA,WAAsBsE,GAAtB,0BAAAX,EAAA,6DACCiL,IAAW9O,KAAKX,MAAMwM,cACdM,EAAUnM,KAAKX,MAAf8M,MAGR2C,KAAQ,WACO,QAAV3C,EACH8D,EAAMnB,IACc,SAAV3C,EACV8D,EAAMnB,IACc,QAAV3C,IACV8D,EAAMnB,QAXT,SAgBO9O,KAAKqN,cAAc4C,EAAKzL,EAAO,IAhBtC,OAiBOnC,EAAQyM,KAAQ,WACrB,OAAO,EAAKuB,aAAa,EAAKhR,MAAM6D,OAErClD,KAAKoO,SAAS,CACbtC,MAAO,EACP3G,KAAM,KACNY,QAAS,GACTxF,OAAQ,KACRsL,aAAcxJ,EACdhC,cAAe,GACf6E,UAAW,KAEZ4J,IA7BD,2D,iHA+BA,WAAYtK,GAAZ,SAAAX,EAAA,sDACC7D,KAAK2N,aACL3N,KAAK0N,gBAAgBlJ,GAFtB,gD,6HAIA,mCAAAX,EAAA,sDACCiL,IAAc,OACd9O,KAAKqN,cAAcyB,IAAQ9O,KAAKX,MAAMmF,MAAO,IAC7CxE,KAAKkN,kBAAkBlN,KAAKX,MAAMuI,OAC5BvF,EAAQyM,KAAQ,WACrB,OAAO,EAAKuB,aAAa,QAE1BrQ,KAAKoO,SAAS,CAAEvC,aAAcxJ,IAP/B,gD,yFASA,WACC,OAAIrC,KAAKX,MAAMkN,a,oBAOhB,WAAU,IAAD,WAkCJvM,KAAKX,MA/BRsF,EAHO,EAGPA,EACAtG,EAJO,EAIPA,EACAuJ,EALO,EAKPA,MACApD,EANO,EAMPA,MACAjE,EAPO,EAOPA,OACAyL,EARO,EAQPA,YACAD,EATO,EASPA,WACAnH,EAVO,EAUPA,KACAqH,EAXO,EAWPA,MACAlG,EAZO,EAYPA,QACA5F,EAbO,EAaPA,KACA2L,EAdO,EAcPA,MACAK,EAfO,EAePA,MACAjJ,EAhBO,EAgBPA,GACAiC,EAjBO,EAiBPA,KACAiH,EAlBO,EAkBPA,SACA/L,EAnBO,EAmBPA,cACAD,EApBO,EAoBPA,YACAE,EArBO,EAqBPA,YACAI,EAtBO,EAsBPA,cACAD,GAvBO,EAuBPA,aACAD,GAxBO,EAwBPA,SACA/B,GAzBO,EAyBPA,YACAgO,GA1BO,EA0BPA,mBACAC,GA3BO,EA2BPA,mBACAF,GA5BO,EA4BPA,YACAI,GA7BO,EA6BPA,kBACAC,GA9BO,EA8BPA,kBACAC,GA/BO,EA+BPA,kBACAG,GAhCO,EAgCPA,WACAF,GAjCO,EAiCPA,YAEO7M,GAAmBkM,EAAnBlM,QAASmM,GAAUD,EAAVC,MAGXiE,GAAW,CAChB,CAAEzP,MAAO,MAAOoP,IAAKnB,IAAQtK,MAAO,GACpC,CAAE3D,MAAO,MAAOoP,IAAKnB,IAAQtK,MAAO,GACpC,CAAE3D,MAAO,OAAQoP,IAAKnB,IAAStK,MAAO,IAIjC+L,GAEL,cAACC,EAAA,EAAD,CACC5M,MAAO,CACN+B,WAAa3F,KAAKX,MAAM+M,SAASlM,QAE9B,UADA,UAEH1B,MAAO,SAERiS,oBAAkB,EAClBC,QAAS,kBAAM,EAAKtD,OARrB,SAUGlN,GAA0B,cAACyQ,EAAA,EAAD,IAAhB,cAACC,EAAA,EAAD,MAGRC,GACL,eAACC,EAAA,EAAD,WACC,cAACC,EAAA,EAAD,CAASxL,MAAM,QAAQyL,OAAK,EAA5B,SACC,cAACC,EAAA,EAAD,CACCC,SAAUhR,GACVwQ,QAAS,WACR,EAAKjD,MAAMjJ,IAHb,SAMC,cAAC2M,EAAA,EAAD,QAGDZ,GACD,cAACQ,EAAA,EAAD,CAASxL,MAAM,QAAQyL,OAAK,EAA5B,SACC,cAACC,EAAA,EAAD,CACCrN,MAAO,CACNpF,MAAiB,IAAV6N,GAAc,OAAS,WAE/BqE,QAAS,WACR,EAAKtC,SAAS,CACbhC,SAAS,2BACLA,GADI,IAEPC,MAAiB,IAAVA,GAAc,IAAM,OAR/B,SAaC,cAAC+E,EAAA,EAAD,WAKEC,GACL,eAACC,EAAA,EAAD,WACC,eAACR,EAAA,EAAD,oBAEC,cAACS,EAAA,EAAD,CACCL,UAAU,EACVtN,MAAO,CACNpF,MAAoB,YAAbgC,GAAyB,SAAW,QAH7C,qBAQA,cAAC+Q,EAAA,EAAD,CACCL,UAAU,EACVtN,MAAO,CACNpF,MAAoB,aAAbgC,GAA0B,SAAW,QAH9C,sBAQA,cAAC+Q,EAAA,GAAD,GACCL,UAAU,GADX,0BAEW,GAFX,sBAGQ,CACN1S,MAAoB,WAAbgC,GAAwB,SAAW,SAJ5C,0CAUD,eAACsQ,EAAA,EAAD,WACC,cAACS,EAAA,EAAD,CACCb,QAAO,sBAAE,sBAAA7M,EAAA,sEACF,EAAKgK,OADH,2CAGTqD,SAAUzS,GACVmF,MAAO,CAAEpF,MAAOC,GAAc,YAAc,SAC5CiH,QAAQ,WANT,oBAWA,cAAC6L,EAAA,EAAD,CACCb,QAAO,sBAAE,sBAAA7M,EAAA,6DACR,EAAKiK,sBACJnJ,EACAtG,EACA2N,EACAD,EACAnE,EACA,KACAzH,GARO,SAUF,EAAK0N,OAVH,2CAYTjK,MAAO,CAAEpF,MAAOC,GAAc,YAAc,SAC5CyS,SAAUzS,GACViH,QAAQ,WAfT,wCAsBG8L,GACL,eAACF,EAAA,EAAD,CAAKzT,MAAO,IAAZ,UACC,cAAC4T,EAAA,EAAD,CAAM/L,QAAQ,WAAd,SACC,eAACgM,EAAA,EAAD,WACC,eAAC7L,EAAA,EAAD,CACCH,QAAQ,UACR9B,MAAO,CACNpF,MAAO,WAHT,UAME,iBACD,cAACyS,EAAA,EAAD,CACCU,KAAK,QACL/N,MAAO,CAAEpF,MAAO,UAChBkS,QAAS,WACR,EAAKtC,SAAS,CAAExB,mBAAmB,KAJrC,SAOC,cAACgF,EAAA,EAAD,SAGF,wBACA,cAACb,EAAA,EAAD,CACCxL,MACC,cAACM,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACEvF,EACE,mBACA,iCAGL6Q,OAAK,EACLa,UAAU,cACVC,KAAM5R,IAAYC,IAAS1B,GAV5B,SAYC,cAAC8S,EAAA,EAAD,CACCL,SAAkB,MAAR/L,GAAgB1G,GAC1BiS,QAAO,sBAAE,sBAAA7M,EAAA,0DACJ1D,EADI,gBAEP,EAAKiO,SAAS,CAAE5N,SAAU,KAC1B,EAAK4N,SAAS,CAAEjO,MAAOA,IAHhB,6BAKP,EAAK2N,sBACJnJ,EACAtG,EACA2N,EACAD,EACAnE,EACA,KACAzH,GAZM,SAcD,EAAK0N,OAdJ,2CAFV,SAoBC,eAAChI,EAAA,EAAD,CAAYH,QAAQ,KAApB,oBACSoG,SAKX,eAACjG,EAAA,EAAD,CAAYH,QAAQ,KAApB,UACEvF,GAAsB,GAAd8M,GAAkB,SAAW,GACrC9M,GAAsB,GAAd8M,GACR,cAAC,IAAD,CACCgC,MAAOhC,GACP8E,YAAa,SAAC9C,GAAD,OACZA,EAAM+C,YAAY,IAEnBtP,SAAU,MAGX,MAGF,cAACmD,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACU,MAARP,GAAgBhF,EACd,GADF,gBAEWgF,EAAK6M,YAAY,MAG9B,cAACnM,EAAA,EAAD,CAAYH,QAAQ,KAApB,SACEvF,EAAI,iBACQsM,GAAmBuF,YAC7B,GAFE,oBAGWtF,GAAmBsF,YAChC,IAEA,KAGH7R,EAAOkR,GAAmBR,GAE3B,cAACC,EAAA,EAAD,SAIF,cAACQ,EAAA,EAAD,CAAKW,UAAW,EAAhB,SACC,cAACR,EAAA,EAAD,CAAM/L,QAAQ,WAAd,SACC,eAACgM,EAAA,EAAD,WACC,eAAC7L,EAAA,EAAD,CACCH,QAAQ,UACR9B,MAAO,CACNpF,MAAO,WAHT,UAME,iBACD,cAACyS,EAAA,EAAD,CACCU,KAAK,QACL/N,MAAO,CAAEpF,MAAO,UAChBkS,QAAS,WACR,EAAKtC,SAAS,CACbvB,mBAAmB,KALtB,SASC,cAAC+E,EAAA,EAAD,SAGF,eAACd,EAAA,EAAD,WACC,cAACjL,EAAA,EAAD,CAAYH,QAAQ,UAApB,2BA9OM,CAAC,KAAO,KAAO,IAAM,IAAM,IAiP5BjE,KAAI,SAACyQ,EAAK1S,GAAN,OACR,cAAC2S,EAAA,EAAD,CACCjB,SAAUhR,IAAWC,EAErBU,MAAK,UAAKqR,GACVtO,MAAO,CACNpF,MACC0E,IAAOgP,EAAM,QAAU,OACxBvM,WACCzC,IAAOgP,EACJ,UACA,aAELxB,QAAS,WACR5B,KAAQ,WACP,EAAKlB,cAAcsE,GACnB,EAAKzE,MAAMjJ,QAbRhF,SAoBR,eAACsR,EAAA,EAAD,WACC,cAACjL,EAAA,EAAD,CAAYH,QAAQ,UAApB,sBAGC4K,GAAS7O,KAAI,SAAC0E,EAAM3G,GAAP,OACb,cAAC2S,EAAA,EAAD,CACCjB,SAAUhR,IAAWC,EAErBU,MAAOsF,EAAKtF,MACZ+C,MAAO,CACNpF,MACC2N,IAAUhG,EAAKtF,MACZ,QACA,OACJ8E,WACCwG,IAAUhG,EAAKtF,MACZ,UACA,aAEL6P,QAAS,WACR,EAAKtC,SAAS,CACbxG,QACAuE,MAAOhG,EAAKtF,QAEb,EAAK4M,MAAMjJ,GACXsK,KAAQ,WACP,EAAKzB,cACJlH,EAAK8J,IACL9J,EAAK3B,MACL,SAtBEhF,SA8BR,eAACsR,EAAA,EAAD,WACC,cAACjL,EAAA,EAAD,CAAYH,QAAQ,UAApB,qBAIA,cAAC0M,EAAA,EAAD,CACCxO,MAAO,CAAEpF,MAAO,WAChB6T,aAAc,EACdnB,SAAUhR,IAAWC,EACrBmS,kBAAgB,kBAChBC,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLC,SAAU,SAAChT,EAAG8J,GACb,EAAK4E,SAAS,CAAE9B,UAAW9C,KAE5BmJ,IAAK,EACLtK,IAAK,IAEN,cAACkJ,EAAA,EAAD,CACCL,SAAUhR,IAAWC,EACrBuQ,QAAS,WACR,IAAI7M,EAAI+D,EACJ/D,EAAEpE,OAAS,IACdoE,EACCA,EAAEpE,OAAS,GACR,EAAKJ,MAAMiN,UACfzI,EAAElE,KAAK,GACP,EAAKyO,SAAS,CAAExG,MAAO/D,IACvB,EAAKqJ,kBAAkBrJ,GACvB,EAAK4J,MAAMjJ,KAXd,eAkBA,cAAC+M,EAAA,EAAD,CACCL,SAAUhR,IAAWC,EACrBuQ,QAAS,WACR,IAAI7M,EAAI+D,EACJ/D,EAAEpE,OAAS,IACdoE,EAAE+K,OAAO/K,EAAEpE,OAAS,EAAG,GACvB,EAAK2O,SAAS,CAAExG,MAAO/D,IACvB,EAAKqJ,kBAAkBrJ,GACvB,EAAK4J,MAAMjJ,KARd,iCAoBAoO,GACL,eAACtB,EAAA,EAAD,CAAKuB,WAAY,GAAjB,UACC,eAACvB,EAAA,EAAD,WACC,cAAC,EAAD,CACCzT,MAAO,IACPC,OAAQ,IACRgG,QAAS,EACTC,OAAQS,EACRR,KAAMQ,EACNG,EAAGA,EACHtG,EAAGA,EACHuG,KAAMA,IAGP,cAACqM,EAAA,EAAD,CACCU,KAAK,QACL/N,MAAO,CACNpF,MAAO,SACPiH,SAAU,WACVqN,OAAQ,QACRC,MAAO,QAERrC,QAAS,WACR,EAAKtC,SAAS,CACbrB,aAAa,KAVhB,SAcC,cAAC6E,EAAA,EAAD,SAGF,cAACN,EAAA,EAAD,CAAKW,UAAW,GAAhB,SACC,cAAC,EAAD,CAAM/M,UAAWlF,KAAKX,MAAM6F,UAAWC,KAAMA,SAI1C6N,GACL,eAAC1B,EAAA,EAAD,CAAKuB,WAAY,GAAjB,UACC,cAAC,EAAD,CACCtS,OAAQA,EACRK,MAAO6L,GACP5L,MAAO6L,GACPrM,cAAeA,EACfD,YAAaA,EACbE,YAAaA,EACbsH,MAAOA,EACPC,OAAQkE,EACRhG,QAASA,EACTkG,MAAOA,EACP/L,QACCA,GACa,IAAVmM,GACC,cACA,aACD,aAEJ4G,KAAM/S,GACNC,KAAMA,EACN0I,SAAU7I,KAAKX,MAAM6M,UACrBxL,cAAeA,EACfD,aAAcA,GACdD,SAAUA,GACVgM,YAAaA,GACb/N,YAAaA,GACbyE,GAAIA,IAEL,cAAC+N,EAAA,EAAD,CACCU,KAAK,QACL/N,MAAO,CACNpF,MAAO,SACPiH,SAAU,WACVqN,OAAQ,QACRI,KAAM,SAEPxC,QAAS,WACR,EAAKtC,SAAS,CACbtB,mBAAmB,KAVtB,SAcC,cAAC8E,EAAA,EAAD,SAKH,OACC,sBAAKlT,GAAG,MAAR,UACC,cAAC+S,EAAA,EAAD,CACC/L,QAAQ,WACR9B,MAAO,CACN+B,WAAY,UACZwN,aAAc,QACdC,cAAe,OALjB,SAQC,cAAC1B,EAAA,EAAD,UACC,eAACJ,EAAA,EAAD,CACCvT,UAAU,UACVsV,QAAQ,OACRC,eAAe,SACfrB,UAAW,GAJZ,UAMET,GACAwB,GACAJ,UAKJ,eAACW,EAAA,EAAD,CACCC,WAAY,CACX5P,MAAO,CACN6P,gBAAiB,YAGnB3B,KAAMlF,GANP,UAQC,cAAC8G,EAAA,EAAD,UACC,cAACzC,EAAA,EAAD,CACCP,QAAS,WACR,EAAKtC,SAAS,CAAExB,mBAAmB,KAFrC,SAKC,cAAC+G,EAAA,EAAD,QAIF,eAACC,EAAA,EAAD,WACC,qBACCC,IAAKC,EACLC,IAAI,4BACJlW,MAAM,SAGP,eAACgI,EAAA,EAAD,CAAYH,QAAQ,UAApB,iBACK,yCADL,uBAC0C,IACzC,yCAFD,yEAKA,cAAC4L,EAAA,EAAD,CAAK+B,QAAQ,OAAOC,eAAe,SAAnC,SACC,eAAChC,EAAA,EAAD,CAAK0C,aAAc,EAAnB,UACC,cAACnO,EAAA,EAAD,CAAYH,QAAQ,KAApB,+BAIA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,uDAIA,cAACG,EAAA,EAAD,CAAYH,QAAQ,KAApB,2BAGA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,oFAKA,cAACG,EAAA,EAAD,CAAYH,QAAQ,KAApB,oDAGA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,2CAOJ,eAAC6N,EAAA,EAAD,CACCC,WAAY,CACX5P,MAAO,CACN6P,gBAAiB,YAGnB3B,KAAMjF,GANP,UAQC,cAAC6G,EAAA,EAAD,UACC,cAACzC,EAAA,EAAD,CACCP,QAAS,WACR,EAAKtC,SAAS,CAAEvB,mBAAmB,KAFrC,SAKC,cAAC8G,EAAA,EAAD,QAIF,eAACC,EAAA,EAAD,WACC,qBACCC,IAAKI,GACLF,IAAI,4BACJlW,MAAM,SAGP,eAACgI,EAAA,EAAD,CAAYH,QAAQ,UAApB,iBACK,+CADL,gBACyC,IACxC,2CAFD,4CAKA,cAAC4L,EAAA,EAAD,CAAK+B,QAAQ,OAAOC,eAAe,SAAnC,SACC,eAAChC,EAAA,EAAD,CAAK0C,aAAc,EAAnB,UACC,cAACnO,EAAA,EAAD,CAAYH,QAAQ,KAApB,uCAIA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,6KAOA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,0FAKA,cAACG,EAAA,EAAD,CAAYH,QAAQ,KAApB,+CAIA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,8QAaJ,eAAC6N,EAAA,EAAD,CACCC,WAAY,CACX5P,MAAO,CACN6P,gBAAiB,YAGnB3B,KAAMhF,GANP,UAQC,cAAC4G,EAAA,EAAD,UACC,cAACzC,EAAA,EAAD,CACCP,QAAS,WACR,EAAKtC,SAAS,CAAEtB,mBAAmB,KAFrC,SAKC,cAAC6G,EAAA,EAAD,QAIF,eAACC,EAAA,EAAD,WACC,qBACCC,IAAKK,GACLH,IAAI,4BACJlW,MAAM,SAGP,cAACyT,EAAA,EAAD,CAAK+B,QAAQ,OAAOC,eAAe,SAAnC,SACC,eAAChC,EAAA,EAAD,CAAK0C,aAAc,EAAnB,UACC,cAACnO,EAAA,EAAD,CAAYH,QAAQ,KAApB,qBAEA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,sMAOA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,8FASJ,eAAC6N,EAAA,EAAD,CACCC,WAAY,CACX5P,MAAO,CACN6P,gBAAiB,YAGnB3B,KAAM/E,GANP,UAQC,cAAC2G,EAAA,EAAD,UACC,cAACzC,EAAA,EAAD,CACCP,QAAS,WACR,EAAKtC,SAAS,CAAErB,aAAa,KAF/B,SAKC,cAAC4G,EAAA,EAAD,QAIF,eAACC,EAAA,EAAD,WACC,qBAAKC,IAAKM,GAAYJ,IAAI,UAAUlW,MAAM,SAE1C,cAACyT,EAAA,EAAD,CAAK+B,QAAQ,OAAOC,eAAe,SAAnC,SACC,eAAChC,EAAA,EAAD,CAAK0C,aAAc,EAAnB,UACC,cAACnO,EAAA,EAAD,CAAYH,QAAQ,KAApB,qBAEA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,sFAKA,cAACG,EAAA,EAAD,CAAYH,QAAQ,QAApB,2G,GAtmCetC,aCvBRgR,I,gEAdd,WAAYhV,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,GAFK,E,0CAInB,WACC,OACC,gCACC,cAAC,EAAD,CAAKkG,MAAO,8BACZ,cAAC,GAAD,W,GATcnC,cCOHiR,I,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,GAAD,MAEDC,SAASC,eAAe,SAMzBb,O","file":"static/js/main.0cdaf552.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../d3.css\";\n\nfunction Legend() {\n\tconst height = 10;\n\tconst width = 100;\n\treturn (\n\t\t<div>\n\t\t\t<svg\n\t\t\t\twidth={width}\n\t\t\t\theight={height}\n\t\t\t\tclassName=\"grad\"\n\t\t\t\toverflow=\"visible\"\n\t\t\t>\n\t\t\t\t<text\n\t\t\t\t\tfill=\"grey\"\n\t\t\t\t\tfontFamily=\"sans-serif\"\n\t\t\t\t\tfontSize=\"10px\"\n\t\t\t\t\tx={0}\n\t\t\t\t\ty={-13}\n\t\t\t\t>\n\t\t\t\t\tColor and stroke\n\t\t\t\t</text>\n\n\t\t\t\t<text\n\t\t\t\t\tfill=\"grey\"\n\t\t\t\t\tfontFamily=\"sans-serif\"\n\t\t\t\t\tfontSize=\"10px\"\n\t\t\t\t\tx={0}\n\t\t\t\t\ty={-4}\n\t\t\t\t>\n\t\t\t\t\tindicate weight\n\t\t\t\t</text>\n\n\t\t\t\t<text fontSize=\"12px\" fill=\"grey\" x={-0.5} y={18}>\n\t\t\t\t\t|\n\t\t\t\t</text>\n\t\t\t\t<text fontSize=\"13px\" fill=\"grey\" x={-2.5} y={28}>\n\t\t\t\t\t–\n\t\t\t\t</text>\n\n\t\t\t\t<text fontSize=\"12px\" fill=\"grey\" x={width / 2 - 2} y={18}>\n\t\t\t\t\t|\n\t\t\t\t</text>\n\t\t\t\t<text fontSize=\"13px\" fill=\"grey\" x={width / 2 - 4.5} y={30}>\n\t\t\t\t\t0\n\t\t\t\t</text>\n\n\t\t\t\t<text fontSize=\"12px\" fill=\"grey\" x={width - 2} y={18}>\n\t\t\t\t\t|\n\t\t\t\t</text>\n\t\t\t\t<text fontSize=\"13px\" fill=\"grey\" x={width - 3 - 1.5} y={28}>\n\t\t\t\t\t+\n\t\t\t\t</text>\n\t\t\t</svg>\n\t\t</div>\n\t);\n}\n\nexport default Legend;\n","import React from \"react\";\nimport \"../d3.css\";\nconst Legend = ({ source, target, color, isAnimating }) => (\n\t<g>\n\t\t<defs>\n\t\t\t<marker\n\t\t\t\tid=\"head\"\n\t\t\t\torient=\"auto\"\n\t\t\t\tmarkerWidth=\"3\"\n\t\t\t\tmarkerHeight=\"4\"\n\t\t\t\trefX=\"0.1\"\n\t\t\t\trefY=\"2\"\n\t\t\t>\n\t\t\t\t<path d=\"M0,0 V4 L2,2 Z\" fill={color} />\n\t\t\t</marker>\n\t\t</defs>\n\t\t<path\n\t\t\tclassName={!isAnimating ? \"arrow\" : \"absorb\"}\n\t\t\tid=\"arrow-line\"\n\t\t\tmarkerEnd=\"url(#head)\"\n\t\t\tfill=\"none\"\n\t\t\tstroke={color}\n\t\t\td={`M${source.x},${source.y}, ${target.x}, ${target.y}`}\n\t\t/>\n\t</g>\n);\nexport default Legend;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport { Help } from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\nimport Legend from \"../svg/Legend\";\nimport Arrow from \"../svg/Arrow\";\nimport \"../d3.css\";\n\nclass NeuralNetworkComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\tflatten(array) {\n\t\tlet flattendArray = [];\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\t\tflattendArray.push(array[i][e]);\n\t\t\t}\n\t\t}\n\t\treturn flattendArray;\n\t}\n\tisEmpty(array) {\n\t\treturn array.length === 0;\n\t}\n\tisUndefined(val) {\n\t\treturn typeof val === \"undefined\";\n\t}\n\tisUndefined3d(array3d, i, j, k) {\n\t\treturn (\n\t\t\tthis.isUndefined(array3d[i]) ||\n\t\t\tthis.isUndefined(array3d[i][j]) ||\n\t\t\tthis.isUndefined(array3d[i][j][k])\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tplaying,\n\t\t\tmode,\n\t\t\tshapedLinks,\n\t\t\tshapedWeights,\n\t\t\tshapedRects,\n\t\t\tminiNN,\n\t\t\tsubEpoch,\n\t\t\tkeyFrameLoss,\n\t\t\tkeyFrameLayer,\n\t\t\tinput,\n\t\t\tlabel,\n\t\t\tchildren,\n\t\t} = this.props;\n\t\tconst link = d3\n\t\t\t.linkHorizontal()\n\t\t\t.x((d) => d.x)\n\t\t\t.y((d) => d.y);\n\t\tconst negWeight = \"#D62839\";\n\t\tconst posWeight = \"#4BA3C3\";\n\t\tconst graphConnectionColor = \"black\";\n\t\tconst squareWidth = 32;\n\n\t\tconst VerticalArrow = (xStart, yStart, length, dirIsUp, color) => {\n\t\t\tconst vector = dirIsUp ? -length : length;\n\t\t\treturn (\n\t\t\t\t<Arrow\n\t\t\t\t\tsource={{ x: xStart, y: yStart }}\n\t\t\t\t\ttarget={{ x: xStart, y: yStart + vector }}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\tisAnimating={subEpoch === \"transition\"}\n\t\t\t\t/>\n\t\t\t);\n\t\t};\n\t\tconst keyFrameLossCalc = () => {\n\t\t\tif (keyFrameLoss === 1) {\n\t\t\t\treturn \"edgeForward\";\n\t\t\t} else if (keyFrameLoss === 2) {\n\t\t\t\treturn \"edgeBackward\";\n\t\t\t} else {\n\t\t\t\treturn \"edgePaused\";\n\t\t\t}\n\t\t};\n\n\t\tconst nn = (\n\t\t\t<svg id=\"p\" width=\"810\" height=\"500\" overflow=\"visible\">\n\t\t\t\t<g id=\"ee\">\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M 750, 234 L 750, 300\"\n\t\t\t\t\t\tstroke={\n\t\t\t\t\t\t\tkeyFrameLoss === 2 || keyFrameLoss === 1\n\t\t\t\t\t\t\t\t? \"orange\"\n\t\t\t\t\t\t\t\t: graphConnectionColor\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tmode && keyFrameLoss > 0\n\t\t\t\t\t\t\t\t? keyFrameLossCalc()\n\t\t\t\t\t\t\t\t: playing\n\t\t\t\t\t\t}\n\t\t\t\t\t></path>\n\n\t\t\t\t\t<path\n\t\t\t\t\t\td={link({\n\t\t\t\t\t\t\tsource: { x: 766, y: 315 },\n\t\t\t\t\t\t\ttarget: { x: 890, y: 430 },\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tstroke={graphConnectionColor}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tclassName={playing}\n\t\t\t\t\t></path>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={link({\n\t\t\t\t\t\t\tsource: { x: 766, y: 250 },\n\t\t\t\t\t\t\ttarget: { x: 890, y: 150 },\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tstroke={graphConnectionColor}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tclassName={playing}\n\t\t\t\t\t></path>\n\t\t\t\t\t{shapedLinks.map((layer, i) => {\n\t\t\t\t\t\treturn layer.map((neuron, j) => {\n\t\t\t\t\t\t\tlet moving = \"edgePaused\";\n\t\t\t\t\t\t\tlet color = \"orange\";\n\t\t\t\t\t\t\tlet colorChange = false;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmode &&\n\t\t\t\t\t\t\t\tsubEpoch === \"forward\" &&\n\t\t\t\t\t\t\t\ti === keyFrameLayer\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tmoving = \"edgeForward\";\n\t\t\t\t\t\t\t\tcolorChange = true;\n\t\t\t\t\t\t\t\tcolor = \"orange\";\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tmode &&\n\t\t\t\t\t\t\t\tsubEpoch === \"backward\" &&\n\t\t\t\t\t\t\t\ti === keyFrameLayer\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tmoving = \"edgeBackward\";\n\t\t\t\t\t\t\t\tcolorChange = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn neuron.map((d, k) => {\n\t\t\t\t\t\t\t\tconst isUndefined = this.isUndefined3d(\n\t\t\t\t\t\t\t\t\tshapedWeights,\n\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\t\tk\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst currentWeight = isUndefined\n\t\t\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t\t\t: shapedWeights[i][j][k];\n\t\t\t\t\t\t\t\tconst sw = isUndefined\n\t\t\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t\t\t: 2 * Math.abs(currentWeight) + 0.1;\n\t\t\t\t\t\t\t\tconst s = isUndefined\n\t\t\t\t\t\t\t\t\t? \"lightgrey\"\n\t\t\t\t\t\t\t\t\t: currentWeight > 0\n\t\t\t\t\t\t\t\t\t? posWeight\n\t\t\t\t\t\t\t\t\t: negWeight;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tmode &&\n\t\t\t\t\t\t\t\t\tsubEpoch === \"update\" &&\n\t\t\t\t\t\t\t\t\tthis.props.isAnimating === true\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlet gradient =\n\t\t\t\t\t\t\t\t\t\t2 * miniNN.model[i][j].dWeights[k];\n\t\t\t\t\t\t\t\t\tlet gradientWithLr = gradient * 0.01;\n\n\t\t\t\t\t\t\t\t\td3.select(\"#nn\")\n\t\t\t\t\t\t\t\t\t\t.select(\"#p\")\n\t\t\t\t\t\t\t\t\t\t.select(\"#ee\")\n\t\t\t\t\t\t\t\t\t\t.select(`#cpath${i}${j}${k}`)\n\t\t\t\t\t\t\t\t\t\t.transition()\n\t\t\t\t\t\t\t\t\t\t.duration(750)\n\t\t\t\t\t\t\t\t\t\t.ease(d3.easeExpIn)\n\t\t\t\t\t\t\t\t\t\t.attr(\"stroke-width\", sw - gradient)\n\t\t\t\t\t\t\t\t\t\t.transition()\n\t\t\t\t\t\t\t\t\t\t.duration(750)\n\t\t\t\t\t\t\t\t\t\t.ease(d3.easeExpOut)\n\t\t\t\t\t\t\t\t\t\t.attr(\n\t\t\t\t\t\t\t\t\t\t\t\"stroke-width\",\n\t\t\t\t\t\t\t\t\t\t\tsw - gradientWithLr\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tid={`cpath${i}${j}${k}`}\n\t\t\t\t\t\t\t\t\t\tkey={k}\n\t\t\t\t\t\t\t\t\t\td={d}\n\t\t\t\t\t\t\t\t\t\tclassName={mode ? moving : playing}\n\t\t\t\t\t\t\t\t\t\tstrokeWidth={sw}\n\t\t\t\t\t\t\t\t\t\tstroke={colorChange ? color : s}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t></path>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t})}\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={34}\n\t\t\t\t\t\ty={234}\n\t\t\t\t\t\twidth={squareWidth}\n\t\t\t\t\t\theight={squareWidth}\n\t\t\t\t\t\tfill=\"darkgrey\"\n\t\t\t\t\t></rect>\n\n\t\t\t\t\t{shapedRects.map((neuron, i) =>\n\t\t\t\t\t\tneuron.map((d, j) => {\n\t\t\t\t\t\t\tlet actColor = false;\n\t\t\t\t\t\t\tconst beforeUpdate =\n\t\t\t\t\t\t\t\tsubEpoch === \"backward\" ||\n\t\t\t\t\t\t\t\tsubEpoch === \"transition\";\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(mode && i <= keyFrameLayer) ||\n\t\t\t\t\t\t\t\tbeforeUpdate ||\n\t\t\t\t\t\t\t\tsubEpoch === \"update\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tactColor = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<g>\n\t\t\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\t\t\t\t\twidth={squareWidth}\n\t\t\t\t\t\t\t\t\t\theight={squareWidth}\n\t\t\t\t\t\t\t\t\t\tfill={d3\n\t\t\t\t\t\t\t\t\t\t\t.rgb(104, 104, 104)\n\t\t\t\t\t\t\t\t\t\t\t.brighter(\n\t\t\t\t\t\t\t\t\t\t\t\tactColor\n\t\t\t\t\t\t\t\t\t\t\t\t\t? miniNN.model[i][j]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.actStep +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.lr\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 1\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\tstroke={\"black\"}\n\t\t\t\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\t\t\t\tclassName=\"bar\"\n\t\t\t\t\t\t\t\t\t></rect>\n\n\t\t\t\t\t\t\t\t\t{miniNN !== null &&\n\t\t\t\t\t\t\t\t\tmode &&\n\t\t\t\t\t\t\t\t\tbeforeUpdate &&\n\t\t\t\t\t\t\t\t\ti >= keyFrameLayer - 1\n\t\t\t\t\t\t\t\t\t\t? VerticalArrow(\n\t\t\t\t\t\t\t\t\t\t\t\td.x + 16,\n\t\t\t\t\t\t\t\t\t\t\t\td.y + 16,\n\t\t\t\t\t\t\t\t\t\t\t\tMath.abs(\n\t\t\t\t\t\t\t\t\t\t\t\t\tminiNN.model[i][j].dActStep\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tminiNN.model[i][j].dActStep < 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\"orange\"\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t)}\n\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={734}\n\t\t\t\t\t\ty={300}\n\t\t\t\t\t\twidth={squareWidth}\n\t\t\t\t\t\theight={squareWidth}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"black\"\n\t\t\t\t\t></rect>\n\t\t\t\t\t<text\n\t\t\t\t\t\tfontFamily=\"sans-serif\"\n\t\t\t\t\t\tfontSize=\"12px\"\n\t\t\t\t\t\tx={739}\n\t\t\t\t\t\ty={318}\n\t\t\t\t\t>\n\t\t\t\t\t\tloss\n\t\t\t\t\t</text>\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t);\n\t\treturn (\n\t\t\t<div id=\"nn\">\n\t\t\t\t{nn}\n\t\t\t\t<Legend />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NeuralNetworkComponent;\n","import React, { Component } from \"react\";\nimport \"../d3.css\";\nimport * as d3 from \"d3\";\n\nclass ScatterPlot extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tplotPoints(node, formattedPoints) {\n\t\t/* Now need to plot said data */\n\t\tnode.selectAll(\"circle\")\n\t\t\t.data(formattedPoints)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", (d) => d.x)\n\t\t\t.attr(\"cy\", (d) => d.y)\n\t\t\t.attr(\"r\", 2)\n\t\t\t.style(\"fill\", \"grey\");\n\t}\n\t/* This is where we initialize the Scatter Plot */\n\tasync componentDidMount() {\n\t\tconst { width, height, padding, start, stop } = this.props;\n\t\tconst container = d3.select(\"#nice\");\n\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis);\n\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", (height + 1) / 2)\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", (height + 1) / 2)\n\t\t\t.attr(\"class\", \"split\");\n\t\tsvg.append(\"line\")\n\t\t\t.attr(\"x1\", (width + 1) / 2)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", (width + 1) / 2)\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"class\", \"split\");\n\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"epic\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { width, height, padding, start, stop, X, y, yhat } = this.props;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#nice\").select(\"svg\");\n\t\tlet dataSet = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\tdataSet.push({\n\t\t\t\tx: xScale(X[i]),\n\t\t\t\ty: yScale(y[i]),\n\t\t\t});\n\t\t}\n\t\tlet a = [];\n\t\tfor (let i = 0; i < X.length; i++) {\n\t\t\ta.push([xScale(X[i]), yScale(yhat[i])]);\n\t\t}\n\t\tsvg.selectAll(\"circle\").remove();\n\t\tthis.plotPoints(svg, dataSet);\n\n\t\tsvg.select(\"#epic\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\t//componentDidUpdate() {\n\t//const { width, height, padding, start, stop, X, y } = this.props;\n\t//console.log(X);\n\t//console.log(y);\n\t//let xScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([0, width - 2 * padding]);\n\n\t//let yScale = d3\n\t//.scaleLinear()\n\t//.domain([start, stop])\n\t//.range([height - 2 * padding, 0]);\n\t//const svg = d3.select(\"#nice\").select(\"svg\");\n\t//let dataSet = [];\n\t//for (let i = 0; i < X.length; i++) {\n\t//dataSet.push({\n\t//x: xScale(X[i]),\n\t//y: yScale(y[i]),\n\t//});\n\t//}\n\t///* Now need to plot said data */\n\t//svg.selectAll(\"circle\")\n\t//.data(dataSet)\n\t//.enter()\n\t//.append(\"circle\")\n\t//.attr(\"cx\", (d) => d.x)\n\t//.attr(\"cy\", (d) => d.y)\n\t//.attr(\"r\", 2)\n\t//.style(\"fill\", \"#F50257\");\n\t//}\n\trender() {\n\t\treturn <div id=\"nice\"></div>;\n\t}\n}\n\nexport default ScatterPlot;\n","import React, { Component } from \"react\";\nimport \"../d3.css\";\nimport * as d3 from \"d3\";\n\nclass Loss extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\tcomponentDidMount() {\n\t\tconst container = d3.select(\"#sweet\");\n\t\tconst height = 100;\n\t\tconst width = 300;\n\t\tconst padding = 0;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([0, -1])\n\t\t\t.range([0, width - 2 * padding]);\n\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([1, 1])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = container\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.style(\"overflow\", \"visible\");\n\n\t\tsvg.append(\"rect\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", \"cord\");\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"id\", \"x\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"axis\")\n\t\t\t.attr(\"id\", \"y\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis.ticks(0));\n\t\tsvg.append(\"path\")\n\t\t\t.attr(\"id\", \"line\")\n\t\t\t.attr(\"stroke\", \"none\")\n\t\t\t.attr(\"fill\", \"none\");\n\t\t//svg.append(\"text\").attr(\"x\", 1).attr(\"y\", -5).text(\"loss:\");\n\t}\n\tcomponentDidUpdate() {\n\t\tconst { lossArray, loss } = this.props;\n\t\tconst height = 100;\n\t\tconst width = 300;\n\t\tconst start = 0;\n\t\tconst stop = lossArray.length - 1;\n\t\tconst padding = 0;\n\t\tlet xScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([start, stop])\n\t\t\t.range([1, width - 2 * padding]);\n\n\t\tlet lossMin = d3.min(lossArray);\n\t\tlet lossMax = d3.max(lossArray);\n\t\tlet yScale = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([lossMin, lossMax])\n\t\t\t.range([height - 2 * padding, 0]);\n\t\tconst svg = d3.select(\"#sweet\").select(\"svg\");\n\t\tlet a = [];\n\t\tfor (let i = 0; i < lossArray.length; i++) {\n\t\t\ta.push([xScale(i), yScale(lossArray[i])]);\n\t\t}\n\n\t\tlet xAxis = d3.axisBottom().scale(xScale);\n\t\tlet yAxis = d3.axisRight().scale(yScale);\n\t\tsvg.select(\"#x\")\n\t\t\t.attr(\"transform\", `translate(0,${height - 2 * padding})`)\n\t\t\t.call(xAxis.ticks(5));\n\n\t\tsvg.select(\"#y\")\n\t\t\t.attr(\"transform\", \"translate(\" + (width - 2 * padding) + \",0)\")\n\t\t\t.call(yAxis.ticks(5));\n\t\tsvg.select(\"#line\")\n\t\t\t.attr(\"d\", d3.line()(a))\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"fill\", \"none\");\n\t}\n\trender() {\n\t\treturn <div id=\"sweet\"></div>;\n\t}\n}\n\nexport default Loss;\n","import React, { Component } from \"react\";\nimport { Typography, Slider, Box, Card, CardContent } from \"@material-ui/core\";\n\nclass LinearFunction extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinput: 0,\n\t\t\toutput: 0,\n\t\t};\n\t\tthis.compute = this.compute.bind(this);\n\t}\n\tcompute(input) {\n\t\tconst linfunc = (x) => 2 * x + 1;\n\t\tconst output = linfunc(input);\n\t\tthis.setState({ input, output });\n\t}\n\tcomponentDidMount() {\n\t\tthis.compute(34);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Box display=\"flex\">\n\t\t\t\t<Box minWidth={300}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tvalue={this.state.input}\n\t\t\t\t\t\t\t\tonChange={(e, n) => {\n\t\t\t\t\t\t\t\t\tthis.compute(n);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t></Slider>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tf(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\">\n\t\t\t\t\t\t\t\t\t{this.state.input}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = 2(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\">\n\t\t\t\t\t\t\t\t\t{this.state.input}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + 1 ={\" \"}\n\t\t\t\t\t\t\t\t<Typography style={{ color: \"#8db600\" }}>\n\t\t\t\t\t\t\t\t\t{this.state.output}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nexport default LinearFunction;\n","import React, { Component } from \"react\";\nimport {\n\tTypography,\n\tSlider,\n\tBox,\n\tCard,\n\tCardContent,\n\tCardActions,\n\tButton,\n} from \"@material-ui/core\";\n\nclass NestedFunction extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinput: 0,\n\t\t\toutput1: 0,\n\t\t\toutput2: 0,\n\t\t\toutput3: 0,\n\t\t\tweights: [],\n\t\t\tbiases: [],\n\t\t};\n\t\tthis.compute = this.compute.bind(this);\n\t\tthis.initParams = this.initParams.bind(this);\n\t}\n\tcompute(input) {\n\t\tconst { weights, biases } = this.state;\n\t\tconst linfunc = (x, w, b) => w * x + b;\n\t\tconst relu = (x) => Math.max(0, x);\n\n\t\tconst output1 = linfunc(input, weights[0], biases[0]).toFixed(3);\n\t\tconst output2 = linfunc(output1, weights[1], biases[1]).toFixed(3);\n\t\tconst output3 = linfunc(output2, weights[2], biases[2]).toFixed(3);\n\t\tthis.setState({ input, output1, output2, output3 });\n\t}\n\tgenRandomArray(length) {\n\t\tlet arr = new Array(length);\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tarr[i] = +Math.random().toFixed(2);\n\t\t}\n\t\treturn arr;\n\t}\n\tasync initParams() {\n\t\tconst weights = this.genRandomArray(3);\n\t\tconst biases = this.genRandomArray(3);\n\t\tthis.setState({ weights, biases });\n\t}\n\tasync componentDidMount() {\n\t\tawait this.initParams();\n\t\tthis.compute(34);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tinput,\n\t\t\toutput1,\n\t\t\toutput2,\n\t\t\toutput3,\n\t\t\tweights,\n\t\t\tbiases,\n\t\t} = this.state;\n\t\tconst fixedInput = input.toFixed(3);\n\t\tconst outputArr = [\n\t\t\t{ output: output1, color: \"#8db600\" },\n\t\t\t{ output: output2, color: \"#FF8F00\" },\n\t\t\t{ output: output3, color: \"blue\" },\n\t\t];\n\t\treturn (\n\t\t\t<Box display=\"flex\">\n\t\t\t\t<Box width={580}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tvalue={this.state.input}\n\t\t\t\t\t\t\t\tonChange={(e, n) => {\n\t\t\t\t\t\t\t\t\tthis.compute(n);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t></Slider>\n\n\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t<Box justifyContent=\"center\">\n\t\t\t\t\t\t\t\t\t<svg width={500} height={64}>\n\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\td={`M${36} 16, ${100} 16`}\n\t\t\t\t\t\t\t\t\t\t\tstroke={\"#f50557\"}\n\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"25, 4\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={3 * weights[0] + 0.2}\n\t\t\t\t\t\t\t\t\t\t></path>\n\t\t\t\t\t\t\t\t\t\t<text x={40} y={40} fill={\"#f50557\"}>\n\t\t\t\t\t\t\t\t\t\t\t{fixedInput}\n\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t{outputArr.map((d, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<g>\n\t\t\t\t\t\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\t\t\t\t\t\tx={100 + 100 * i}\n\t\t\t\t\t\t\t\t\t\t\t\t\ty={0}\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth={32}\n\t\t\t\t\t\t\t\t\t\t\t\t\theight={32}\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"lightgrey\"\n\t\t\t\t\t\t\t\t\t\t\t\t></rect>\n\t\t\t\t\t\t\t\t\t\t\t\t<text x={111 + 100 * i} y={22}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{i + 1}\n\t\t\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\t\t\td={`M${132 + 100 * i} 16, ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t200 + 100 * i\n\t\t\t\t\t\t\t\t\t\t\t\t\t} 16`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstroke={d.color}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"25, 4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ti < 2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? 3 *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tweights[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti + 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  0.2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t></path>\n\t\t\t\t\t\t\t\t\t\t\t\t<text\n\t\t\t\t\t\t\t\t\t\t\t\t\tx={140 + 100 * i}\n\t\t\t\t\t\t\t\t\t\t\t\t\ty={40}\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill={d.color}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{d.output}\n\t\t\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tneuron1(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\" variant=\"inline\">\n\t\t\t\t\t\t\t\t\t{fixedInput}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = {weights[0]}(\n\t\t\t\t\t\t\t\t<Typography color=\"secondary\" variant=\"inline\">\n\t\t\t\t\t\t\t\t\t{fixedInput}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + {biases[0]} ={\" \"}\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#8db600\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output1}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tneuron2(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#8db600\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output1}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = {weights[1]}(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#8db600\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output1}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + {biases[1]} ={\" \"}\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#FF8F00\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output2}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t\tneuron3(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#FF8F00\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output2}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) = {weights[2]}(\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#FF8F00\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output2}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t) + {biases[2]}={\" \"}\n\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"blue\" }}\n\t\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.state.output3}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tawait this.initParams();\n\t\t\t\t\t\t\t\t\t//this.compute(this.state.input);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tnew Weights and biases\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nexport default NestedFunction;\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nconst Bar = ({ title }) => (\n\t<AppBar\n\t\tposition=\"fixed\"\n\t\tvariant=\"outlined\"\n\t\tstyle={{\n\t\t\tbackground: \"#175676\",\n\t\t\tcolor: \"white\",\n\t\t}}\n\t>\n\t\t<Toolbar>\n\t\t\t<Typography variant=\"h6\">{title}</Typography>\n\t\t</Toolbar>\n\t</AppBar>\n);\n\nexport default Bar;\n","export default __webpack_public_path__ + \"static/media/controlcenter.3793afef.gif\";","export default __webpack_public_path__ + \"static/media/customization.05bd2f71.gif\";","export default __webpack_public_path__ + \"static/media/nn.984f5d8c.png\";","export default __webpack_public_path__ + \"static/media/scatter.1bf50e5e.gif\";","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tThis is the class definiton and implmentation of Neuron for Nerual Network\n*/\nexport class Neuron {\n\tconstructor(weights, bias) {\n\t\tthis.weights = weights;\n\t\tthis.bias = bias;\n\t}\n\t/* Next functions are just helper functions for the operations */\n\tmult(array1, array2) {\n\t\treturn array1.map((item, i) => {\n\t\t\treturn item * array2[i];\n\t\t});\n\t}\n\tdMult(dvalues, oppositeParameter) {\n\t\treturn this.mult(dvalues, oppositeParameter);\n\t}\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tdSum(dvalue, numInputs) {\n\t\tlet dSumArray = [];\n\t\tfor (let i = 0; i < numInputs; i++) {\n\t\t\tdSumArray.push(dvalue);\n\t\t}\n\t\treturn dSumArray;\n\t}\n\tlinear(input) {\n\t\treturn input;\n\t}\n\n\t/* \n\t\tPurpose: feed forward of single neuron\n\t\t@param: inputs, activation\n\t\t@store inputs, multStep, sumStep, actStep, output\n\t*/\n\tforward(inputs, activation) {\n\t\t/* Destructure the class values */\n\t\tconst { weights, bias } = this;\n\t\tconst { mult, sum } = this;\n\t\t/* propogate forward */\n\t\tconst multStep = mult(inputs, weights);\n\t\tconst sumStep = sum(multStep) + bias;\n\t\tconst actStep = activation(sumStep);\n\n\t\t/* Save values */\n\t\tthis.inputs = inputs;\n\t\tthis.multStep = multStep;\n\t\tthis.sumStep = sumStep;\n\t\tthis.actStep = actStep;\n\t\tthis.output = actStep;\n\t}\n\n\t/* \n\t\tPurpose: feed backward of single neuron\n\t\t@param: dvalue, activation\n\t\t@store inputs, multStep, sumStep, actStep, output\n\t*/\n\tbackward(dvalue, activation) {\n\t\t/* Destructure the class values */\n\t\tconst { inputs, weights, actStep } = this;\n\t\tconst { dSum, mult, sum } = this;\n\t\t/* propgate backwards */\n\t\tconst dActStep = activation(actStep) * dvalue;\n\t\tconst dSumStep = dSum(dActStep, inputs.length);\n\t\tconst dBias = dActStep;\n\t\tconst dWeights = mult(dSumStep, inputs);\n\t\tconst dInputs = mult(dSumStep, weights);\n\t\tconst dInputsSum = sum(dInputs);\n\n\t\t/* Save values */\n\t\tthis.dvalue = dvalue;\n\t\tthis.dActStep = dActStep;\n\t\tthis.dSumStep = dSumStep;\n\t\tthis.dBias = dBias;\n\t\tthis.dWeights = dWeights;\n\t\tthis.dInputs = dInputs;\n\t\tthis.dInputsSum = dInputsSum;\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\texports the losses to be used for the neural network\n\t\t\n*/\nexport class MeanSquaredErrorLoss {\n\t/* \n\t\tPurpose: feed forward of the nerual network\n\t\t@param yhat, y\n\t\t@stores y, yhat, subStep, squareStep, output\n\t*/\n\tforward(yhat, y) {\n\t\tconst subStep = yhat - y;\n\t\tconst squareStep = (this.output = Math.pow(yhat - y, 2));\n\n\t\tthis.subStep = subStep;\n\t\tthis.squareStep = squareStep;\n\t\tthis.output = squareStep;\n\t}\n\t/* \n\t\tPurpose: feed backward of the nerual network\n\t\t@stores dInputs\n\t*/\n\tbackward() {\n\t\tthis.dInputs = 2 * this.subStep;\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tThis creates the definiton and implemntation of the neural network in a non vectorized more manual way \n\t\tdesigned to show all the operations\n\tTODO: add the update that would update to the weights sgd style and compute forward once more to see difference\n*/\nimport { Neuron } from \"./Neuron\";\nimport { MeanSquaredErrorLoss } from \"./Loss\";\nexport class NeuralNetwork {\n\t/* here we construct the Neuron model */\n\tconstructor(shape, weights, biases) {\n\t\tthis.model = [];\n\t\tthis.loss = new MeanSquaredErrorLoss();\n\t\tthis.shape = shape;\n\n\t\t/* HERE WE CONSTRUCT THE MODEL ON CLASS CREATION */\n\t\tfor (let layer = 0; layer < weights.length; layer++) {\n\t\t\tlet dense = [];\n\t\t\tfor (let neuron = 0; neuron < weights[layer].length; neuron++) {\n\t\t\t\tdense.push(\n\t\t\t\t\tnew Neuron(weights[layer][neuron], biases[layer][neuron])\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.model.push(dense);\n\t\t}\n\t}\n\t/* Next are some helper functions */\n\tsum(array) {\n\t\treturn array.reduce((a, b) => a + b);\n\t}\n\tadd(array1, array2) {\n\t\tconst array1Length = array1.length;\n\t\tconst array2Length = array2.length;\n\t\tif (array2Length != array1Length) {\n\t\t\tconsole.error(\n\t\t\t\t`${array1Length} does not match ${array2Length}, so returned empty array`\n\t\t\t);\n\t\t\treturn [];\n\t\t} else {\n\t\t\tlet result = new Array(array1Length);\n\t\t\tfor (let i = 0; i < array1.length; i++) {\n\t\t\t\tresult[i] = array1[i] + array2[i];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\tzeros(length) {\n\t\tlet result = new Array(length);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n\tdReLU(input) {\n\t\treturn input > 0 ? 1 : 0;\n\t}\n\tdLinear(input) {\n\t\treturn 1;\n\t}\n\n\tReLU(input) {\n\t\treturn Math.max(0, input);\n\t}\n\n\tlinear(input) {\n\t\treturn input;\n\t}\n\n\t/* \n\t\tPurpose: to feed forward the entire layer\n\t\t@param input, label\n\t\t@store model, yhat, loss\n\t*/\n\tforward(input, label) {\n\t\tlet inputs = [input];\n\t\tconst lastLayer = this.model.length;\n\t\tconst outputNeuron = 0;\n\t\t/* First iterate through each layer */\n\t\tfor (let layer = 0; layer < lastLayer - 1; layer++) {\n\t\t\t/* Then iterate through each neuron in the layer */\n\t\t\tlet outputs = [];\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\t/* Then feed forward each individual neuron and push to output array */\n\t\t\t\tthis.model[layer][neuron].forward(inputs, this.ReLU);\n\t\t\t\toutputs.push(this.model[layer][neuron].output);\n\t\t\t}\n\n\t\t\t/* Then outputs will be the inputs for the next layer */\n\t\t\tinputs = outputs;\n\t\t}\n\t\tthis.model[lastLayer - 1][0].forward(inputs, this.linear);\n\t\tthis.yhat = this.model[lastLayer - 1][outputNeuron].output;\n\t\tthis.loss.forward(this.yhat, label);\n\t}\n\t/* \n\t\tPurpose: to feed backward the entire model per layer\n\t*/\n\tbackward() {\n\t\tconst { sum, add, zeros } = this;\n\t\tthis.loss.backward();\n\t\tlet dValues = [this.loss.dInputs];\n\t\tconst lastLayer = this.model.length;\n\t\t/* take care of output neuron */\n\t\tconst outputNeuron = 0;\n\t\tthis.model[lastLayer - 1][outputNeuron].backward(\n\t\t\tdValues[outputNeuron],\n\t\t\tthis.dLinear\n\t\t);\n\t\tdValues = this.model[lastLayer - 1][outputNeuron].dInputs;\n\n\t\t/* We want to start the second to last layer */\n\t\tfor (let layer = lastLayer - 2; layer >= 0; layer--) {\n\t\t\tlet dInputs = zeros(this.model[layer][0].inputs.length);\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\tthis.model[layer][neuron].backward(dValues[neuron], this.dReLU);\n\t\t\t\tdInputs = add(dInputs, this.model[layer][neuron].dInputs);\n\t\t\t}\n\t\t\tdValues = dInputs; //we transfer the dInputs into dValues for the next layer back\n\t\t}\n\t}\n\t/* \n\t\tPurpose: to update all the weights using gradient descent\n\t\t@param lr: learning rate\n\t*/\n\tupdate(lr) {\n\t\t/* First create the gradient descent */\n\t\tconst gd = (weight, lr, dweight) => weight - lr * dweight;\n\t\t/* Iterate over the model */\n\t\tfor (let layer = 0; layer < this.model.length; layer++) {\n\t\t\tfor (let neuron = 0; neuron < this.model[layer].length; neuron++) {\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\ti < this.model[layer][neuron].dWeights.length;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tconst newWeights = gd(\n\t\t\t\t\t\tthis.model[layer][neuron].weights[i],\n\t\t\t\t\t\tlr,\n\t\t\t\t\t\tthis.model[layer][neuron].dWeights[i]\n\t\t\t\t\t);\n\t\t\t\t\tconst newBias = gd(\n\t\t\t\t\t\tthis.model[layer][neuron].bias,\n\t\t\t\t\t\tlr,\n\t\t\t\t\t\tthis.model[layer][neuron].dBias\n\t\t\t\t\t);\n\n\t\t\t\t\t/* Formally update the model weights */\n\t\t\t\t\tthis.model[layer][neuron].weights[i] = newWeights;\n\t\t\t\t\tthis.model[layer][neuron].bias = newBias;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthrottleForward(neuron, layer, change, label) {\n\t\t/* First Change the value of the output of this neuron */\n\t\tconst calcChange = this.model[layer][neuron].output + change;\n\t\tthis.model[layer][neuron].output = calcChange;\n\n\t\t/* First construct the inputs for the next layer which is made out of the new outputs */\n\t\tlet inputs = [];\n\t\tfor (let n = 0; n < this.model[layer].length; n++) {\n\t\t\tinputs.push(this.model[layer][n].output);\n\t\t}\n\n\t\tconst lastLayer = this.model.length;\n\t\tfor (let l = layer + 1; l < lastLayer - 1; l++) {\n\t\t\t/* Then iterate through each neuron in the layer */\n\t\t\tlet outputs = [];\n\t\t\tfor (let n = 0; n < this.model[l].length; n++) {\n\t\t\t\t/* Then feed forward each individual neuron and push to output array */\n\t\t\t\tthis.model[l][n].forward(inputs, this.ReLU);\n\t\t\t\toutputs.push(this.model[l][n].output);\n\t\t\t}\n\n\t\t\t/* Then outputs will be the inputs for the next layer */\n\t\t\tinputs = outputs;\n\t\t}\n\t\tthis.model[lastLayer - 1][0].forward(inputs, this.linear);\n\t\tthis.yhat = this.model[lastLayer - 1][0].output;\n\t\tthis.loss.forward(this.yhat, label);\n\t}\n}\n","/* \n\tDonny Bertucci: @xnought\n\tSummary: \n\t\tExports some tools that make it easier to deal with the data\n*/\n\n/* \n\tPurpose: format the weight array given from tensorflow\n\t@param uweights (unformatted weights), shape\n\t@return layer (formated weights per layer)\n*/\nexport function formatWeightArray(uweights, shape) {\n\tlet layer = [];\n\t/* Increment over each layer l */\n\tfor (let l = 0; l < uweights.length; l++) {\n\t\t/* First num in shape is input neuron which is why we skip here by adding 1 */\n\t\tlet increment = shape[l + 1];\n\t\tlet weightSet = [];\n\t\t/* Increment over each neuron */\n\t\tfor (let t = 0; t < increment; t++) {\n\t\t\tlet weights = [];\n\t\t\t/* Increment over each weight per neuron */\n\t\t\tfor (let w = t; w < uweights[l].length; w += increment) {\n\t\t\t\tweights.push(uweights[l][w]);\n\t\t\t}\n\t\t\tweightSet.push(weights);\n\t\t}\n\t\tlayer.push(weightSet);\n\t}\n\treturn layer;\n}\n\n/* \n\tPurpose: to turn a 2d array into the same array but fixed to a certian number of numbers/figures\n\t@param arr  (not fixed array), fixed\n\t@return arr (fixed array)\n*/\nexport function toFunc2DArray(arr, fixed) {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let e = 0; e < arr[i].length; e++) {\n\t\t\tarr[i][e] = +arr[i][e].toFixed(fixed);\n\t\t}\n\t}\n\treturn arr;\n}\n\n/* \n\tPurpose: Flattens the array\n\t@param array\n\t@return flattenedArray\n*/\nexport function flatten(array) {\n\tlet flattendArray = [];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tfor (let e = 0; e < array[i].length; e++) {\n\t\t\tflattendArray.push(array[i][e]);\n\t\t}\n\t}\n\treturn flattendArray;\n}\n\n/* \n\tPurpose: generate random integer from 0 to given paramter\n\t@param max\n\t@return Number [0,max)\n*/\nexport function getRandomInt(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\n/* \n\tPurpose: turn tensor to array\n\t@param tensor \n\t@return array\n*/\nexport function tensorToArray(tensor) {\n\treturn Array.from(tensor.dataSync());\n}\n","import * as d3 from \"d3\";\n\nexport function generateLinearScale(x, y) {\n\tconst xScale = d3.scaleLinear().domain(x.domain).range(x.range);\n\tconst yScale = d3.scaleLinear().domain(y.domain).range(y.range);\n\treturn { xScale, yScale };\n}\n\nexport function generateLink(adjustment) {\n\treturn d3\n\t\t.linkHorizontal()\n\t\t.x((d) => d.x + adjustment)\n\t\t.y((d) => d.y + adjustment);\n}\n\nexport function generateNeuronPlacement(\n\tshape,\n\tlayerProportion,\n\tsquareWidth,\n\tstartNeuron,\n\tstopNeuron,\n\txScale,\n\tyScale\n) {\n\tlet shapedNeurons = [];\n\tlet flattenedNeurons = [];\n\tshapedNeurons.push([startNeuron]);\n\tflattenedNeurons.push(startNeuron);\n\n\tfor (let layer = 1; layer < shape.length - 1; layer++) {\n\t\tlet dense = [];\n\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\tconst coordinate = {\n\t\t\t\tx: xScale(layerProportion[layer]) - squareWidth / 2,\n\t\t\t\ty: yScale(92 - neuron * 12) - squareWidth / 2,\n\t\t\t};\n\t\t\t// push to arrays\n\t\t\tdense.push(coordinate);\n\t\t\tflattenedNeurons.push(coordinate);\n\t\t}\n\t\tshapedNeurons.push(dense);\n\t}\n\n\tflattenedNeurons.push(stopNeuron);\n\tshapedNeurons.push([stopNeuron]);\n\n\treturn { flattenedNeurons, shapedNeurons };\n}\n\nexport function generateLinksPlacement(shape, shapedNeurons, linksGenerator) {\n\t/* We start to iterate over ns */\n\tlet perLink = [];\n\tlet layerLinks = [];\n\tlet neuronLinks = [];\n\tfor (let layer = 1; layer < shape.length; layer++) {\n\t\tneuronLinks = [];\n\t\tfor (let neuron = 0; neuron < shape[layer]; neuron++) {\n\t\t\tperLink = [];\n\t\t\tfor (\n\t\t\t\tlet nextNeuron = 0;\n\t\t\t\tnextNeuron < shape[layer - 1];\n\t\t\t\tnextNeuron++\n\t\t\t) {\n\t\t\t\tperLink.push(\n\t\t\t\t\tlinksGenerator({\n\t\t\t\t\t\tsource: shapedNeurons[layer - 1][nextNeuron],\n\t\t\t\t\t\ttarget: shapedNeurons[layer][neuron],\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tneuronLinks.push(perLink);\n\t\t}\n\t\tlayerLinks.push(neuronLinks);\n\t}\n\n\treturn layerLinks;\n}\n","/* \n  @author: Donny Bertucci: xnought\n  Summary: \n\tMainTool.js is the main controller of all logic of the backprop explainer\n*/\n\n/*  START IMPORTS  */\nimport React, { Component } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport AnimatedNumber from \"animated-number-react\";\nimport { NeuralNetworkComponent, ScatterPlot, Loss } from \"../../exports\";\nimport {\n\tTypography,\n\tBox,\n\tCard,\n\tCardContent,\n\tIconButton,\n\tCardActions,\n\tChip,\n\tButton,\n\tFab,\n\tSlider,\n\tTooltip,\n\tDialog,\n\tDialogContent,\n\tDialogActions,\n} from \"@material-ui/core\";\nimport {\n\tReplay,\n\tSlowMotionVideo,\n\tPlayArrow,\n\tStop,\n\tHelp,\n\tClose,\n} from \"@material-ui/icons\";\nimport controlGif from \"./assets/controlcenter.gif\";\nimport customGif from \"./assets/customization.gif\";\nimport nnDiagram from \"./assets/nn.png\";\nimport scatterGif from \"./assets/scatter.gif\";\nimport { NeuralNetwork, tools } from \"../../../nnMiniLibrary/exports\";\nimport { draw } from \"../../../Utils/exports\";\n/*  END IMPORTS  */\n\nclass MainTool extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* \n\t\t\tApp js state will be the main controller of logic to components\n\t\t\tNote to self: Keep state as shallow as possible to avoid complexity with this.setState()\n\t\t*/\n\t\tthis.state = {\n\t\t\t/* State for NN */\n\t\t\ttensorFlowNN: null,\n\t\t\tminiNN: null,\n\t\t\tX: [],\n\t\t\ty: [],\n\t\t\tyhat: [],\n\t\t\tshape: [1, 8, 8, 1],\n\t\t\tlr: 0.01,\n\t\t\tepoch: 0,\n\t\t\tbiasesData: [],\n\t\t\tweightsData: [],\n\t\t\tlossArray: [],\n\t\t\tloss: null,\n\t\t\tscale: 5,\n\t\t\trects: [],\n\n\t\t\tweights: [],\n\t\t\tshapedWeights: [],\n\t\t\tshapedRects: [],\n\n\t\t\tshapedLinks: [],\n\n\t\t\tdirection: \"edgePaused\",\n\t\t\tcurve: \"sin\",\n\n\t\t\t/* State for Components */\n\t\t\tcontrols: {\n\t\t\t\tplaying: false,\n\t\t\t\tspeed: 0,\n\t\t\t},\n\t\t\tsliderVal: 2,\n\t\t\tmode: false,\n\t\t\tstopRender: false,\n\t\t\tkeyFrameLayer: 0,\n\t\t\tkeyFrameLoss: 0,\n\t\t\tsubEpoch: \"\",\n\t\t\tisAnimating: false,\n\t\t\tlossSavings: 0,\n\t\t\tsingleInputExample: 0,\n\t\t\tsingleLabelExample: 0,\n\t\t\tnewOutput: 0,\n\n\t\t\t/* Dialog showing */\n\t\t\tcontrolCenterHelp: false,\n\t\t\tcustomizationHelp: false,\n\t\t\tneuralNetworkHelp: false,\n\t\t\tscatterHelp: false,\n\t\t\tlossHelp: false,\n\t\t\tlossChange: 0,\n\t\t};\n\n\t\tthis.initNeuralNetwork = this.initNeuralNetwork.bind(this);\n\t\tthis.run = this.run.bind(this);\n\t\tthis.genTensorData = this.genTensorData.bind(this);\n\t\tthis.mutate = this.mutate.bind(this);\n\t\tthis.train = this.train.bind(this);\n\t\tthis.printParameters = this.printParameters.bind(this);\n\t\tthis.reset = this.reset.bind(this);\n\t\tthis.resetParameters = this.resetParameters.bind(this);\n\t\tthis.asyncPause = this.asyncPause.bind(this);\n\t\tthis.changeModelLr = this.changeModelLr.bind(this);\n\t\tthis.anim = this.anim.bind(this);\n\t\tthis.randomInputGeneration = this.randomInputGeneration.bind(this);\n\t}\n\trandomInputGeneration(X, y, weightsData, biasesData, shape, lr, mode) {\n\t\tconst randomInput = tools.getRandomInt(50);\n\t\tconst singleInputExample = X[randomInput];\n\t\tconst singleLabelExample = y[randomInput];\n\n\t\tlet formattedWeights = tools.formatWeightArray(weightsData, shape);\n\t\tlet nn = new NeuralNetwork(shape, formattedWeights, biasesData);\n\t\tlet clone = new NeuralNetwork(shape, formattedWeights, biasesData);\n\n\t\tnn.forward(singleInputExample, singleLabelExample);\n\t\tnn.backward();\n\n\t\tclone.forward(singleInputExample, singleLabelExample);\n\t\tclone.backward();\n\t\tclone.update(lr);\n\t\tclone.forward(singleInputExample, singleLabelExample);\n\n\t\tconst newOutput = clone.yhat;\n\t\tconst updatedLoss = clone.loss.output;\n\t\tconst lossSavings = updatedLoss;\n\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tminiNN: nn,\n\t\t\tmode: true,\n\t\t\tlossSavings,\n\t\t\tsingleInputExample,\n\t\t\tsingleLabelExample,\n\t\t\tnewOutput,\n\t\t\tcontrols: {\n\t\t\t\t...this.state.controls,\n\t\t\t\tplaying: false,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync anim() {\n\t\tconst { shape } = this.state;\n\t\tconst speed = 750;\n\t\t/* All anim needs to know is the shape */\n\t\tconst timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\n\t\t/* animate the forward pass */\n\t\tthis.setState({\n\t\t\tsubEpoch: \"forward\",\n\t\t\tisAnimating: true,\n\t\t\tlossChange: 0,\n\t\t});\n\t\tfor (let i = 0; i < shape.length; i++) {\n\t\t\tthis.setState({ keyFrameLayer: i });\n\t\t\tif (i === shape.length - 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait timer(speed);\n\t\t}\n\n\t\t/* animate the backward pass */\n\t\t/* animate the forward pass */\n\t\tthis.setState({ keyFrameLoss: 1 });\n\t\tawait timer(speed);\n\t\tthis.setState({ keyFrameLoss: 2 });\n\t\tawait timer(speed);\n\t\tthis.setState({ keyFrameLoss: 3 });\n\n\t\t//we update the losschange\n\t\tthis.setState({ lossChange: this.state.miniNN.loss.output });\n\t\tthis.setState({ subEpoch: \"backward\" });\n\n\t\tfor (let i = shape.length - 1; i >= 0; i--) {\n\t\t\tthis.setState({ keyFrameLayer: i });\n\t\t\tawait timer(speed);\n\t\t}\n\t\tthis.setState({ keyFrameLayer: -1 });\n\n\t\tawait timer(speed);\n\t\tthis.setState({ subEpoch: \"transition\" });\n\n\t\tawait timer(1000);\n\t\tthis.setState({ subEpoch: \"update\" });\n\t\tawait timer(1000);\n\t\t//we update the new loss\n\t\tthis.setState({\n\t\t\tisAnimating: false,\n\t\t\tlossChange: this.state.lossSavings,\n\t\t});\n\n\t\t/* animate update */\n\t}\n\n\tinitNeuralNetwork(shape) {\n\t\tconst { controls } = this.state;\n\t\tconst { playing } = controls;\n\n\t\t// If we are not training the tensorflow neural network\n\t\tif (!playing) {\n\t\t\t/* START SETUP */\n\t\t\tconst squareWidth = 32;\n\t\t\tconst xConstraints = { domain: [0, 100], range: [50, 750] };\n\t\t\tconst yConstraints = { domain: [0, 100], range: [500, 0] };\n\t\t\t//prettier-ignore\n\t\t\tconst {xScale, yScale} = draw.generateLinearScale(xConstraints,yConstraints);\n\t\t\t// Create the starting point and the stopping point for the neural network\n\t\t\tconst start = { x: 50 - squareWidth / 2, y: 250 - squareWidth / 2 };\n\t\t\tconst stop = { x: 750 - squareWidth / 2, y: 250 - squareWidth / 2 };\n\t\t\t// generate function to create paths from (x,y) to (x,y)\n\t\t\tconst linksGenerator = draw.generateLink(squareWidth / 2);\n\t\t\t// how the layers are proptioned compared to the linear scale\n\t\t\tconst layerProportion = [0, 25, 50, 75, 0];\n\t\t\t/* END SETUP */\n\n\t\t\t/* START GENERATING THE GRAPH */\n\t\t\tconst {\n\t\t\t\tflattenedNeurons,\n\t\t\t\tshapedNeurons,\n\t\t\t} = draw.generateNeuronPlacement(\n\t\t\t\tshape,\n\t\t\t\tlayerProportion,\n\t\t\t\tsquareWidth,\n\t\t\t\tstart,\n\t\t\t\tstop,\n\t\t\t\txScale,\n\t\t\t\tyScale\n\t\t\t);\n\t\t\tconst layerLinks = draw.generateLinksPlacement(\n\t\t\t\tshape,\n\t\t\t\tshapedNeurons,\n\t\t\t\tlinksGenerator\n\t\t\t);\n\t\t\t/* END GENERATING THE GRAPH */\n\n\t\t\tshapedNeurons.splice(0, 1); //in order for it to be lined up with the nn model\n\t\t\t//update the state of the links and rectangles to be rendered\n\t\t\tthis.setState({\n\t\t\t\tshapedLinks: layerLinks,\n\t\t\t\trects: flattenedNeurons,\n\t\t\t\tshapedRects: shapedNeurons,\n\t\t\t});\n\t\t} else if (playing) {\n\t\t\tconst { weightsData, shape } = this.state;\n\t\t\tconst flattenedWeights = tools.flatten(weightsData);\n\t\t\t//update the weights to be rendered\n\t\t\tconst shapedWeights = tools.formatWeightArray(weightsData, shape);\n\n\t\t\tthis.setState({ weights: flattenedWeights, shapedWeights });\n\t\t}\n\t}\n\n\tchangeModelLr(lrChange) {\n\t\ttf.tidy(() => {\n\t\t\tthis.setState({ lr: lrChange });\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tasync run() {\n\t\tconst playing = !this.state.controls.playing;\n\t\tthis.mutate(\"controls\", \"playing\", playing);\n\t\tif (playing === true) {\n\t\t\tawait this.train(this.state.X, this.state.y);\n\t\t}\n\t}\n\n\tmutate(key, subkey, value) {\n\t\t/* copy of the state */\n\t\ttf.tidy(() => {\n\t\t\tlet state = { ...this.state };\n\t\t\t/* If this.state.key.subkey exists */\n\t\t\tif (key in state && subkey in state[key]) {\n\t\t\t\t/* Mutate the state */\n\t\t\t\tstate[key][subkey] = value;\n\t\t\t\tthis.setState({ state });\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Could not be found in state\");\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\taddModel(model) {\n\t\treturn tf.tidy(() => {\n\t\t\tlet shape = this.state.shape;\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tinputShape: [1],\n\t\t\t\t\tunits: shape[1],\n\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\tfor (let layer = 2; layer < shape.length - 1; layer++) {\n\t\t\t\tmodel.add(\n\t\t\t\t\ttf.layers.dense({\n\t\t\t\t\t\tunits: shape[layer],\n\t\t\t\t\t\tactivation: \"relu\",\n\t\t\t\t\t\tuseBias: true,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tmodel.add(\n\t\t\t\ttf.layers.dense({\n\t\t\t\t\tunits: 1,\n\t\t\t\t\tactivation: \"linear\",\n\t\t\t\t\tuseBias: true,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn model;\n\t\t});\n\t}\n\tmodelCompile(lr) {\n\t\tlet model = tf.sequential();\n\t\tthis.addModel(model);\n\t\tmodel.compile({\n\t\t\toptimizer: tf.train.sgd(lr),\n\t\t\tloss: \"meanSquaredError\",\n\t\t});\n\t\treturn model;\n\t}\n\tasync train(X, y) {\n\t\t/* START SETUP */\n\t\tconst XTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(X);\n\t\t});\n\t\tconst yTensor = tf.tidy(() => {\n\t\t\treturn tf.tensor(y);\n\t\t});\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.state.tensorFlowNN;\n\t\t});\n\t\tconst timer = (ms) => new Promise((res) => setTimeout(res, ms));\n\t\t/* START SETUP */\n\n\t\t///* Until broken by user */\n\t\tlet play = this.state.controls.playing;\n\t\t////let epoch = 0;\n\t\twhile (play !== false) {\n\t\t\tthis.setState({ stopRender: true });\n\t\t\tconst { playing, speed } = this.state.controls;\n\t\t\tplay = playing;\n\t\t\tawait model.fit(XTensor, yTensor, {\n\t\t\t\tepochs: 1,\n\t\t\t});\n\t\t\ttf.tidy(() => {\n\t\t\t\tlet yhatTensor = model.predict(XTensor);\n\t\t\t\tlet yhat = tools.tensorToArray(yhatTensor);\n\t\t\t\tlet loss = tf.losses.meanSquaredError(y, yhat).dataSync()[0];\n\t\t\t\tthis.printParameters(model, loss, yhat, this.state.epoch + 1);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\tthis.setState({ stopRender: false });\n\t\t\tawait timer(speed);\n\t\t}\n\t\tthis.setState({ tensorFlowNN: model });\n\t\ttf.dispose(XTensor);\n\t\ttf.dispose(yTensor);\n\t}\n\tasync genTensorData(eqn, scaled, volume) {\n\t\tawait tf.ready();\n\t\ttf.tidy(() => {\n\t\t\tconst XTensor = tf.linspace(\n\t\t\t\t-this.state.scale,\n\t\t\t\tthis.state.scale,\n\t\t\t\tvolume\n\t\t\t);\n\t\t\tconst yTensor = tf.mul(eqn(XTensor), scaled);\n\t\t\tconst yhatTensor = tf.zerosLike(XTensor);\n\t\t\tconst X = tools.tensorToArray(XTensor);\n\t\t\tconst y = tools.tensorToArray(yTensor);\n\t\t\tconst yhat = tools.tensorToArray(yhatTensor);\n\n\t\t\tthis.setState({\n\t\t\t\tX,\n\t\t\t\ty,\n\t\t\t\tyhat,\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t}\n\tprintParameters(model, loss, yhat, epoch) {\n\t\tlet weightsData = [];\n\t\tlet biasesData = [];\n\t\tfor (let i = 0; i < model.getWeights().length; i++) {\n\t\t\t(i % 2 === 0 ? weightsData : biasesData).push(\n\t\t\t\tArray.from(model.getWeights()[i].dataSync())\n\t\t\t);\n\t\t}\n\t\tconst lossArray = [...this.state.lossArray, loss];\n\t\tthis.setState({\n\t\t\tbiasesData,\n\t\t\tweightsData,\n\t\t\tloss,\n\t\t\tyhat,\n\t\t\tepoch,\n\t\t\tlossArray,\n\t\t});\n\t\tthis.initNeuralNetwork(this.state.shape);\n\t}\n\tasync asyncPause() {\n\t\tthis.setState({ controls: { ...this.state.controls, playing: false } });\n\t}\n\tasync resetParameters(scale) {\n\t\ttf.dispose(this.state.tensorFlowNN);\n\t\tconst { curve } = this.state;\n\t\tlet eqn;\n\t\tlet optimizer;\n\t\ttf.tidy(() => {\n\t\t\tif (curve === \"sin\") {\n\t\t\t\teqn = tf.sin;\n\t\t\t} else if (curve === \"tanh\") {\n\t\t\t\teqn = tf.tanh;\n\t\t\t} else if (curve === \"cos\") {\n\t\t\t\teqn = tf.cos;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t\tawait this.genTensorData(eqn, scale, 50);\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.modelCompile(this.state.lr);\n\t\t});\n\t\tthis.setState({\n\t\t\tepoch: 0,\n\t\t\tloss: null,\n\t\t\tweights: [],\n\t\t\tminiNN: null,\n\t\t\ttensorFlowNN: model,\n\t\t\tshapedWeights: [],\n\t\t\tlossArray: [],\n\t\t});\n\t\ttf.dispose(optimizer);\n\t}\n\tasync reset(scale) {\n\t\tthis.asyncPause();\n\t\tthis.resetParameters(scale);\n\t}\n\tasync componentDidMount() {\n\t\ttf.setBackend(\"cpu\");\n\t\tthis.genTensorData(tf.sin, this.state.scale, 50);\n\t\tthis.initNeuralNetwork(this.state.shape);\n\t\tconst model = tf.tidy(() => {\n\t\t\treturn this.modelCompile(0.01);\n\t\t});\n\t\tthis.setState({ tensorFlowNN: model });\n\t}\n\tshouldComponentUpdate() {\n\t\tif (this.state.stopRender) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\trender() {\n\t\t/* Destructure State*/\n\t\tconst {\n\t\t\tX,\n\t\t\ty,\n\t\t\tshape,\n\t\t\tscale,\n\t\t\tminiNN,\n\t\t\tweightsData,\n\t\t\tbiasesData,\n\t\t\tyhat,\n\t\t\trects,\n\t\t\tweights,\n\t\t\tmode,\n\t\t\tepoch,\n\t\t\tcurve,\n\t\t\tlr,\n\t\t\tloss,\n\t\t\tcontrols,\n\t\t\tshapedWeights,\n\t\t\tshapedLinks,\n\t\t\tshapedRects,\n\t\t\tkeyFrameLayer,\n\t\t\tkeyFrameLoss,\n\t\t\tsubEpoch,\n\t\t\tisAnimating,\n\t\t\tsingleInputExample,\n\t\t\tsingleLabelExample,\n\t\t\tlossSavings,\n\t\t\tcontrolCenterHelp,\n\t\t\tcustomizationHelp,\n\t\t\tneuralNetworkHelp,\n\t\t\tlossChange,\n\t\t\tscatterHelp,\n\t\t} = this.state;\n\t\tconst { playing, speed } = controls;\n\n\t\tconst lrs = [0.001, 0.005, 0.01, 0.05, 0.1];\n\t\tconst dataSets = [\n\t\t\t{ label: \"sin\", eqn: tf.sin, scale: 5 },\n\t\t\t{ label: \"cos\", eqn: tf.cos, scale: 5 },\n\t\t\t{ label: \"tanh\", eqn: tf.tanh, scale: 5 },\n\t\t];\n\n\t\t/* Destructure render */\n\t\tconst PlayButtonClick = (\n\t\t\t// eslint-disable-next-line\n\t\t\t<Fab\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: !this.state.controls.playing\n\t\t\t\t\t\t? \"#175676\"\n\t\t\t\t\t\t: \"#D62839\",\n\t\t\t\t\tcolor: \"white\",\n\t\t\t\t}}\n\t\t\t\tdisableTouchRipple\n\t\t\t\tonClick={() => this.run()}\n\t\t\t>\n\t\t\t\t{!playing ? <PlayArrow /> : <Stop />}\n\t\t\t</Fab>\n\t\t);\n\t\tconst controlsReg = (\n\t\t\t<CardActions>\n\t\t\t\t<Tooltip title=\"reset\" arrow>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tdisabled={playing}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Replay />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Tooltip>\n\t\t\t\t{PlayButtonClick}\n\t\t\t\t<Tooltip title=\"slomo\" arrow>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: speed === 0 ? \"grey\" : \"#FFC006\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tcontrols: {\n\t\t\t\t\t\t\t\t\t...controls,\n\t\t\t\t\t\t\t\t\tspeed: speed === 0 ? 100 : 0,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SlowMotionVideo />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Tooltip>\n\t\t\t</CardActions>\n\t\t);\n\t\tconst controlsBackProp = (\n\t\t\t<Box>\n\t\t\t\t<CardActions>\n\t\t\t\t\tPhase:\n\t\t\t\t\t<Button\n\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: subEpoch === \"forward\" ? \"orange\" : \"grey\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tForward\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: subEpoch === \"backward\" ? \"orange\" : \"grey\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tBackward\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: subEpoch === \"update\" ? \"orange\" : \"grey\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tUpdate\n\t\t\t\t\t</Button>\n\t\t\t\t</CardActions>\n\t\t\t\t<CardActions>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\tawait this.anim();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={isAnimating}\n\t\t\t\t\t\tstyle={{ color: isAnimating ? \"lightgrey\" : \"black\" }}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t>\n\t\t\t\t\t\tREPLAY\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\tthis.randomInputGeneration(\n\t\t\t\t\t\t\t\tX,\n\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\tweightsData,\n\t\t\t\t\t\t\t\tbiasesData,\n\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t0.0001,\n\t\t\t\t\t\t\t\tmode\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tawait this.anim();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={{ color: isAnimating ? \"lightgrey\" : \"black\" }}\n\t\t\t\t\t\tdisabled={isAnimating}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t>\n\t\t\t\t\t\tNew Training Example\n\t\t\t\t\t</Button>\n\t\t\t\t</CardActions>\n\t\t\t</Box>\n\t\t);\n\t\tconst controlCenter = (\n\t\t\t<Box width={400}>\n\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: \"#4BA3C3\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{\"Control Center\"}\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\tstyle={{ color: \"orange\" }}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.setState({ controlCenterHelp: true });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Help />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\t{mode\n\t\t\t\t\t\t\t\t\t\t? \"Click to go back\"\n\t\t\t\t\t\t\t\t\t\t: \"Click to see Backpropagation\"}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tarrow\n\t\t\t\t\t\t\tplacement=\"right-start\"\n\t\t\t\t\t\t\topen={playing || (mode && !isAnimating)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tdisabled={loss == null || isAnimating}\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tif (mode) {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ subEpoch: \"\" });\n\t\t\t\t\t\t\t\t\t\tthis.setState({ mode: !mode });\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.randomInputGeneration(\n\t\t\t\t\t\t\t\t\t\t\tX,\n\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\tweightsData,\n\t\t\t\t\t\t\t\t\t\t\tbiasesData,\n\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t0.0001,\n\t\t\t\t\t\t\t\t\t\t\tmode\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tawait this.anim();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\n\t\t\t\t\t\t\t\t\tEpoch: {epoch}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Tooltip>\n\n\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t{mode && lossChange != 0 ? \"loss: \" : \"\"}\n\t\t\t\t\t\t\t{mode && lossChange != 0 ? (\n\t\t\t\t\t\t\t\t<AnimatedNumber\n\t\t\t\t\t\t\t\t\tvalue={lossChange}\n\t\t\t\t\t\t\t\t\tformatValue={(value) =>\n\t\t\t\t\t\t\t\t\t\tvalue.toPrecision(6)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tduration={750}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t{loss == null || mode\n\t\t\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t\t\t: `Loss: ${loss.toPrecision(6)}`}\n\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t{mode\n\t\t\t\t\t\t\t\t? `Input: ${singleInputExample.toPrecision(\n\t\t\t\t\t\t\t\t\t\t6\n\t\t\t\t\t\t\t\t  )}, Label: ${singleLabelExample.toPrecision(\n\t\t\t\t\t\t\t\t\t\t6\n\t\t\t\t\t\t\t\t  )}`\n\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t{mode ? controlsBackProp : controlsReg}\n\n\t\t\t\t\t\t<CardActions></CardActions>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\n\t\t\t\t<Box marginTop={5}>\n\t\t\t\t\t<Card variant=\"outlined\">\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\tvariant=\"caption\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tcolor: \"#4BA3C3\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\"Customization \"}\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"orange\" }}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\tcustomizationHelp: true,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Help />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tLearning Rate\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t{lrs.map((num, i) => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tdisabled={playing || mode}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tlabel={`${num}`}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\t\t\t\tlr === num ? \"white\" : \"grey\",\n\t\t\t\t\t\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\t\t\t\t\t\tlr === num\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#175676\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"lightgrey\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.changeModelLr(num);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tData Set\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t{dataSets.map((item, i) => (\n\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\tdisabled={playing || mode}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\t\t\t\tcurve === item.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"white\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"grey\",\n\t\t\t\t\t\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\t\t\t\t\t\tcurve === item.label\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#175676\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"lightgrey\",\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tshape,\n\t\t\t\t\t\t\t\t\t\t\t\tcurve: item.label,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t\ttf.tidy(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.genTensorData(\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.eqn,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.scale,\n\t\t\t\t\t\t\t\t\t\t\t\t\t50\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t></Chip>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\t\t\tNeurons\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"#175676\" }}\n\t\t\t\t\t\t\t\t\tdefaultValue={2}\n\t\t\t\t\t\t\t\t\tdisabled={playing || mode}\n\t\t\t\t\t\t\t\t\taria-labelledby=\"discrete-slider\"\n\t\t\t\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\t\t\t\tmarks\n\t\t\t\t\t\t\t\t\tonChange={(e, n) => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ sliderVal: n });\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\t\t\tmax={8}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tdisabled={playing || mode}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tlet a = shape;\n\t\t\t\t\t\t\t\t\t\tif (a.length < 5) {\n\t\t\t\t\t\t\t\t\t\t\ta[\n\t\t\t\t\t\t\t\t\t\t\t\ta.length - 1\n\t\t\t\t\t\t\t\t\t\t\t] = this.state.sliderVal;\n\t\t\t\t\t\t\t\t\t\t\ta.push(1);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ shape: a });\n\t\t\t\t\t\t\t\t\t\t\tthis.initNeuralNetwork(a);\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tdisabled={playing || mode}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tlet a = shape;\n\t\t\t\t\t\t\t\t\t\tif (a.length > 2) {\n\t\t\t\t\t\t\t\t\t\t\ta.splice(a.length - 2, 1);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({ shape: a });\n\t\t\t\t\t\t\t\t\t\t\tthis.initNeuralNetwork(a);\n\t\t\t\t\t\t\t\t\t\t\tthis.reset(scale);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t–\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t\tconst scatter = (\n\t\t\t<Box marginLeft={10}>\n\t\t\t\t<Box>\n\t\t\t\t\t<ScatterPlot\n\t\t\t\t\t\twidth={300}\n\t\t\t\t\t\theight={300}\n\t\t\t\t\t\tpadding={0}\n\t\t\t\t\t\tstart={-scale}\n\t\t\t\t\t\tstop={scale}\n\t\t\t\t\t\tX={X}\n\t\t\t\t\t\ty={y}\n\t\t\t\t\t\tyhat={yhat}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: \"orange\",\n\t\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\t\tbottom: \"300px\",\n\t\t\t\t\t\t\tright: \"40px\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tscatterHelp: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Help />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Box>\n\t\t\t\t<Box marginTop={10}>\n\t\t\t\t\t<Loss lossArray={this.state.lossArray} loss={loss} />\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t);\n\t\tconst neuralNetwork = (\n\t\t\t<Box marginLeft={10}>\n\t\t\t\t<NeuralNetworkComponent\n\t\t\t\t\tminiNN={miniNN}\n\t\t\t\t\tinput={singleInputExample}\n\t\t\t\t\tlabel={singleLabelExample}\n\t\t\t\t\tshapedWeights={shapedWeights}\n\t\t\t\t\tshapedLinks={shapedLinks}\n\t\t\t\t\tshapedRects={shapedRects}\n\t\t\t\t\tshape={shape}\n\t\t\t\t\tbiases={biasesData}\n\t\t\t\t\tweights={weights}\n\t\t\t\t\trects={rects}\n\t\t\t\t\tplaying={\n\t\t\t\t\t\tplaying\n\t\t\t\t\t\t\t? speed === 0\n\t\t\t\t\t\t\t\t? \"edgeForward\"\n\t\t\t\t\t\t\t\t: \"edgeSlowed\"\n\t\t\t\t\t\t\t: \"edgePaused\"\n\t\t\t\t\t}\n\t\t\t\t\tshow={playing}\n\t\t\t\t\tmode={mode}\n\t\t\t\t\tbackward={this.state.direction}\n\t\t\t\t\tkeyFrameLayer={keyFrameLayer}\n\t\t\t\t\tkeyFrameLoss={keyFrameLoss}\n\t\t\t\t\tsubEpoch={subEpoch}\n\t\t\t\t\tlossSavings={lossSavings}\n\t\t\t\t\tisAnimating={isAnimating}\n\t\t\t\t\tlr={lr}\n\t\t\t\t></NeuralNetworkComponent>\n\t\t\t\t<IconButton\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: \"orange\",\n\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\tbottom: \"500px\",\n\t\t\t\t\t\tleft: \"100px\",\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tneuralNetworkHelp: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Help />\n\t\t\t\t</IconButton>\n\t\t\t</Box>\n\t\t);\n\n\t\treturn (\n\t\t\t<div id=\"app\">\n\t\t\t\t<Card\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: \"#FAFAFA\",\n\t\t\t\t\t\toutlineColor: \"white\",\n\t\t\t\t\t\tpaddingBottom: \"1em\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tclassName=\"regular\"\n\t\t\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\t\t\tjustifyContent=\"center\"\n\t\t\t\t\t\t\tmarginTop={10}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{controlCenter}\n\t\t\t\t\t\t\t{neuralNetwork}\n\t\t\t\t\t\t\t{scatter}\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\n\t\t\t\t<Dialog\n\t\t\t\t\tPaperProps={{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbackgroundColor: \"#F7F7F7\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\topen={controlCenterHelp}\n\t\t\t\t>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.setState({ controlCenterHelp: false });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Close />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</DialogActions>\n\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={controlGif}\n\t\t\t\t\t\t\talt=\"how to use control center\"\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\tThe <em>control</em> center is where you{\" \"}\n\t\t\t\t\t\t\t<em>control</em> the flow of the program. You can\n\t\t\t\t\t\t\tplay, pause, slow down and reset.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t<Box marginBottom={5}>\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tWhat is an Epoch?\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tAn epoch is single iteration of training.\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tWhat is Loss?\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tLoss tells you the error of the current\n\t\t\t\t\t\t\t\t\tpredicitions. Lower is better.\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tHow Do I go into Backpropogation Mode?\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tClick on the EPOCH\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t</Dialog>\n\t\t\t\t<Dialog\n\t\t\t\t\tPaperProps={{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbackgroundColor: \"#F7F7F7\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\topen={customizationHelp}\n\t\t\t\t>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.setState({ customizationHelp: false });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Close />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</DialogActions>\n\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={customGif}\n\t\t\t\t\t\t\talt=\"how to use control center\"\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Typography variant=\"caption\">\n\t\t\t\t\t\t\tThe <em>customization</em> is where you{\" \"}\n\t\t\t\t\t\t\t<em>customize</em> data, learning rate, and model\n\t\t\t\t\t\t\tshape.\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t<Box marginBottom={5}>\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tWhat is an Learning Rate?\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tLearning rate roughly translates to the\n\t\t\t\t\t\t\t\t\tmagnitiude of change each time parameters\n\t\t\t\t\t\t\t\t\tare updated. You could think of it as how\n\t\t\t\t\t\t\t\t\tbig your steps are down a gradient.\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tThe learning rate is applied to the opposite\n\t\t\t\t\t\t\t\t\tgradient after backpropogation.\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\t\t\tWhy would I change learning rate?\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tDepending on the shape of the model and the\n\t\t\t\t\t\t\t\t\tamount of data,a higher learning rate could\n\t\t\t\t\t\t\t\t\tallow your model to take less epochs to\n\t\t\t\t\t\t\t\t\treach the target loss. But if the learning\n\t\t\t\t\t\t\t\t\trate is too large, you will never reach the\n\t\t\t\t\t\t\t\t\tminimum of loss that you want.\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t</Dialog>\n\n\t\t\t\t<Dialog\n\t\t\t\t\tPaperProps={{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbackgroundColor: \"#FAFAFA\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\topen={neuralNetworkHelp}\n\t\t\t\t>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.setState({ neuralNetworkHelp: false });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Close />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</DialogActions>\n\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={nnDiagram}\n\t\t\t\t\t\t\talt=\"how to use control center\"\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t<Box marginBottom={5}>\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">Summary</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tEach grey square with a black outline is a\n\t\t\t\t\t\t\t\t\tneuron. Each connection indicates where the\n\t\t\t\t\t\t\t\t\tinputs travel. The thikness and the color of\n\t\t\t\t\t\t\t\t\teach connection also indicate the weight\n\t\t\t\t\t\t\t\t\tassociated.\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tAs the weights change, there will be a\n\t\t\t\t\t\t\t\t\tvisible change in stroke size.\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t</Dialog>\n\n\t\t\t\t<Dialog\n\t\t\t\t\tPaperProps={{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbackgroundColor: \"#F7F7F7\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\topen={scatterHelp}\n\t\t\t\t>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.setState({ scatterHelp: false });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Close />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</DialogActions>\n\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<img src={scatterGif} alt=\"fitment\" width=\"100%\" />\n\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t<Box marginBottom={5}>\n\t\t\t\t\t\t\t\t<Typography variant=\"h6\">Summary</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tThe black line represents the current\n\t\t\t\t\t\t\t\t\tpredictions of the neural network.\n\t\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t\t\tEach gray dot is a xy coordinate that\n\t\t\t\t\t\t\t\t\trepresents the input and input label.\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t</Dialog>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MainTool;\n","import React, { Component } from \"react\";\nimport { Bar, MainTool } from \"./components/exports\";\nimport \"katex/dist/katex.min.css\";\nimport { InlineMath, BlockMath } from \"react-katex\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Bar title={\"Backpropogation Explainer\"} />\n\t\t\t\t<MainTool />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}